
################################################################################################################
###                                                                                                          ###
### WARNING: This file is automatically generated DO NOT modify this file directly as it will be overwritten ###
###                                                                                                          ###
################################################################################################################


################################################################################################################
###                                                                                                          ###
###                                         INFO: JSON CONFIGS                                               ###
###                                                                                                          ###
################################################################################################################

$programs = @('{"winget":"Docker.DockerDesktop","name":"Docker Desktop","id":"DblInstallDockerdesktop"}','{"winget":"Git.Git","name":"Git","id":"DblInstallGit"}','{"winget":"GitExtensionsTeam.GitExtensions","name":"Git Extensions","id":"DblInstallGitextensions"}','{"winget":"GitHub.GitHubDesktop","name":"GitHub Desktop","id":"DblInstallGithubdesktop"}','{"winget":"GodotEngine.GodotEngine","name":"Godot Engine","id":"DblInstallGodotEngine"}','{"winget":"GoLang.Go","name":"Go Programming Language","id":"DblInstallGolang"}','{"winget":"HeidiSQL.HeidiSQL","name":"HeidiSQL","id":"DblInstallHeidisql"}','{"winget":"Oracle.MySQL","name":"MySQL","id":"DblInstallMySQL"}','{"winget":"OpenJS.NodeJS","name":"Node.js","id":"DblInstallNodejs"}','{"winget":"OpenJS.NodeJS.LTS","name":"Node.js LTS","id":"DblInstallNodejslts"}','{"winget":"CoreyButler.NVMforWindows","name":"Node Version Manager (NVM)","id":"DblInstallNodemanager"}','{"winget":"EclipseAdoptium.Temurin.8.JRE","name":"Java 8","id":"DblInstallJava8"}','{"winget":"EclipseAdoptium.Temurin.11.JRE","name":"Java 11","id":"DblInstallJava11"}','{"winget":"EclipseAdoptium.Temurin.17.JRE","name":"Java 17","id":"DblInstallJava17"}','{"winget":"EclipseAdoptium.Temurin.21.JDK","name":"Java 21","id":"DblInstallJava21"}','{"winget":"JanDeDobbeleer.OhMyPosh","name":"Oh My Posh","id":"DblInstallOhmyposh"}','{"winget":"Python.Python.3.12","name":"Python 3","id":"DblInstallPython3"}','{"winget":"RedHat.Podman","name":"Podman","id":"DblInstallPodman"}','{"winget":"Postman.Postman","name":"Postman","id":"DblInstallPostman"}','{"winget":"RubyInstallerTeam.Ruby.3.2","name":"Ruby 3.2","id":"DblInstallRuby"}','{"winget":"Rustlang.Rust.MSVC","name":"Rust","id":"DblInstallRust"}','{"winget":"DBBrowserForSQLite.DBBrowserForSQLite","name":"SQLite","id":"DblInstallSQLite"}','{"winget":"Microsoft.SQLServer.2022.Developer","name":"SQL Server 2022 Developer","id":"DblInstallSQLServer2022"}','{"winget":"Unity.Unity.2022","name":"Unity 2022","id":"DblInstallUnity"}','{"winget":"Hashicorp.Vagrant","name":"Vagrant","id":"DblInstallVagrant"}','{"winget":"Microsoft.VisualStudio.2022.Community","name":"Visual Studio 2022","id":"DblInstallVisualstudio2022"}','{"winget":"Microsoft.VisualStudioCode","name":"Visual Studio Code","id":"DblInstallCode"}','{"winget":"Microsoft.DotNet.DesktopRuntime.3_1","name":".NET Core 3","id":"DblInstallDotnet3"}','{"winget":"Microsoft.DotNet.DesktopRuntime.5","name":".NET 5","id":"DblInstallDotnet5"}','{"winget":"Microsoft.DotNet.DesktopRuntime.6","name":".NET 6","id":"DblInstallDotnet6"}','{"winget":"Microsoft.DotNet.DesktopRuntime.7","name":".NET 7","id":"DblInstallDotnet7"}','{"winget":"Microsoft.DotNet.DesktopRuntime.8","name":".NET 8","id":"DblInstallDotnet8"}','{"winget":"Microsoft.Sysinternals.Autoruns","name":"Autoruns","id":"DblInstallAutoruns"}','{"winget":"MHNexus.HxD","name":"HxD Hex Editor","id":"DblInstallHxD"}','{"winget":"Microsoft.PowerShell","name":"PowerShell","id":"DblInstallPowershell"}','{"winget":"Microsoft.PowerToys","name":"PowerToys","id":"DblInstallPowertoys"}','{"winget":"Microsoft.Sysinternals.ProcessExplorer","name":"Process Explorer","id":"DblInstallProcessExplorer"}','{"winget":"Microsoft.VCRedist.2015+.x64","name":"Visual 2015 Redistributable (64-bit)","id":"DblInstallvc2015_64"}','{"winget":"Microsoft.VCRedist.2015+.x86","name":"Visual 2015 Redistributable (32-bit)","id":"DblInstallvc2015_32"}','{"winget":"Microsoft.WindowsTerminal","name":"Windows Terminal","id":"DblInstallTerminal"}','{"winget":"Brave.Brave","name":"Brave","id":"DblInstallBrave"}','{"winget":"Google.Chrome","name":"Google Chrome","id":"DblInstallChrome"}','{"winget":"eloston.ungoogled-chromium","name":"Chromium","id":"DblInstallChromium"}','{"winget":"Mozilla.Firefox","name":"Mozilla Firefox","id":"DblInstallFirefox"}','{"winget":"MullvadVPN.MullvadBrowser","name":"Mullvad","id":"DblInstallMullvad"}','{"winget":"Alex313031.Thorium","name":"Thorium","id":"DblInstallThorium"}','{"winget":"Alex313031.Thorium.AVX2","name":"Thorium AVX2","id":"DblInstallThoriumAVX"}','{"winget":"TorProject.TorBrowser","name":"Tor Browser","id":"DblInstallTor"}','{"winget":"Librewolf.Librewolf","name":"Librewolf","id":"DblInstallLibrewolf"}','{"winget":"Ablaze.Floorp","name":"Floorp","id":"DblInstallFloorp"}','{"winget":"eloston.ungoogled-chromium","name":"Ungoogled","id":"DblInstallUngoogled"}','{"winget":"VivaldiTechnologies.Vivaldi","name":"Vivaldi","id":"DblInstallVivaldi"}','{"winget":"Waterfox.Waterfox","name":"Waterfox","id":"DblInstallWaterfox"}','{"winget":"Discord.Discord","name":"Discord","id":"DblInstallDiscord"}','{"winget":"Element.Element","name":"Element (Matrix)","id":"DblInstallMatrix"}','{"winget":"Microsoft.Skype","name":"Skype","id":"DblInstallSkype"}','{"winget":"SlackTechnologies.Slack","name":"Slack","id":"DblInstallSlack"}','{"winget":"Microsoft.Teams","name":"Microsoft Teams","id":"DblInstallTeams"}','{"winget":"Telegram.TelegramDesktop","name":"Telegram","id":"DblInstallTelegram"}','{"winget":"Viber.Viber","name":"Viber","id":"DblInstallViber"}','{"winget":"Zoom.Zoom","name":"Zoom","id":"DblInstallZoom"}','{"winget":"BlueStack.BlueStacks","name":"Bluestacks","id":"DblInstallBluestacks"}','{"winget":"Cemu.Cemu","name":"Cemu","id":"DblInstallCemu"}','{"winget":"ElectronicArts.EADesktop","name":"EA Desktop App","id":"DblInstallEaapp"}','{"winget":"Emulationstation.Emulationstation","name":"Emulation Station","id":"DblInstallEmulationstation"}','{"winget":"EpicGames.EpicGamesLauncher","name":"Epic Games Store","id":"DblInstallEpicgames"}','{"winget":"Nvidia.GeforceNOW","name":"NVIDIA GeForce NOW","id":"DblInstallGeforcenow"}','{"winget":"GOG.Galaxy","name":"GOG Galaxy","id":"DblInstallGog"}','{"winget":"Playnite.Playnite","name":"Playnite","id":"DblInstallPlaynite"}','{"winget":"PrismLauncher.PrismLauncher","name":"Prism Launcher","id":"DblInstallPrism"}','{"winget":"SideQuestVR.SideQuest","name":"SideQuestVR","id":"DblInstallSideQuest"}','{"winget":"Valve.Steam","name":"Steam","id":"DblInstallSteam"}','{"winget":"LizardByte.Sunshine","name":"Sunshine Stream Server","id":"DblInstallSunshine"}','{"winget":"HeroicGamesLauncher.HeroicGamesLauncher","name":"Heroic Games Launcher","id":"DblInstallHeroic"}','{"winget":"ItchIo.Itch","name":"itch.io","id":"DblInstallItch"}','{"winget":"MedalB.V.Medal","name":"Medal","id":"DblInstallMedal"}','{"winget":"MoonlightGameStreamingProject.Moonlight","name":"Moonlight Stream Client","id":"DblInstallMoonlight"}','{"winget":null,"name":"Legendary Epic (Python)","id":"DblPythonEpicCLI"}','{"winget":"Ubisoft.Connect","name":"Ubisoft Connect","id":"DblInstallUbisoft"}','{"winget":"Wargaming.GameCenter","name":"Wargaming Game Center","id":"DblInstallWargaming"}','{"winget":"xemu-project.xemu","name":"XEMU","id":"DblInstallXemu"}','{"winget":"Audacity.Audacity","name":"Audacity","id":"DblInstallAudacity"}','{"winget":"9MVZQVXJBQ9V","name":"AV1 Video Extension","id":"DblInstallAV1"}','{"winget":"BlenderFoundation.Blender","name":"Blender","id":"DblInstallBlender"}','{"winget":"Figma.Figma","name":"Figma","id":"DblInstallFigma"}','{"winget":"Gyan.FFmpeg","name":"FFmpeg","id":"DblInstallFFmpeg"}','{"winget":"CiderCollective.Cider","name":"Cider","id":"DblInstallCider"}','{"winget":"Greenshot.Greenshot","name":"Greenshot","id":"DblInstallGreenshot"}','{"winget":"HandBrake.HandBrake","name":"Handbrake","id":"DblInstallHandbrake"}','{"winget":"DuongDieuPhap.ImageGlass","name":"ImageGlass","id":"DblInstallImageglass"}','{"winget":"XBMCFoundation.Kodi","name":"Kodi","id":"DblInstallKodi"}','{"winget":"CodecGuide.K-LiteCodecPack.Standard","name":"K-Lite Codec Pack","id":"DblInstallKlite"}','{"winget":"MediaArea.MediaInfo.GUI","name":"MediaInfo","id":"DblInstallMediaInfo"}','{"winget":"MoritzBunkus.MKVToolNix","name":"MKVToolNix","id":"DblInstallMKVToolNix"}','{"winget":"Plex.Plex","name":"Plex Client","id":"DblInstallPlex"}','{"winget":"Plex.PlexMediaServer","name":"Plex Server","id":"DblInstallPlexServer"}','{"winget":"OBSProject.OBSStudio","name":"OBS Studio","id":"DblInstallObs"}','{"winget":"9NCBCSZSJRSB","name":"Spotify","id":"DblInstallSpotify"}','{"winget":"ShareX.ShareX","name":"ShareX","id":"DblInstallSharex"}','{"winget":"VideoLAN.VLC","name":"VLC Media Player","id":"DblInstallVlc"}','{"winget":"9N4D0MSMP0PT","name":"VP9 Video Extensions","id":"DblInstallVP9"}','{"winget":"yt-dlp.yt-dlp","name":"yt-dlp","id":"DblInstallYtdlp"}','{"winget":"Anki.Anki","name":"Anki","id":"DblInstallAnki"}','{"winget":"Adobe.Acrobat.Reader.64-bit","name":"Adobe","id":"DblInstallAdobe"}','{"winget":"Joplin.Joplin","name":"Joplin","id":"DblInstallJoplin"}','{"winget":"TheDocumentFoundation.LibreOffice","name":"LibreOffice","id":"DblInstallLibreoffice"}','{"winget":"Neovim.Neovim","name":"Neovim","id":"DblInstallNeovim"}','{"winget":"Neovim.Neovim.Nightly","name":"Neovim Nightly","id":"DblInstallNeovimNightly"}','{"winget":"Notion.Notion","name":"Notion","id":"DblInstallNotion"}','{"winget":"Notepad++.Notepad++","name":"Notepad","id":"DblInstallNotepadplus"}','{"winget":"JackieLiu.NotepadsApp","name":"Notepads","id":"DblInstallNotepadsApp"}','{"winget":"Obsidian.Obsidian","name":"Obsidian","id":"DblInstallObsidian"}','{"winget":"ONLYOFFICE.DesktopEditors","name":"OnlyOffice","id":"DblInstallOnlyoffice"}','{"winget":"SublimeHQ.SublimeText.3","name":"Sublime Text 4","id":"DblInstallSublime4"}','{"winget":"SumatraPDF.SumatraPDF","name":"Sumatra","id":"DblInstallSumatra"}','{"winget":"Kingsoft.WPSOffice","name":"WPS Office","id":"DblInstallWPS"}','{"winget":"WinMerge.WinMerge","name":"WinMerge","id":"DblInstallWinmerge"}','{"winget":"AgileBits.1Password","name":"1Password","id":"DblInstall1Password"}','{"winget":"7zip.7zip","name":"7-zip","id":"DblInstall7zip"}','{"winget":"Google.PlatformTools","name":"Android Debug Bridge","id":"DblInstallADB"}','{"winget":"Alacritty.Alacritty","name":"Alacritty","id":"DblInstallAlacritty"}','{"winget":"Anydo.Anydo","name":"Anydo","id":"DblInstallAnydo"}','{"winget":"autohotkey","name":"AutoHotkey","id":"DblInstallAutohotkey"}','{"winget":"Bitwarden.Bitwarden","name":"Bitwarden","id":"DblInstallBitwarden"}','{"winget":"ChatterinoTeam.Chatterino","name":"Chatterino","id":"DblInstallChatterino"}','{"winget":"PopeenCom.ClassicVolumeMixer","name":"ClassicVolumeMixer","id":"DblInstallClasicMixer"}','{"winget":"CPUID.CPU-Z","name":"CPU-Z","id":"DblInstallCpuz"}','{"winget":"Cryptomator.Cryptomator","name":"Cryptomator","id":"DblInstallCryptomator"}','{"winget":"Wagnardsoft.DisplayDriverUninstaller","name":"Display Driver Uninstaller","id":"DblInstallDdu"}','{"winget":"JGraph.Draw","name":"Draw.io","id":"DblInstallDrawio"}','{"winget":"oidtools.Everything","name":"Everything","id":"DblInstallEsearch"}','{"winget":"Google.GoogleDrive ","name":"Google Drive","id":"DblInstallGoogleDrive"}','{"winget":"TechPowerUp.GPU-Z","name":"GPU-Z","id":"DblInstallGpuz"}','{"winget":"gerardog.gsudo","name":"gsudo","id":"DblInstallGsudo"}','{"winget":"9P1TBXR6QDCX","name":"HyperX NGENUITY","id":"DblInstallNGENUITY"}','{"winget":"REALiX.HWiNFO","name":"HWiNFO","id":"DblInstallHwinfo"}','{"winget":"AppWork.JDownloader","name":"JDownloader","id":"DblInstallJdownloader"}','{"winget":"KDE.KDEConnect","name":"KDE Connect","id":"DblInstallKDEConnect"}','{"winget":"KeePassXCTeam.KeePassXC","name":"KeePassXC","id":"DblInstallKeepass"}','{"winget":"Guru3D.Afterburner","name":"Afterburner","id":"DblInstallMsiafterburner"}','{"winget":"Mozilla.Thunderbird","name":"Thunderbird","id":"DblInstallThunderbird"}','{"winget":"M2Team.NanaZip","name":"NanaZip","id":"DblInstallNanazip"}','{"winget":"gsass1.NTop","name":"NTop","id":"DblInstallNTop"}','{"winget":"TechPowerUp.NVCleanstall","name":"NVCleanstall","id":"DblInstallNvclean"}','{"winget":"Oracle.VirtualBox","name":"VirtualBox","id":"DblInstallOVirtualBox"}','{"winget":"Ookla.Speedtest.Desktop","name":"Speedtest by Ookla","id":"DblInstallSpeedtest"}','{"winget":"CalcProgrammer1.OpenRGB","name":"OpenRGB","id":"DblInstallOpenrgb"}','{"winget":"Parsec.Parsec","name":"Parsec","id":"DblInstallParsec"}','{"winget":"Postbox.Postbox","name":"Postbox","id":"DblInstallPostbox"}','{"winget":"BitSum.ProcessLasso","name":"Process Lasso","id":"DblInstallProcesslasso"}','{"winget":"ProxymanLLC.Proxyman","name":"Proxyman","id":"DblInstallProxyman"}','{"winget":"qBittorrent.qBittorrent","name":"qBittorrent","id":"DblInstallQbittorrent"}','{"winget":"Rclone.Rclone","name":"Rclone","id":"DblInstallRclone"}','{"winget":"RevoUninstaller.RevoUninstaller","name":"Revo","id":"DblInstallRevo"}','{"winget":"Rufus.Rufus","name":"Rufus","id":"DblInstallRufus"}','{"winget":"9PF4KZ2VN4W9","name":"Ttaskbar","id":"DblInstallTtaskbar"}','{"winget":"SomePythonThings.WingetUIStore","name":"WingetUI","id":"DblInstallWingetUI"}','{"winget":"RARLab.WinRAR","name":"WinRAR","id":"DblInstallWinrar"}')
$appx = @('{"id":"MicrosoftCorporationIIQuickAssist","name":"MicrosoftCorporationII.QuickAssist"}','{"id":"ClipchampClipchamp","name":"Clipchamp.Clipchamp"}','{"id":"MicrosoftOutlookForWindows","name":"Microsoft.OutlookForWindows"}','{"id":"MicrosoftPowerAutomateDesktop","name":"Microsoft.PowerAutomateDesktop"}','{"id":"MicrosoftTodos","name":"Microsoft.Todos"}','{"id":"MicrosoftAppConnector","name":"Microsoft.AppConnector"}','{"id":"MicrosoftBingFinance","name":"Microsoft.BingFinance"}','{"id":"MicrosoftBingNews","name":"Microsoft.BingNews"}','{"id":"MicrosoftBingSports","name":"Microsoft.BingSports"}','{"id":"MicrosoftBingTranslator","name":"Microsoft.BingTranslator"}','{"id":"MicrosoftBingWeather","name":"Microsoft.BingWeather"}','{"id":"MicrosoftBingFoodAndDrink","name":"Microsoft.BingFoodAndDrink"}','{"id":"MicrosoftBingHealthAndFitness","name":"Microsoft.BingHealthAndFitness"}','{"id":"MicrosoftBingTravel","name":"Microsoft.BingTravel"}','{"id":"MicrosoftMinecraftUWP","name":"Microsoft.MinecraftUWP"}','{"id":"MicrosoftGamingServices","name":"Microsoft.GamingServices"}','{"id":"MicrosoftGetHelp","name":"Microsoft.GetHelp"}','{"id":"MicrosoftGetstarted","name":"Microsoft.Getstarted"}','{"id":"MicrosoftMessaging","name":"Microsoft.Messaging"}','{"id":"MicrosoftMicrosoft3DViewer","name":"Microsoft.Microsoft3DViewer"}','{"id":"MicrosoftMicrosoftSolitaireCollection","name":"Microsoft.MicrosoftSolitaireCollection"}','{"id":"MicrosoftNetworkSpeedTest","name":"Microsoft.NetworkSpeedTest"}','{"id":"MicrosoftNews","name":"Microsoft.News"}','{"id":"MicrosoftOfficeLens","name":"Microsoft.Office.Lens"}','{"id":"MicrosoftOfficeSway","name":"Microsoft.Office.Sway"}','{"id":"MicrosoftOfficeOneNote","name":"Microsoft.Office.OneNote"}','{"id":"MicrosoftOneConnect","name":"Microsoft.OneConnect"}','{"id":"MicrosoftPeople","name":"Microsoft.People"}','{"id":"MicrosoftPrint3D","name":"Microsoft.Print3D"}','{"id":"MicrosoftSkypeApp","name":"Microsoft.SkypeApp"}','{"id":"MicrosoftWallet","name":"Microsoft.Wallet"}','{"id":"MicrosoftWhiteboard","name":"Microsoft.Whiteboard"}','{"id":"MicrosoftWindowsAlarms","name":"Microsoft.WindowsAlarms"}','{"id":"microsoftwindowscommunicationsapps","name":"microsoft.windowscommunicationsapps"}','{"id":"MicrosoftWindowsFeedbackHub","name":"Microsoft.WindowsFeedbackHub"}','{"id":"MicrosoftWindowsMaps","name":"Microsoft.WindowsMaps"}','{"id":"MicrosoftWindowsPhone","name":"Microsoft.WindowsPhone"}','{"id":"MicrosoftWindowsSoundRecorder","name":"Microsoft.WindowsSoundRecorder"}','{"id":"MicrosoftXboxApp","name":"Microsoft.XboxApp"}','{"id":"MicrosoftGamingApp","name":"Microsoft.GamingApp"}','{"id":"MicrosoftConnectivityStore","name":"Microsoft.ConnectivityStore"}','{"id":"MicrosoftCommsPhone","name":"Microsoft.CommsPhone"}','{"id":"MicrosoftScreenSketch","name":"Microsoft.ScreenSketch"}','{"id":"MicrosoftXboxTCUI","name":"Microsoft.Xbox.TCUI"}','{"id":"MicrosoftXboxGameOverlay","name":"Microsoft.XboxGameOverlay"}','{"id":"MicrosoftXboxGamingOverlay","name":"Microsoft.XboxGamingOverlay"}','{"id":"MicrosoftXboxGameCallableUI","name":"Microsoft.XboxGameCallableUI"}','{"id":"MicrosoftXboxSpeechToTextOverlay","name":"Microsoft.XboxSpeechToTextOverlay"}','{"id":"MicrosoftXboxIdentityProvider","name":"Microsoft.XboxIdentityProvider"}','{"id":"MicrosoftMixedRealityPortal","name":"Microsoft.MixedReality.Portal"}','{"id":"MicrosoftYourPhone","name":"Microsoft.YourPhone"}','{"id":"MicrosoftZuneMusic","name":"Microsoft.ZuneMusic"}','{"id":"MicrosoftZuneVideo","name":"Microsoft.ZuneVideo"}','{"id":"MicrosoftGetstarted","name":"Microsoft.Getstarted"}','{"id":"MicrosoftFamily","name":"Microsoft.Family"}','{"id":"MicrosoftMicrosoftOfficeHub","name":"Microsoft.MicrosoftOfficeHub"}','{"id":"MicrosoftMicrosoftStickyNotes","name":"Microsoft.MicrosoftStickyNotes"}','{"id":"EclipseManager","name":"*EclipseManager*"}','{"id":"ActiproSoftwareLLC","name":"*ActiproSoftwareLLC*"}','{"id":"AdobePhotoshopExpress","name":"*AdobeSystemsIncorporated.AdobePhotoshopExpress*"}','{"id":"DuolingoLearnLanguagesforFree","name":"*Duolingo-LearnLanguagesforFree*"}','{"id":"PandoraMediaInc","name":"*PandoraMediaInc*"}','{"id":"CandyCrush","name":"*CandyCrush*"}','{"id":"BubbleWitch3Saga","name":"*BubbleWitch3Saga*"}','{"id":"Wunderlist","name":"*Wunderlist*"}','{"id":"Flipboard","name":"*Flipboard*"}','{"id":"Twitter","name":"*Twitter*"}','{"id":"Facebook","name":"*Facebook*"}','{"id":"RoyalRevolt","name":"*Royal Revolt*"}','{"id":"Sway","name":"*Sway*"}','{"id":"SpeedTest","name":"*Speed Test*"}','{"id":"Dolby","name":"*Dolby*"}','{"id":"Viber","name":"*Viber*"}','{"id":"ACGMediaPlayer","name":"*ACGMediaPlayer*"}','{"id":"Netflix","name":"*Netflix*"}','{"id":"OneCalendar","name":"*OneCalendar*"}','{"id":"LinkedInforWindows","name":"*LinkedInforWindows*"}','{"id":"HiddenCityMysteryofShadows","name":"*HiddenCityMysteryofShadows*"}','{"id":"Hulu","name":"*Hulu*"}','{"id":"HiddenCity","name":"*HiddenCity*"}','{"id":"AdobePhotoshopExpress","name":"*AdobePhotoshopExpress*"}','{"id":"HotspotShieldFreeVPN","name":"*HotspotShieldFreeVPN*"}','{"id":"MicrosoftAdvertisingXaml","name":"*Microsoft.Advertising.Xaml*"}','{"id":"WindowsDevHome","name":"*Windows.DevHome*"}')
# Embedded from tweaks.json
$tweaks = @'
{
    "DblSystemRestore": {
        "Type": "CheckBox",
        "Content": "System Restore Point",
        "Description": "Creating system restore point before applying tweaks.",
        "message": "Creating system restore point...",
        "InvokeScript": [
            "Set-RestorePoint"
        ]
    },
    "DblTelemetry": {
        "Type": "CheckBox",
        "Content": "Disable Telemetry",
        "Description": "Disables Windows telemetry and data collection services.",
        "message": "Telemetry...",
        "ScheduledTask": [
        {
            "Name": "Microsoft\\Windows\\Application Experience\\Microsoft Compatibility Appraiser",
            "State": "Disabled",
            "OriginalState": "Enabled"
        },
        {
            "Name": "Microsoft\\Windows\\Application Experience\\ProgramDataUpdater",
            "State": "Disabled",
            "OriginalState": "Enabled"
        },
        {
            "Name": "Microsoft\\Windows\\Autochk\\Proxy",
            "State": "Disabled",
            "OriginalState": "Enabled"
        },
        {
            "Name": "Microsoft\\Windows\\Customer Experience Improvement Program\\Consolidator",
            "State": "Disabled",
            "OriginalState": "Enabled"
        },
        {
            "Name": "Microsoft\\Windows\\Customer Experience Improvement Program\\UsbCeip",
            "State": "Disabled",
            "OriginalState": "Enabled"
        },
        {
            "Name": "Microsoft\\Windows\\DiskDiagnostic\\Microsoft-Windows-DiskDiagnosticDataCollector",
            "State": "Disabled",
            "OriginalState": "Enabled"
        },
        {
            "Name": "Microsoft\\Windows\\Feedback\\Siuf\\DmClient",
            "State": "Disabled",
            "OriginalState": "Enabled"
        },
        {
            "Name": "Microsoft\\Windows\\Feedback\\Siuf\\DmClientOnScenarioDownload",
            "State": "Disabled",
            "OriginalState": "Enabled"
        },
        {
            "Name": "Microsoft\\Windows\\Windows Error Reporting\\QueueReporting",
            "State": "Disabled",
            "OriginalState": "Enabled"
        },
        {
            "Name": "Microsoft\\Windows\\Application Experience\\MareBackup",
            "State": "Disabled",
            "OriginalState": "Enabled"
        },
        {
            "Name": "Microsoft\\Windows\\Application Experience\\StartupAppTask",
            "State": "Disabled",
            "OriginalState": "Enabled"
        },
        {
            "Name": "Microsoft\\Windows\\Application Experience\\PcaPatchDbTask",
            "State": "Disabled",
            "OriginalState": "Enabled"
        },
        {
            "Name": "Microsoft\\Windows\\Maps\\MapsUpdateTask",
            "State": "Disabled",
            "OriginalState": "Enabled"
        }
        ],
        "registry": [
            {
                "Path": "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\DataCollection",
                "OriginalValue": "1",
                "Name": "AllowTelemetry",
                "Value": "0",
                "Type": "DWord"
            },
            {
                "Path": "HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\ContentDeliveryManager",
                "OriginalValue": "1",
                "Name": "ContentDeliveryAllowed",
                "Value": "0",
                "Type": "DWord"
            },
            {
                "Path": "HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\ContentDeliveryManager",
                "OriginalValue": "1",
                "Name": "OemPreInstalledAppsEnabled",
                "Value": "0",
                "Type": "DWord"
            },
            {
                "Path": "HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\ContentDeliveryManager",
                "OriginalValue": "1",
                "Name": "PreInstalledAppsEnabled",
                "Value": "0",
                "Type": "DWord"
            },
            {
                "Path": "HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\ContentDeliveryManager",
                "OriginalValue": "1",
                "Name": "PreInstalledAppsEverEnabled",
                "Value": "0",
                "Type": "DWord"
            },
            {
                "Path": "HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\ContentDeliveryManager",
                "OriginalValue": "1",
                "Name": "SilentInstalledAppsEnabled",
                "Value": "0",
                "Type": "DWord"
            },
            {
                "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\ContentDeliveryManager",
                "OriginalValue": "1",
                "Name": "SubscribedContent-338387Enabled",
                "Value": "0",
                "Type": "DWord"
            },
            {
                "Path": "HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\ContentDeliveryManager",
                "OriginalValue": "1",
                "Name": "SubscribedContent-338388Enabled",
                "Value": "0",
                "Type": "DWord"
            },
            {
                "Path": "HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\ContentDeliveryManager",
                "OriginalValue": "1",
                "Name": "SubscribedContent-338389Enabled",
                "Value": "0",
                "Type": "DWord"
            },
            {
                "Path": "HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\ContentDeliveryManager",
                "OriginalValue": "1",
                "Name": "SubscribedContent-353698Enabled",
                "Value": "0",
                "Type": "DWord"
            },
            {
                "Path": "HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\ContentDeliveryManager",
                "OriginalValue": "1",
                "Name": "SystemPaneSuggestionsEnabled",
                "Value": "0",
                "Type": "DWord"
            },
            {
                "Path": "HKCU:\\SOFTWARE\\Microsoft\\Siuf\\Rules",
                "OriginalValue": "0",
                "Name": "NumberOfSIUFInPeriod",
                "Value": "0",
                "Type": "DWord"
            },
            {
                "Path": "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\DataCollection",
                "OriginalValue": "0",
                "Name": "DoNotShowFeedbackNotifications",
                "Value": "1",
                "Type": "DWord"
            },
            {
                "Path": "HKCU:\\SOFTWARE\\Policies\\Microsoft\\Windows\\CloudContent",
                "OriginalValue": "0",
                "Name": "DisableTailoredExperiencesWithDiagnosticData",
                "Value": "1",
                "Type": "DWord"
            },
            {
                "Path": "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\AdvertisingInfo",
                "OriginalValue": "0",
                "Name": "DisabledByGroupPolicy",
                "Value": "1",
                "Type": "DWord"
            },
            {
                "Path": "HKLM:\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting",
                "OriginalValue": "0",
                "Name": "Disabled",
                "Value": "1",
                "Type": "DWord"
            },
            {
                "Path": "HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\DeliveryOptimization\\Config",
                "OriginalValue": "1",
                "Name": "DODownloadMode",
                "Value": "1",
                "Type": "DWord"
            },
            {
                "Path": "HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Remote Assistance",
                "OriginalValue": "1",
                "Name": "fAllowToGetHelp",
                "Value": "0",
                "Type": "DWord"
            },
            {
                "Path": "HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\OperationStatusManager",
                "OriginalValue": "0",
                "Name": "EnthusiastMode",
                "Value": "1",
                "Type": "DWord"
            },
            {
                "Path": "HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced",
                "OriginalValue": "1",
                "Name": "ShowTaskViewButton",
                "Value": "0",
                "Type": "DWord"
            },
            {
                "Path": "HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\\People",
                "OriginalValue": "1",
                "Name": "PeopleBand",
                "Value": "0",
                "Type": "DWord"
            },
            {
                "Path": "HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced",
                "OriginalValue": "1",
                "Name": "LaunchTo",
                "Value": "1",
                "Type": "DWord"
            },
            {
                "Path": "HKLM:\\SYSTEM\\CurrentControlSet\\Control\\FileSystem",
                "OriginalValue": "0",
                "Name": "LongPathsEnabled",
                "Value": "1",
                "Type": "DWord"
            },
            {
                "_Comment": "Driver searching is a function that should be left in",
                "Path": "HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\DriverSearching",
                "OriginalValue": "1",
                "Name": "SearchOrderConfig",
                "Value": "1",
                "Type": "DWord"
            },
            {
                "Path": "HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Multimedia\\SystemProfile",
                "OriginalValue": "1",
                "Name": "SystemResponsiveness",
                "Value": "0",
                "Type": "DWord"
            },
            {
                "Path": "HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Multimedia\\SystemProfile",
                "OriginalValue": "1",
                "Name": "NetworkThrottlingIndex",
                "Value": "4294967295",
                "Type": "DWord"
            },
            {
                "Path": "HKCU:\\Control Panel\\Desktop",
                "OriginalValue": "1",
                "Name": "MenuShowDelay",
                "Value": "1",
                "Type": "DWord"
            },
            {
                "Path": "HKCU:\\Control Panel\\Desktop",
                "OriginalValue": "1",
                "Name": "AutoEndTasks",
                "Value": "1",
                "Type": "DWord"
            },
            {
                "Path": "HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Memory Management",
                "OriginalValue": "0",
                "Name": "ClearPageFileAtShutdown",
                "Value": "0",
                "Type": "DWord"
            },
            {
                "Path": "HKLM:\\SYSTEM\\ControlSet001\\Services\\Ndu",
                "OriginalValue": "1",
                "Name": "Start",
                "Value": "2",
                "Type": "DWord"
            },
            {
                "Path": "HKCU:\\Control Panel\\Mouse",
                "OriginalValue": "400",
                "Name": "MouseHoverTime",
                "Value": "400",
                "Type": "String"
            },
            {
                "Path": "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters",
                "OriginalValue": "20",
                "Name": "IRPStackSize",
                "Value": "30",
                "Type": "DWord"
            },
            {
                "Path": "HKCU:\\SOFTWARE\\Policies\\Microsoft\\Windows\\Windows Feeds",
                "OriginalValue": "1",
                "Name": "EnableFeeds",
                "Value": "0",
                "Type": "DWord"
            },
            {
                "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Feeds",
                "OriginalValue": "1",
                "Name": "ShellFeedsTaskbarViewMode",
                "Value": "2",
                "Type": "DWord"
            },
            {
                "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer",
                "OriginalValue": "1",
                "Name": "HideSCAMeetNow",
                "Value": "1",
                "Type": "DWord"
            },
            {
                "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\UserProfileEngagement",
                "OriginalValue": "1",
                "Name": "ScoobeSystemSettingEnabled",
                "Value": "0",
                "Type": "DWord"
            }
        ],
        "InvokeScript": [
            "
            bcdedit /set `{current`} bootmenupolicy Legacy | Out-Null
                If ((get-ItemProperty -Path \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\" -Name CurrentBuild).CurrentBuild -lt 22557) {
                    $taskmgr = Start-Process -WindowStyle Hidden -FilePath taskmgr.exe -PassThru
                    Do {
                        Start-Sleep -Milliseconds 100
                        $preferences = Get-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\TaskManager\" -Name \"Preferences\" -ErrorAction SilentlyContinue
                    } Until ($preferences)
                    Stop-Process $taskmgr
                    $preferences.Preferences[28] = 0
                    Set-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\TaskManager\" -Name \"Preferences\" -Type Binary -Value $preferences.Preferences
                }
                Remove-Item -Path \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\MyComputer\\NameSpace\\{0DB7E03F-FC29-4DC6-9020-FF41B59E513A}\" -Recurse -ErrorAction SilentlyContinue

                # Fix Managed by your organization in Edge if regustry path exists then remove it

                If (Test-Path \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Edge\") {
                    Remove-Item -Path \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Edge\" -Recurse -ErrorAction SilentlyContinue
                }

                # Group svchost.exe processes
                $ram = (Get-CimInstance -ClassName Win32_PhysicalMemory | Measure-Object -Property Capacity -Sum).Sum / 1kb
                Set-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\" -Name \"SvcHostSplitThresholdInKB\" -Type DWord -Value $ram -Force

                $autoLoggerDir = \"$env:PROGRAMDATA\\Microsoft\\Diagnosis\\ETLLogs\\AutoLogger\"
                If (Test-Path \"$autoLoggerDir\\AutoLogger-Diagtrack-Listener.etl\") {
                    Remove-Item \"$autoLoggerDir\\AutoLogger-Diagtrack-Listener.etl\"
                }
                icacls $autoLoggerDir /deny SYSTEM:`(OI`)`(CI`)F | Out-Null

                # Disable Defender Auto Sample Submission
                Set-MpPreference -SubmitSamplesConsent 2 -ErrorAction SilentlyContinue | Out-Null
                "
        ]
    },
    "DblWifi": {
        "Type": "CheckBox",
        "Content": "Disable WiFi Sense",
        "Description": "Disables automatic connection to open hotspots and Wi-Fi reporting.",
        "message": "Disabling Wi-Fi Sense...",
        "Registry": [
            {
                "Path": "HKLM:\\SOFTWARE\\Microsoft\\PolicyManager\\default\\WiFi\\AllowWiFiHotSpotReporting",
                "Name": "Value",
                "Value": 0,
                "OriginalValue": 1,
                "Type": "DWord"
            },
            {
                "Path": "HKLM:\\SOFTWARE\\Microsoft\\PolicyManager\\default\\WiFi\\AllowAutoConnectToWiFiSenseHotspots",
                "Name": "Value",
                "Value": 0,
                "OriginalValue": 1,
                "Type": "DWord"
            }
        ]
    },
    "DblAH": {
        "Type": "CheckBox",
        "Content": "Disable Activity History",
        "Description": "This erases recent docs, clipboard, and run history.",
        "message": "Disabling Activity History...",
        "Registry": [
            {
                "Path": "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System",
                "Name": "EnableActivityFeed",
                "Value": 0,
                "OriginalValue": 1,
                "Type": "DWord"
            },
            {
                "Path": "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System",
                "Name": "PublishUserActivities",
                "Value": 0,
                "OriginalValue": 1,
                "Type": "DWord"
            },
            {
                "Path": "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System",
                "Name": "UploadUserActivities",
                "Value": 0,
                "OriginalValue": 1,
                "Type": "DWord"
            }
        ]
    },
    "DblExplorerAutoDiscovery": {
        "Type": "CheckBox",
        "Content": "Disable Explorer Auto Folder Discovery",
        "Description": "Windows Explorer automatically tries to guess the type of the folder based on its contents, slowing down the browsing experience.",
        "message": "Explorer Automatic Folder Discovery...",
        "InvokeScript": [
            "
            # Previously detected folders
            $bags = \"HKCU:\\Software\\Classes\\Local Settings\\Software\\Microsoft\\Windows\\Shell\\Bags\"

            # Folder types lookup table
            $bagMRU = \"HKCU:\\Software\\Classes\\Local Settings\\Software\\Microsoft\\Windows\\Shell\\BagMRU\"


            # Flush Explorer view database safely
            if (Test-Path $bags) {
                Remove-Item -Path $bags -Recurse -Force
                Write-Host \"Removed $bags\"
            } else {
                Write-Host \"Registry path not found: $bags\"
            }

            if (Test-Path $bagMRU) {
                Remove-Item -Path $bagMRU -Recurse -Force
                Write-Host \"Removed $bagMRU\"
            } else {
                Write-Host \"Registry path not found: $bagMRU\"
            }

            # Every folder
            $allFolders = \"HKCU:\\Software\\Classes\\Local Settings\\Software\\Microsoft\\Windows\\Shell\\Bags\\AllFolders\\Shell\"

            if (!(Test-Path $allFolders)) {
                New-Item -Path $allFolders -Force
                Write-Host \"Created $allFolders\"
            }

            # Generic view
            New-ItemProperty -Path $allFolders -Name \"FolderType\" -Value \"NotSpecified\" -PropertyType String -Force
            Write-Host \"Set FolderType to NotSpecified\"

            Write-Host Please sign out and back in, or restart your computer to apply the changes!
            "
        ],
        "UndoScript": [
            "
            # Previously detected folders
            $bags = \"HKCU:\\Software\\Classes\\Local Settings\\Software\\Microsoft\\Windows\\Shell\\Bags\"

            # Folder types lookup table
            $bagMRU = \"HKCU:\\Software\\Classes\\Local Settings\\Software\\Microsoft\\Windows\\Shell\\BagMRU\"

            # Flush Explorer view database safely
            if (Test-Path $bags) {
                Remove-Item -Path $bags -Recurse -Force
                Write-Host \"Removed $bags\"
            } else {
                Write-Host \"Registry path not found: $bags\"
            }

            if (Test-Path $bagMRU) {
                Remove-Item -Path $bagMRU -Recurse -Force
                Write-Host \"Removed $bagMRU\"
            } else {
                Write-Host \"Registry path not found: $bagMRU\"
            }

            Write-Host Please sign out and back in, or restart your computer to apply the changes!
            "
        ]
    },
    "DblPowershell7": {
        "Type": "CheckBox",
        "Content": "PowerShell 5 -> PowerShell 7",
        "Description": "This will edit the config file of the Windows Terminal replacing PowerShell 5 with PowerShell 7 and installing PS7 if necessary",
        "message": "PowerShell 7...",
        "InvokeScript": [
            "Invoke-TweakPS7 -action \"PS7\""
        ],
        "UndoScript": [
            "Invoke-TweakPS7 -action \"PS5\""
        ]
    },
    "DblRecallOff": {
        "Type": "CheckBox",
        "Content": "Disable Recall",
        "Description": "Turn Recall off",
        "message": "Recall...",
        "registry": [
            {
                "Path": "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsAI",
                "Name": "DisableAIDataAnalysis",
                "Type": "DWord",
                "Value": "1",
                "OriginalValue": "<RemoveEntry>"
            },
            {
                "Path": "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsAI",
                "Name": "AllowRecallEnablement",
                "Type": "DWord",
                "Value": "0",
                "OriginalValue": "<RemoveEntry>"
            },
            {
                "Path": "HKLM:\\SYSTEM\\CurrentControlSet\\Control\\CI\\Policy",
                "Name": "VerifiedAndReputablePolicyState",
                "Type": "DWord",
                "Value": "0",
                "OriginalValue": "<RemoveEntry>"
            }
            ],
        "InvokeScript": [
            "
            Write-Host \"Disable Recall\"
            DISM /Online /Disable-Feature /FeatureName:Recall /Quiet /NoRestart
            Write-Host \"Please restart your computer in order for the changes to be fully applied.\"
            "
        ],
        "UndoScript": [
            "
            Write-Host \"Enable Recall\"
            DISM /Online /Enable-Feature /FeatureName:Recall /Quiet /NoRestart
            Write-Host \"Please restart your computer in order for the changes to be fully applied.\"
            "
        ]
    },
    "DblLaptopHibernation": {
        "Type": "CheckBox",
        "Content": "Set Hibernation as default (laptops)",
        "Description": "Most modern laptops have connected standby enabled which drains the battery, this sets hibernation as default which will not drain the battery.",
        "message": "Setting Hibernation as default...",
        "registry": [
            {
                "Path": "HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Power\\PowerSettings\\238C9FA8-0AAD-41ED-83F4-97BE242C8F20\\7bc4a2f9-d8fc-4469-b07b-33eb785aaca0",
                "OriginalValue": "1",
                "Name": "Attributes",
                "Value": "2",
                "Type": "DWord"
            },
            {
                "Path": "HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Power\\PowerSettings\\abfc2519-3608-4c2a-94ea-171b0ed546ab\\94ac6d29-73ce-41a6-809f-6363ba21b47e",
                "OriginalValue": "0",
                "Name": "Attributes ",
                "Value": "2",
                "Type": "DWord"
            }
            ],
        "InvokeScript": [
            "
            Write-Host \"Turn on Hibernation\"
            Start-Process -FilePath powercfg -ArgumentList \"/hibernate on\" -NoNewWindow -Wait

            # Set hibernation as the default action
            Start-Process -FilePath powercfg -ArgumentList \"/change standby-timeout-ac 60\" -NoNewWindow -Wait
            Start-Process -FilePath powercfg -ArgumentList \"/change standby-timeout-dc 60\" -NoNewWindow -Wait
            Start-Process -FilePath powercfg -ArgumentList \"/change monitor-timeout-ac 10\" -NoNewWindow -Wait
            Start-Process -FilePath powercfg -ArgumentList \"/change monitor-timeout-dc 1\" -NoNewWindow -Wait
            "
        ],
        "UndoScript": [
            "
            Write-Host \"Turn off Hibernation\"
            Start-Process -FilePath powercfg -ArgumentList \"/hibernate off\" -NoNewWindow -Wait

            # Set standby to detault values
            Start-Process -FilePath powercfg -ArgumentList \"/change standby-timeout-ac 15\" -NoNewWindow -Wait
            Start-Process -FilePath powercfg -ArgumentList \"/change standby-timeout-dc 15\" -NoNewWindow -Wait
            Start-Process -FilePath powercfg -ArgumentList \"/change monitor-timeout-ac 15\" -NoNewWindow -Wait
            Start-Process -FilePath powercfg -ArgumentList \"/change monitor-timeout-dc 15\" -NoNewWindow -Wait
            "
        ]
    },
    "DblDebloatEdge": {
        "Type": "CheckBox",
        "Content": "Debloat Microsoft Edge",
        "Description": "Disables various telemetry options, popups, and other annoyances in Edge.",
        "message": "Debloating Microsoft Edge...",
        "registry": [
            {
                "Path": "HKLM:\\SOFTWARE\\Policies\\Microsoft\\EdgeUpdate",
                "Name": "CreateDesktopShortcutDefault",
                "Type": "DWord",
                "Value": "0",
                "OriginalValue": "1"
            },
            {
                "Path": "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Edge",
                "Name": "EdgeEnhanceImagesEnabled",
                "Type": "DWord",
                "Value": "0",
                "OriginalValue": "1"
            },
            {
                "Path": "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Edge",
                "Name": "PersonalizationReportingEnabled",
                "Type": "DWord",
                "Value": "0",
                "OriginalValue": "1"
            },
            {
                "Path": "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Edge",
                "Name": "ShowRecommendationsEnabled",
                "Type": "DWord",
                "Value": "0",
                "OriginalValue": "1"
            },
            {
                "Path": "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Edge",
                "Name": "HideFirstRunExperience",
                "Type": "DWord",
                "Value": "1",
                "OriginalValue": "0"
            },
            {
                "Path": "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Edge",
                "Name": "UserFeedbackAllowed",
                "Type": "DWord",
                "Value": "0",
                "OriginalValue": "1"
            },
            {
                "Path": "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Edge",
                "Name": "ConfigureDoNotTrack",
                "Type": "DWord",
                "Value": "1",
                "OriginalValue": "0"
            },
            {
                "Path": "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Edge",
                "Name": "AlternateErrorPagesEnabled",
                "Type": "DWord",
                "Value": "0",
                "OriginalValue": "1"
            },
            {
                "Path": "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Edge",
                "Name": "EdgeCollectionsEnabled",
                "Type": "DWord",
                "Value": "0",
                "OriginalValue": "1"
            },
            {
                "Path": "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Edge",
                "Name": "EdgeFollowEnabled",
                "Type": "DWord",
                "Value": "0",
                "OriginalValue": "1"
            },
            {
                "Path": "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Edge",
                "Name": "EdgeShoppingAssistantEnabled",
                "Type": "DWord",
                "Value": "0",
                "OriginalValue": "1"
            },
            {
                "Path": "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Edge",
                "Name": "MicrosoftEdgeInsiderPromotionEnabled",
                "Type": "DWord",
                "Value": "0",
                "OriginalValue": "1"
            },
            {
                "Path": "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Edge",
                "Name": "PersonalizationReportingEnabled",
                "Type": "DWord",
                "Value": "0",
                "OriginalValue": "1"
            },
            {
                "Path": "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Edge",
                "Name": "ShowMicrosoftRewards",
                "Type": "DWord",
                "Value": "0",
                "OriginalValue": "1"
            },
            {
                "Path": "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Edge",
                "Name": "WebWidgetAllowed",
                "Type": "DWord",
                "Value": "0",
                "OriginalValue": "1"
            },
            {
                "Path": "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Edge",
                "Name": "DiagnosticData",
                "Type": "DWord",
                "Value": "0",
                "OriginalValue": "1"
            },
            {
                "Path": "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Edge",
                "Name": "EdgeAssetDeliveryServiceEnabled",
                "Type": "DWord",
                "Value": "0",
                "OriginalValue": "1"
            },
            {
                "Path": "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Edge",
                "Name": "EdgeCollectionsEnabled",
                "Type": "DWord",
                "Value": "0",
                "OriginalValue": "1"
            },
            {
                "Path": "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Edge",
                "Name": "CryptoWalletEnabled",
                "Type": "DWord",
                "Value": "0",
                "OriginalValue": "1"
            },
            {
                "Path": "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Edge",
                "Name": "ConfigureDoNotTrack",
                "Type": "DWord",
                "Value": "1",
                "OriginalValue": "0"
            },
            {
                "Path": "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Edge",
                "Name": "WalletDonationEnabled",
                "Type": "DWord",
                "Value": "0",
                "OriginalValue": "1"
            }
        ]
    },
    "DblDeleteTempFiles" : {
        "Type": "CheckBox",
        "Content": "Delete Temporary Files",
        "Description": "Deletes temporary files from the system.",
        "message": "Deleting temporary files...",
        "InvokeScript": [
            "Get-ChildItem -Path 'C:\\Windows\\Temp' *.* -Recurse -Force | ForEach-Object {
            try { Remove-Item $_.FullName -Force -Recurse -ErrorAction Stop } 
            catch { }
            }
            Get-ChildItem -Path $env:TEMP *.* -Recurse -Force | ForEach-Object {
                try { Remove-Item $_.FullName -Force -Recurse -ErrorAction Stop } 
                catch { }
            }
            Write-Host '======================================='
            Write-Host '--- Cleaned following folders:'
            Write-Host '--- C:\\Windows\\Temp'
            Write-Host ('--- ' + $env:TEMP)
            Write-Host '======================================='"
        ]
    },
    "DblRecycleBin" : {
        "Type": "CheckBox",
        "Content": "Empty Recycle Bin",
        "Description": "Deletes all files in the Recycle Bin.",
        "message": "Deleting Recycle Bin contents...",
        "InvokeScript": [
            "Clear-RecycleBin -Force"
        ]
    },
    "DblDiskCleanup" : {
        "Type": "CheckBox",
        "Content": "Run Disk Cleanup",
        "Description": "Runs Disk Cleanup on Drive C: and removes old Windows Updates.",
        "message": "Running Disk Cleanup on Drive C:...",
        "InvokeScript": [
            "
            cleanmgr.exe /d C: /VERYLOWDISK
            Dism.exe /online /Cleanup-Image /StartComponentCleanup /ResetBase
            "
        ]
    },
    "DblLocTrack" : {
        "Type": "CheckBox",
        "Content": "Disable Location Tracking",
        "Description": "Disables location tracking... :(",
        "message": "Disabling Location Tracking...",
        "registry": [
            {
                "Path": "HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\location",
                "Name": "Value",
                "Type": "String",
                "Value": "Deny",
                "OriginalValue": "Allow"
            },
            {
                "Path": "HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Sensor\\Overrides\\{BFA794E4-F964-4FDB-90F6-51056BFE4B44}",
                "Name": "SensorPermissionState",
                "Type": "DWord",
                "Value": "0",
                "OriginalValue": "1"
            },
            {
                "Path": "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\lfsvc\\Service\\Configuration",
                "Name": "Status",
                "Type": "DWord",
                "Value": "0",
                "OriginalValue": "1"
            },
            {
                "Path": "HKLM:\\SYSTEM\\Maps",
                "Name": "AutoUpdateEnabled",
                "Type": "DWord",
                "Value": "0",
                "OriginalValue": "1"
            }
        ]
    },
    "DblStorage" : {
        "Type": "CheckBox",
        "Content": "Disable Storage Sense",
        "Description": "Storage Sense deletes temp files automatically.",
        "message": "Storage Sense...",
        "InvokeScript": [
            "Set-RegistryValue -Path \"HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\StorageSense\\Parameters\\StoragePolicy\" -Name \"01\" -Value 0 -Type \"Dword\""
        ],
        "UndoScript": [
            "Set-RegistryValue -Path \"HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\StorageSense\\Parameters\\StoragePolicy\" -Name \"01\" -Value 1 -Type \"Dword\""
        ]
    },
    "DblHiber" : {
        "Type": "CheckBox",
        "Content": "Disable Hibernation",
        "Description": "Hibernation is really meant for laptops as it saves what's in memory before turning the pc off. It really should never be used, but some people are lazy and rely on it. Don't be like Bob. Bob likes hibernation.",
        "message": "Hibernation...",
        "registry": [
            {
                "Path": "HKLM:\\System\\CurrentControlSet\\Control\\Session Manager\\Power",
                "Name": "HibernateEnabled",
                "Type": "DWord",
                "Value": "0",
                "OriginalValue": "1"
            },
            {
                "Path": "HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FlyoutMenuSettings",
                "Name": "ShowHibernateOption",
                "Type": "DWord",
                "Value": "0",
                "OriginalValue": "1"
            }
        ],
        "InvokeScript": [
            "powercfg.exe /hibernate off"
        ],
        "UndoScript": [
            "powercfg.exe /hibernate on"
        ]
    },
    "DblDVR" : {
        "Type": "CheckBox",
        "Content": "Disable GameDVR",
        "Description": "GameDVR is a Windows App that is a dependency for some Store Games. I've never met someone that likes it, but it's there for the XBOX crowd.",
        "message": "Disabling GameDVR...",
        "registry": [
            {
                "Path": "HKCU:\\System\\GameConfigStore",
                "Name": "GameDVR_FSEBehavior",
                "Value": "2",
                "OriginalValue": "1",
                "Type": "DWord"
            },
            {
                "Path": "HKCU:\\System\\GameConfigStore",
                "Name": "GameDVR_Enabled",
                "Value": "0",
                "OriginalValue": "1",
                "Type": "DWord"
            },
            {
                "Path": "HKCU:\\System\\GameConfigStore",
                "Name": "GameDVR_HonorUserFSEBehaviorMode",
                "Value": "1",
                "OriginalValue": "0",
                "Type": "DWord"
            },
            {
                "Path": "HKCU:\\System\\GameConfigStore",
                "Name": "GameDVR_EFSEFeatureFlags",
                "Value": "0",
                "OriginalValue": "1",
                "Type": "DWord"
            },
            {
                "Path": "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\GameDVR",
                "Name": "AllowGameDVR",
                "Value": "0",
                "OriginalValue": "1",
                "Type": "DWord"
            }
        ]
    },
    "DblAutoAdjustVolume" : {
        "Type": "CheckBox",
        "Content": "Disable Auto Adjust Volume",
        "Description": "Disables the automatic adjustment of volume levels for applications.",
        "message": "Disabling Auto Adjust Volume...",
        "registry": [          
            {
            "Path": "HKCU:\\Software\\Microsoft\\Multimedia\\Audio",
            "Name": "UserDuckingPreference",
            "Value": "3",
            "OriginalValue": "",
            "Type": "DWord"
            }
        ]
    },
    "DblSearchIndexer" : {
        "Type": "CheckBox",
        "Content": "Disable Search Indexer",
        "Description": "Disables the Windows Search Indexer, which can improve performance but may slow down file searches.",
        "message": "Search Indexer...",
        "service": [
            {
                "Name": "wsearch",
                "StartupType": "Disabled",
                "OriginalType": "Manual"
            }
        ]
    },
    "DblPS7Telemetry" : {
        "Type": "CheckBox",
        "Content": "Disable PowerShell 7 Telemetry",
        "Description": "Disables telemetry in PowerShell 7, which can help protect your privacy.",
        "message": "PowerShell 7 Telemetry...",
        "InvokeScript": [
            "[Environment]::SetEnvironmentVariable('POWERSHELL_TELEMETRY_OPTOUT', '1', 'Machine')"
        ],
        "UndoScript": [
            "[Environment]::SetEnvironmentVariable('POWERSHELL_TELEMETRY_OPTOUT', '', 'Machine')"
        ]
    },
    "DblConsumerFeatures" : {
        "Type": "CheckBox",
        "Content": "Disable ConsumerFeatures",
        "Description": "Windows 10 will not automatically install any games, third-party apps, or application links from the Windows Store for the signed-in user. Some default Apps will be inaccessible (eg. Phone Link)",
        "message": "Disabling ConsumerFeatures...",
        "registry": [
            {
            "Path": "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\CloudContent",
            "Name": "DisableWindowsConsumerFeatures",
            "Type": "DWord",
            "Value": 1,
            "OriginalValue": 0
            }
        ]
    },

    "DblAdobeNetworkBlock": {
        "Type": "CheckBox",
        "Content": "Adobe Network Block",
        "Description": "Reduce user interruptions by selectively blocking connections to Adobe's activation and telemetry servers. Credit: Ruddernation-Designs.",
        "message": "Blocking Adobe Network Connections...",
        "InvokeScript": [
            "
            # Define the URL of the remote HOSTS file and the local paths
            $remoteHostsUrl = \"https://raw.githubusercontent.com/Ruddernation-Designs/Adobe-URL-Block-List/master/hosts\"
            $localHostsPath = \"C:\\Windows\\System32\\drivers\\etc\\hosts\"
            $tempHostsPath = \"C:\\Windows\\System32\\drivers\\etc\\temp_hosts\"

            # Download the remote HOSTS file to a temporary location
            try {
                Invoke-WebRequest -Uri $remoteHostsUrl -OutFile $tempHostsPath
                Write-Output \"Downloaded the remote HOSTS file to a temporary location.\"
            } catch {
                Write-Error \"Failed to download the HOSTS file. Error: $_\"
            }

            # Check if the AdobeNetBlock has already been started
            try {
                $localHostsContent = Get-Content $localHostsPath -ErrorAction Stop

                # Check if AdobeNetBlock markers exist
                $blockStartExists = $localHostsContent -like \"*#AdobeNetBlock-start*\"
                if ($blockStartExists) {
                    Write-Output \"AdobeNetBlock-start already exists. Skipping addition of new block.\"
                } else {
                    # Load the new block from the downloaded file
                    $newBlockContent = Get-Content $tempHostsPath -ErrorAction Stop
                    $newBlockContent = $newBlockContent | Where-Object { $_ -notmatch \"^\\s*#\" -and $_ -ne \"\" } # Exclude empty lines and comments
                    $newBlockHeader = \"#AdobeNetBlock-start\"
                    $newBlockFooter = \"#AdobeNetBlock-end\"

                    # Combine the contents, ensuring new block is properly formatted
                    $combinedContent = $localHostsContent + $newBlockHeader, $newBlockContent, $newBlockFooter | Out-String

                    # Write the combined content back to the original HOSTS file
                    $combinedContent | Set-Content $localHostsPath -Encoding ASCII
                    Write-Output \"Successfully added the AdobeNetBlock.\"
                }
            } catch {
                Write-Error \"Error during processing: $_\"
            }

            # Clean up temporary file
            Remove-Item $tempHostsPath -ErrorAction Ignore

            # Flush the DNS resolver cache
            try {
                Invoke-Expression \"ipconfig /flushdns\"
                Write-Output \"DNS cache flushed successfully.\"
            } catch {
                Write-Error \"Failed to flush DNS cache. Error: $_\"
            }
            "
        ],
        "UndoScript": [
            "
            # Define the local path of the HOSTS file
            $localHostsPath = \"C:\\Windows\\System32\\drivers\\etc\\hosts\"

            # Load the content of the HOSTS file
            try {
                $hostsContent = Get-Content $localHostsPath -ErrorAction Stop
            } catch {
                Write-Error \"Failed to load the HOSTS file. Error: $_\"
                return
            }

            # Initialize flags and buffer for new content
            $recording = $true
            $newContent = @()

            # Iterate over each line of the HOSTS file
            foreach ($line in $hostsContent) {
                if ($line -match \"#AdobeNetBlock-start\") {
                    $recording = $false
                }
                if ($recording) {
                    $newContent += $line
                }
                if ($line -match \"#AdobeNetBlock-end\") {
                    $recording = $true
                }
            }

            # Write the filtered content back to the HOSTS file
            try {
                $newContent | Set-Content $localHostsPath -Encoding ASCII
                Write-Output \"Successfully removed the AdobeNetBlock section from the HOSTS file.\"
            } catch {
                Write-Error \"Failed to write back to the HOSTS file. Error: $_\"
            }

            # Flush the DNS resolver cache
            try {
                Invoke-Expression \"ipconfig /flushdns\"
                Write-Output \"DNS cache flushed successfully.\"
            } catch {
                Write-Error \"Failed to flush DNS cache. Error: $_\"
            }
            "
        ]
    },
    "DblIPv6": {
        "Type": "CheckBox",
        "Content": "Disable IPv6",
        "Description": "Disables IPv6 protocol on the system.",
        "message": "IPv6...",
        "registry": [
            {
                "Path": "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\Tcpip6\\Parameters",
                "Name": "DisabledComponents",
                "Value": "255",
                "OriginalValue": "0",
                "Type": "DWord"
            }
        ],
        "InvokeScript": [
            "Disable-NetAdapterBinding -Name \"*\" -ComponentID ms_tcpip6"
        ],
        "UndoScript": [
            "Enable-NetAdapterBinding -Name \"*\" -ComponentID ms_tcpip6"
        ]
    },
    "DblIPv46": {
        "Type": "CheckBox",
        "Content": "Prefer IPv4 over IPv6",
        "Description": "To set the IPv4 preference can have latency and security benefits on private networks where IPv6 is not configured.",
        "message": "Setting IPv4 preference over IPv6...",
        "registry": [
            {
                "Path": "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\Tcpip6\\Parameters",
                "Name": "DisabledComponents",
                "Value": "32",
                "OriginalValue": "0",
                "Type": "DWord"
            }
        ]
    },
    "DblDisableTeredo" : {
        "Type": "CheckBox",
        "Content": "Disable Teredo",
        "Description": "Teredo network tunneling is a ipv6 feature that can cause additional latency, but may cause problems with some games",
        "message": "Teredo...",
        "registry": [
            {
            "Path": "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\Tcpip6\\Parameters",
            "Name": "DisabledComponents",
            "Value": "1",
            "OriginalValue": "0",
            "Type": "DWord"
            }
        ],
        "InvokeScript": [
            "netsh interface teredo set state disabled"
        ],
        "UndoScript": [
            "netsh interface teredo set state default"
        ]
    },
    "DblRightClickMenu": {
        "Type": "CheckBox",
        "Content": "Classic Right-Click Menu",
        "Description": "Great Windows 11 tweak to bring back good context menus when right clicking things in explorer.",
        "message": "Setting Classic Right-Click Menu...",
        "InvokeScript": [
            "
                New-Item -Path \"HKCU:\\Software\\Classes\\CLSID\\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}\" -Name \"InprocServer32\" -force -value \"\"
                Write-Host Restarting explorer.exe ...
                $process = Get-Process -Name \"explorer\"
                Stop-Process -InputObject $process
            "
        ],
        "UndoScript": [
            "
                Remove-Item -Path \"HKCU:\\Software\\Classes\\CLSID\\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}\" -Recurse -Confirm:$false -Force
                # Restarting Explorer in the Undo Script might not be necessary, as the Registry change without restarting Explorer does work, but just to make sure.
                Write-Host Restarting explorer.exe ...
                Stop-Process -Name \"explorer\" -Force
            "
        ]
    },
    "DblUTC": {
        "Type": "CheckBox",
        "Content": "Time UTC (Dual Boot)",
        "Description": "Essential for computers that are dual booting. Fixes the time sync with Linux Systems.",
        "message": "Setting time to UTC...",
        "registry": [
            {
                "Path": "HKLM:\\SYSTEM\\CurrentControlSet\\Control\\TimeZoneInformation",
                "Name": "RealTimeIsUniversal",
                "Type": "DWord",
                "Value": 1,
                "OriginalValue": 0
            }
        ]
    },
    "DblToggleCopilot": {
        "Type": "CheckBox",
        "Content": "Disable Microsoft Copilot",
        "Description": "Disables MS Copilot AI built into Windows since 23H2.",
        "message": "Microsoft Copilot...",
        "registry": [
            {
                "Path": "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsCopilot",
                "Name": "TurnOffWindowsCopilot",
                "Type": "DWord",
                "Value": "1",
                "OriginalValue": "<RemoveEntry>"
            },
            {
                "Path": "HKCU:\\Software\\Policies\\Microsoft\\Windows\\WindowsCopilot",
                "Name": "TurnOffWindowsCopilot",
                "Type": "DWord",
                "Value": "1",
                "OriginalValue": "<RemoveEntry>"
            },
            {
                "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced",
                "Name": "ShowCopilotButton",
                "Type": "DWord",
                "Value": "0",
                "OriginalValue": "1"
            },
            {
                "Path": "HKLM:\\SOFTWARE\\Microsoft\\Windows\\Shell\\Copilot",
                "Name": "IsCopilotAvailable",
                "Type": "DWord",
                "Value": "0",
                "OriginalValue": "<RemoveEntry>"
            },
            {
                "Path": "HKLM:\\SOFTWARE\\Microsoft\\Windows\\Shell\\Copilot",
                "Name": "CopilotDisabledReason",
                "Type": "String",
                "Value": "IsEnabledForGeographicRegionFailed",
                "OriginalValue": "<RemoveEntry>"
            },
            {
                "Path": "HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\WindowsCopilot",
                "Name": "AllowCopilotRuntime",
                "Type": "DWord",
                "Value": "0",
                "OriginalValue": "<RemoveEntry>"
            },
            {
                "Path": "HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Shell Extensions\\Blocked",
                "Name": "{CB3B0003-8088-4EDE-8769-8B354AB2FF8C}",
                "Type": "String",
                "Value": "",
                "OriginalValue": "<RemoveEntry>"
            },
            {
                "Path": "HKLM:\\SOFTWARE\\Microsoft\\Windows\\Shell\\Copilot\\BingChat",
                "Name": "IsUserEligible",
                "Type": "DWord",
                "Value": "0",
                "OriginalValue": "<RemoveEntry>"
            }
        ],
        "InvokeScript": [
            "
                Write-Host \"Remove Copilot\"
                Get-Package | Where-Object Name -like '*copilot*'
                Get-AppxPackage -AllUsers *Copilot* | Remove-AppxPackage -AllUsers
                Get-AppxProvisionedPackage -Online | Where-Object PackageName -like '*Copilot*' | Remove-AppxProvisionedPackage -Online
                dism /online /remove-package /package-name:Microsoft.Windows.Copilot
            "
        ],
        "UndoScript": [
            "
                Write-Host \"Install Copilot\"
                winget install --name \"Microsoft Copilot\" --source msstore --accept-package-agreements --accept-source-agreements --silent
            "
        ]
    },
    "DblRemoveCortana": {
        "Type": "CheckBox",
        "Content": "Remove Cortana (deprecated)",
        "Description": "Cortana, as a standalone app and in certain Microsoft products, has been retired in late 2023. While Cortana is still present in Windows 10 and older versions of Windows 11",
        "message": "Removing Cortana...",
        "InvokeScript": [
            "Get-AppxPackage -allusers Microsoft.549981C3F5F10 | Remove-AppxPackage"
        ],
        "UndoScript": [
            "Get-AppXPackage *Microsoft.549981C3F5F10* -AllUsers | Foreach {Add-AppxPackage -DisableDevelopmentMode -Register \"$($_.InstallLocation)\\AppXManifest.xml\"}"
        ]
    },
    "DblBackgroundApps": {
        "Type": "CheckBox",
        "Content": "Disable Background Apps",
        "Description": "Disables all Microsoft Store apps from running in the background, which has to be done individually since Win11",
        "message": "Disabling Background Apps...",
        "registry": [
            {
                "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\BackgroundAccessApplications",
                "Name": "GlobalUserDisabled",
                "Value": "1",
                "OriginalValue": "0",
                "Type": "DWord"
            }
        ]
    },
    "DblRemoveHome": {
        "Type": "CheckBox",
        "Content": "Remove Home from Explorer",
        "Description": "Removes the Home from Explorer and sets This PC as default",
        "message": "Home from Explorer...",
        "InvokeScript": [
            "
            REG DELETE \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Desktop\\NameSpace\\{f874310e-b6b7-47dc-bc84-b9e6b38f5903}\" /f
            REG ADD \"HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\" /f /v \"LaunchTo\" /t REG_DWORD /d \"1\"
            "
        ],
        "UndoScript": [
            "
            REG ADD \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Desktop\\NameSpace\\{f874310e-b6b7-47dc-bc84-b9e6b38f5903}\" /f /ve /t REG_SZ /d \"CLSID_MSGraphHomeFolder\"
            REG DELETE \"HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\" /f /v \"LaunchTo\"
            "
        ]
    },
    "DblRemoveGallery": {
        "Type": "CheckBox",
        "Content": "Remove Gallery from Explorer",
        "Description": "Removes the Gallery  from Explorer and sets This PC as default",
        "message": "Gallery from Explorer...",
        "InvokeScript": [
            "
            REG DELETE \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Desktop\\NameSpace\\{e88865ea-0e1c-4e20-9aa6-edcd0212c87c}\" /f
            REG ADD \"HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\" /f /v \"LaunchTo\" /t REG_DWORD /d \"1\"
            "
        ],
        "UndoScript": [
            "
            REG ADD \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Desktop\\NameSpace\\{e88865ea-0e1c-4e20-9aa6-edcd0212c87c}\" /f /ve /t REG_SZ /d \"{e88865ea-0e1c-4e20-9aa6-edcd0212c87c}\"
            REG DELETE \"HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\" /f /v \"LaunchTo\"
            "
        ]
    },
    "DblFullscreenOptimizations": {
        "Type": "CheckBox",
        "Content": "Disable Fullscreen Optimizations",
        "Description": "Disables FSO in all applications. NOTE: This will disable Color Management in Exclusive Fullscreen",
        "message": "Disabling Fullscreen Optimizations...",
        "registry": [
            {
                "Path": "HKCU:\\System\\GameConfigStore",
                "Name": "GameDVR_DXGIHonorFSEWindowsCompatible",
                "Value": "1",
                "OriginalValue": "0",
                "Type": "DWord"
            }
        ]
    },
    "DblOneDrive": {
        "Type": "CheckBox",
        "Content": "Remove OneDrive âš ï¸",
        "Description": "Moves OneDrive files to Default Home Folders and Uninstalls it. Recomended on fresh installs!",
        "message": "Removing OneDrive...",
        "InvokeScript": [
            "
                $OneDrivePath = $($env:OneDrive)
                Write-Host \"Removing OneDrive\"
                $regPath = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\OneDriveSetup.exe\"
                if (Test-Path $regPath) {
                    $OneDriveUninstallString = Get-ItemPropertyValue \"$regPath\" -Name \"UninstallString\"
                    $OneDriveExe, $OneDriveArgs = $OneDriveUninstallString.Split(\" \")
                    Start-Process -FilePath $OneDriveExe -ArgumentList \"$OneDriveArgs /silent\" -NoNewWindow -Wait
                } else {
                    Write-Host \"Onedrive dosn't seem to be installed anymore\" -ForegroundColor Red
                    return
                }
                # Check if OneDrive got Uninstalled
                if (-not (Test-Path $regPath)) {
                Write-Host \"Copy downloaded Files from the OneDrive Folder to Root UserProfile\"
                Start-Process -FilePath powershell -ArgumentList \"robocopy '$($OneDrivePath)' '$($env:USERPROFILE.TrimEnd())\\' /mov /e /xj\" -NoNewWindow -Wait

                Write-Host \"Removing OneDrive leftovers\"
                Remove-Item -Recurse -Force -ErrorAction SilentlyContinue \"$env:localappdata\\Microsoft\\OneDrive\"
                Remove-Item -Recurse -Force -ErrorAction SilentlyContinue \"$env:localappdata\\OneDrive\"
                Remove-Item -Recurse -Force -ErrorAction SilentlyContinue \"$env:programdata\\Microsoft OneDrive\"
                Remove-Item -Recurse -Force -ErrorAction SilentlyContinue \"$env:systemdrive\\OneDriveTemp\"
                reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\OneDrive\" -f
                # check if directory is empty before removing:
                If ((Get-ChildItem \"$OneDrivePath\" -Recurse | Measure-Object).Count -eq 0) {
                    Remove-Item -Recurse -Force -ErrorAction SilentlyContinue \"$OneDrivePath\"
                }

                Write-Host \"Remove Onedrive from explorer sidebar\"
                Set-ItemProperty -Path \"HKCR:\\CLSID\\{018D5C66-4533-4307-9B53-224DE2ED1FE6}\" -Name \"System.IsPinnedToNameSpaceTree\" -Value 0
                Set-ItemProperty -Path \"HKCR:\\Wow6432Node\\CLSID\\{018D5C66-4533-4307-9B53-224DE2ED1FE6}\" -Name \"System.IsPinnedToNameSpaceTree\" -Value 0

                Write-Host \"Removing run hook for new users\"
                reg load \"hku\\Default\" \"C:\\Users\\Default\\NTUSER.DAT\"
                reg delete \"HKEY_USERS\\Default\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\" /v \"OneDriveSetup\" /f
                reg unload \"hku\\Default\"

                Write-Host \"Removing startmenu entry\"
                Remove-Item -Force -ErrorAction SilentlyContinue \"$env:userprofile\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\OneDrive.lnk\"

                Write-Host \"Removing scheduled task\"
                Get-ScheduledTask -TaskPath '\\' -TaskName 'OneDrive*' -ea SilentlyContinue | Unregister-ScheduledTask -Confirm:$false

                # Add Shell folders restoring default locations
                Write-Host \"Shell Fixing\"
                Set-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" -Name \"AppData\" -Value \"$env:userprofile\\AppData\\Roaming\" -Type ExpandString
                Set-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" -Name \"Cache\" -Value \"$env:userprofile\\AppData\\Local\\Microsoft\\Windows\\INetCache\" -Type ExpandString
                Set-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" -Name \"Cookies\" -Value \"$env:userprofile\\AppData\\Local\\Microsoft\\Windows\\INetCookies\" -Type ExpandString
                Set-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" -Name \"Favorites\" -Value \"$env:userprofile\\Favorites\" -Type ExpandString
                Set-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" -Name \"History\" -Value \"$env:userprofile\\AppData\\Local\\Microsoft\\Windows\\History\" -Type ExpandString
                Set-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" -Name \"Local AppData\" -Value \"$env:userprofile\\AppData\\Local\" -Type ExpandString
                Set-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" -Name \"My Music\" -Value \"$env:userprofile\\Music\" -Type ExpandString
                Set-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" -Name \"My Video\" -Value \"$env:userprofile\\Videos\" -Type ExpandString
                Set-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" -Name \"NetHood\" -Value \"$env:userprofile\\AppData\\Roaming\\Microsoft\\Windows\\Network Shortcuts\" -Type ExpandString
                Set-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" -Name \"PrintHood\" -Value \"$env:userprofile\\AppData\\Roaming\\Microsoft\\Windows\\Printer Shortcuts\" -Type ExpandString
                Set-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" -Name \"Programs\" -Value \"$env:userprofile\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\" -Type ExpandString
                Set-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" -Name \"Recent\" -Value \"$env:userprofile\\AppData\\Roaming\\Microsoft\\Windows\\Recent\" -Type ExpandString
                Set-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" -Name \"SendTo\" -Value \"$env:userprofile\\AppData\\Roaming\\Microsoft\\Windows\\SendTo\" -Type ExpandString
                Set-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" -Name \"Start Menu\" -Value \"$env:userprofile\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\" -Type ExpandString
                Set-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" -Name \"Startup\" -Value \"$env:userprofile\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\" -Type ExpandString
                Set-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" -Name \"Templates\" -Value \"$env:userprofile\\AppData\\Roaming\\Microsoft\\Windows\\Templates\" -Type ExpandString
                Set-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" -Name \"{374DE290-123F-4565-9164-39C4925E467B}\" -Value \"$env:userprofile\\Downloads\" -Type ExpandString
                Set-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" -Name \"Desktop\" -Value \"$env:userprofile\\Desktop\" -Type ExpandString
                Set-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" -Name \"My Pictures\" -Value \"$env:userprofile\\Pictures\" -Type ExpandString
                Set-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" -Name \"Personal\" -Value \"$env:userprofile\\Documents\" -Type ExpandString
                Set-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" -Name \"{F42EE2D3-909F-4907-8871-4C22FC0BF756}\" -Value \"$env:userprofile\\Documents\" -Type ExpandString
                Set-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" -Name \"{0DDD015D-B06C-45D5-8C4C-F59713854639}\" -Value \"$env:userprofile\\Pictures\" -Type ExpandString
                Write-Host \"Restarting explorer\"
                taskkill.exe /F /IM \"explorer.exe\"
                Start-Process \"explorer.exe\"

                Write-Host \"Waiting for explorer to complete loading\"
                Write-Host \"Please Note - The OneDrive folder at $OneDrivePath may still have items in it. You must manually delete it, but all the files should already be copied to the base user folder.\"
                Write-Host \"If there are Files missing afterwards, please Login to Onedrive.com and Download them manually\" -ForegroundColor Yellow
                Start-Sleep 5
                } else {
                Write-Host \"Something went Wrong during the Unistallation of OneDrive\" -ForegroundColor Red
                }
            "
        ],
        "UndoScript": [
            "
                Write-Host \"Install OneDrive\"
                Start-Process -FilePath winget -ArgumentList \"install -e --accept-source-agreements --accept-package-agreements --silent Microsoft.OneDrive \" -NoNewWindow -Wait
            "
        ]
    },

    "DblPower": {
        "Type": "CheckBox",
        "Content": "Disable Power Throttling",
        "Description": "This is mainly for Laptops, It disables Power Throttling and will use more battery.",
        "message": "Disabling Power Throttling...",
        "registry": [
            {
                "Path": "HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Power\\PowerThrottling",
                "Name": "PowerThrottlingOff",
                "Type": "DWord",
                "Value": 1,
                "OriginalValue": 0
            },
            {
                "Path": "HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Power",
                "Name": "HiberbootEnabled",
                "Type": "DWord",
                "Value": 0,
                "OriginalValue": 1
            }
        ]
    },
    "DblDisplay": {
        "Type": "CheckBox",
        "Content": "Set Display for Performance",
        "Description": "Adjusts visual effects for best performance by disabling animations and transparency effects.",
        "message": "Adjusting visual effects for best performance...",
        "registry": [
            {
                "Path": "HKCU:\\Control Panel\\Desktop",
                "OriginalValue": "1",
                "Name": "DragFullWindows",
                "Value": "1",
                "Type": "String"
            },
            {
                "Path": "HKCU:\\Control Panel\\Desktop",
                "OriginalValue": "1",
                "Name": "MenuShowDelay",
                "Value": "1",
                "Type": "String"
            },
            {
                "Path": "HKCU:\\Control Panel\\Desktop\\WindowMetrics",
                "OriginalValue": "1",
                "Name": "MinAnimate",
                "Value": "0",
                "Type": "String"
            },
            {
                "Path": "HKCU:\\Control Panel\\Keyboard",
                "OriginalValue": "1",
                "Name": "KeyboardDelay",
                "Value": "1",
                "Type": "DWord"
            },
            {
                "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced",
                "OriginalValue": "1",
                "Name": "ListviewAlphaSelect",
                "Value": "0",
                "Type": "DWord"
            },
            {
                "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced",
                "OriginalValue": "1",
                "Name": "ListviewShadow",
                "Value": "0",
                "Type": "DWord"
            },
            {
                "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced",
                "OriginalValue": "1",
                "Name": "TaskbarAnimations",
                "Value": "0",
                "Type": "DWord"
            },
            {
                "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\VisualEffects",
                "OriginalValue": "1",
                "Name": "VisualFXSetting",
                "Value": "3",
                "Type": "DWord"
            },
            {
                "Path": "HKCU:\\Software\\Microsoft\\Windows\\DWM",
                "OriginalValue": "1",
                "Name": "EnableAeroPeek",
                "Value": "1",
                "Type": "DWord"
            },
            {
                "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced",
                "OriginalValue": "1",
                "Name": "TaskbarMn",
                "Value": "0",
                "Type": "DWord"
            },
            {
                "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced",
                "OriginalValue": "1",
                "Name": "TaskbarDa",
                "Value": "0",
                "Type": "DWord"
            },
            {
                "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced",
                "OriginalValue": "1",
                "Name": "ShowTaskViewButton",
                "Value": "0",
                "Type": "DWord"
            }
        ],
        "InvokeScript": [
            "Set-ItemProperty -Path \"HKCU:\\Control Panel\\Desktop\" -Name \"UserPreferencesMask\" -Type Binary -Value ([byte[]](144,18,3,128,18,0,0,0))"
        ],
        "UndoScript": [
            "Remove-ItemProperty -Path \"HKCU:\\Control Panel\\Desktop\" -Name \"UserPreferencesMask\""
        ]
    },
    "DblDisableUAC": {
        "Type": "CheckBox",
        "Content": "Disable UAC",
        "Description": "Disables User Account Control (UAC) prompts",
        "message": "Disabling UAC...",
        "registry": [
            {
                "Path": "HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System",
                "Name": "EnableLUA",
                "Value": 0,
                "OriginalValue": 1,
                "Type": "DWord"
            },
            {
                "Path": "HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System",
                "Name": "ConsentPromptBehaviorAdmin",
                "Value": 0,
                "OriginalValue": 1,
                "Type": "DWord"
            }
        ]
    },
    "DblCoreIsolation" : {
        "Type": "CheckBox",
        "Content": "Disable Core Isolation",
        "Description": "Core Isolation is a security feature that uses virtualization to protect critical processes from malware. Disabling it may reduce security but can improve performance on some systems.",
        "message": "Disabling Core Isolation...",
        "registry": [
            {
                "Path": "HKLM:\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\\Scenarios\\HypervisorEnforcedCodeIntegrity",
                "Name": "Enabled",
                "Value": "0",
                "OriginalValue": "1",
                "Type": "DWord"
            }
        ]
    },
    "DblDisableNotifications": {
        "Type": "CheckBox",
        "Content": "Disable Notifications",
        "Description": "Disables all Notifications INCLUDING Calendar",
        "message": "Disabling Notifications Tray/Calendar...",
        "registry": [
            {
                "Path": "HKCU:\\Software\\Policies\\Microsoft\\Windows\\Explorer",
                "Name": "DisableNotificationCenter",
                "Type": "DWord",
                "Value": "1",
                "OriginalValue": "0"
            },
            {
                "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\PushNotifications",
                "Name": "ToastEnabled",
                "Type": "DWord",
                "Value": "0",
                "OriginalValue": "1"
            }
        ]
    },
    "DblClassicAltTab": {
        "Type": "CheckBox",
        "Content": "Classic Alt+Tab",
        "Description": "Reverts the Alt-Tab behavior to the classic style, showing only open windows without thumbnails.",
        "message": "Setting Classic Alt+Tab...",
        "registry": [
            {
                "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced",
                "Name": "MultiTaskingAltTabFilter",
                "Value": "3",
                "OriginalValue": "0",
                "Type": "DWord"
            }
        ]
    },
    "DblGameMode": {
        "Type": "CheckBox",
        "Content": "Enable Game Mode",
        "Description": "Enables Game Mode, which optimizes system resources for gaming.",
        "message": "Enabling Game Mode...",
        "registry": [
            {
                "Path": "HKCU:\\Software\\Microsoft\\GameBar",
                "Name": "AllowAutoGameMode",
                "Type": "DWord",
                "Value": 3,
                "OriginalValue": 0
            }
        ]
    },
    "DblGameBar": {
        "Type": "CheckBox",
        "Content": "Disable Game Bar",
        "Description": "Disables the Game Bar, which is used for capturing gameplay and broadcasting.",
        "message": "Disabling Game Bar...",
        "registry": [
            {
                "Path": "HKCU:\\Software\\Microsoft\\GameBar",
                "Name": "UseNexusForGameBarEnabled",
                "Value": 0,
                "OriginalValue": 1,
                "Type": "DWord"
            }
        ]
    },
    "DblWindowsSound": {
        "Type": "CheckBox",
        "Content": "Disable Windows Sounds",
        "Description": "Disables all system sounds in Windows.",
        "message": "Windows Sounds...",
        "registry": [
            {
                "Path": "HKCU:\\AppEvents\\Schemes",
                "Name": "(Default)",
                "Value": ".None",
                "OriginalValue": "",
                "Type": "String"
            }
        ],
        "InvokeScript": [
            "
            # Disable all current sound events
            $schemePath = 'HKCU:\\AppEvents\\Schemes\\Apps\\.Default'
            Get-ChildItem -Path $schemePath -Recurse -ErrorAction SilentlyContinue | Where-Object { $_.PSChildName -eq '.Current' } | ForEach-Object { Set-ItemProperty -Path $_.PSPath -Name '(Default)' -Value '' }

            # Broadcast settings change so it applies immediately
            Add-Type \"using System; using System.Runtime.InteropServices; public class RefreshSystem { [DllImport(\"user32.dll\", SetLastError=true, CharSet=CharSet.Auto)] public static extern IntPtr SendMessageTimeout(IntPtr hWnd, uint Msg, UIntPtr wParam, string lParam, uint fuFlags, uint uTimeout, out UIntPtr lpdwResult); }\"
            $HWND_BROADCAST = [IntPtr]0xffff
            $WM_SETTINGCHANGE = 0x1A
            $SMTO_ABORTIFHUNG = 0x2
            [UIntPtr]$result = [UIntPtr]::Zero
            [RefreshSystem]::SendMessageTimeout($HWND_BROADCAST, $WM_SETTINGCHANGE, [UIntPtr]::Zero, 'AppEvents', $SMTO_ABORTIFHUNG, 5000, [ref]$result)
            "
        ],
        "UndoScript": [
            "
            # Restore all current sound events to their default association
            $appsPath = 'HKCU:\\AppEvents\\Schemes\\Apps\\.Default'
            Get-ChildItem -Path $appsPath -Recurse -ErrorAction SilentlyContinue | Where-Object { $_.PSChildName -eq '.Current' } | ForEach-Object {
                Set-ItemProperty -Path $_.PSPath -Name '(Default)' -Value '.Default'
            }

            # Broadcast settings change so it applies immediately
            Add-Type \"using System; using System.Runtime.InteropServices; public class RefreshSystem { [DllImport(\"user32.dll\", SetLastError=true, CharSet=CharSet.Auto)] public static extern IntPtr SendMessageTimeout(IntPtr hWnd, uint Msg, UIntPtr wParam, string lParam, uint fuFlags, uint uTimeout, out UIntPtr lpdwResult); }\"
            $HWND_BROADCAST = [IntPtr]0xffff
            $WM_SETTINGCHANGE = 0x1A
            $SMTO_ABORTIFHUNG = 0x2
            [UIntPtr]$result = [UIntPtr]::Zero
            [RefreshSystem]::SendMessageTimeout($HWND_BROADCAST, $WM_SETTINGCHANGE, [UIntPtr]::Zero, 'AppEvents', $SMTO_ABORTIFHUNG, 5000, [ref]$result)
            "
        ]
    },
    "DblPersonalize": {
        "Type": "CheckBox",
        "Content": "Personalization Settings",
        "Description": "Hide search icon, show transparency effects, color adjustments, lock screen adjustments and turn off the display to 20min..",
        "message": "Adjusting Personalization Settings...",
        "registry": [
            {
            "Path": "HKCU:\\Software\\Policies\\Microsoft\\Windows\\Explorer",
            "Name": "HideTaskViewButton",
            "Type": "DWord",
            "Value": 1,
            "OriginalValue": 0
            },
            {
            "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Themes\\Personalize",
            "Name": "EnableTransparency",
            "Type": "DWord",
            "Value": 1,
            "OriginalValue": 0
            },
            {
            "Path": "HKCU:\\Control Panel\\Desktop",
            "Name": "AutoColorization",
            "Type": "DWord",
            "Value": 0,
            "OriginalValue": 1
            },
            {
            "Path": "HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Accent",
            "Name": "AccentColorMenu",
            "Type": "DWord",
            "Value": 4292666368,
            "OriginalValue": 0
            },
            {
            "Path": "HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Accent",
            "Name": "StartColorMenu",
            "Type": "DWord",
            "Value": 4291811328,
            "OriginalValue": 0
            },
            {
            "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Themes\\Personalize",
            "Name": "ColorPrevalence",
            "Type": "DWord",
            "Value": 0,
            "OriginalValue": 1
            },
            {
            "Path": "HKCU:\\Software\\Microsoft\\Windows\\DWM",
            "Name": "ColorPrevalence",
            "Type": "DWord",
            "Value": 0,
            "OriginalValue": 1
            },
            {
            "Path": "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\Personalization",
            "Name": "NoLockScreen",
            "Type": "DWord",
            "Value": 1,
            "OriginalValue": 0
            },
            {
            "Path": "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\Personalization",
            "Name": "NoLockScreenSlideshow",
            "Type": "DWord",
            "Value": 1,
            "OriginalValue": 0
            },
            {
            "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\ContentDeliveryManager",
            "Name": "FeatureManagementEnabled",
            "Type": "DWord",
            "Value": 0,
            "OriginalValue": 1
            },
            {
            "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\ContentDeliveryManager",
            "Name": "OemPreInstalledAppsEnabled",
            "Type": "DWord",
            "Value": 0,
            "OriginalValue": 1
            },
            {
            "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\ContentDeliveryManager",
            "Name": "PreInstalledAppsEnabled",
            "Type": "DWord",
            "Value": 0,
            "OriginalValue": 1
            },
            {
            "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\ContentDeliveryManager",
            "Name": "RotatingLockScreenEnabled",
            "Type": "DWord",
            "Value": 0,
            "OriginalValue": 1
            },
            {
            "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\ContentDeliveryManager",
            "Name": "RotatingLockScreenOverlayEnabled",
            "Type": "DWord",
            "Value": 0,
            "OriginalValue": 1
            },
            {
            "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\ContentDeliveryManager",
            "Name": "SoftLandingEnabled",
            "Type": "DWord",
            "Value": 0,
            "OriginalValue": 1
            },
            {
            "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\ContentDeliveryManager",
            "Name": "SystemPaneSuggestionsEnabled",
            "Type": "DWord",
            "Value": 0,
            "OriginalValue": 1
            },
            {
            "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\ContentDeliveryManager",
            "Name": "SubscribedContentEnabled",
            "Type": "DWord",
            "Value": 0,
            "OriginalValue": 1
            },
            {
            "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\ContentDeliveryManager",
            "Name": "ContentDeliveryAllowed",
            "Type": "DWord",
            "Value": 1,
            "OriginalValue": 0
            },
            {
            "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\ContentDeliveryManager",
            "Name": "SilentInstalledAppsEnabled",
            "Type": "DWord",
            "Value": 0,
            "OriginalValue": 1
            },
            {
            "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\ContentDeliveryManager",
            "Name": "PreInstalledAppsEverEnabled",
            "Type": "DWord",
            "Value": 0,
            "OriginalValue": 1
            },
            {
            "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\ContentDeliveryManager",
            "Name": "RemediationRequired",
            "Type": "DWord",
            "Value": 0,
            "OriginalValue": 1
            },
            {
            "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\ContentDeliveryManager",
            "Name": "SubscribedContent-338387Enabled",
            "Type": "DWord",
            "Value": 0,
            "OriginalValue": 1
            },
            {
            "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\ContentDeliveryManager",
            "Name": "SubscribedContent-338388Enabled",
            "Type": "DWord",
            "Value": 0,
            "OriginalValue": 1
            },
            {
            "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\ContentDeliveryManager",
            "Name": "SubscribedContent-338389Enabled",
            "Type": "DWord",
            "Value": 0,
            "OriginalValue": 1
            },
            {
            "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\ContentDeliveryManager",
            "Name": "SubscribedContent-310093Enabled",
            "Type": "DWord",
            "Value": 0,
            "OriginalValue": 1
            },
            {
            "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\ContentDeliveryManager",
            "Name": "SubscribedContent-338393Enabled",
            "Type": "DWord",
            "Value": 0,
            "OriginalValue": 1
            },
            {
            "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\ContentDeliveryManager",
            "Name": "SubscribedContent-314563Enabled",
            "Type": "DWord",
            "Value": 0,
            "OriginalValue": 1
            },
            {
            "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\ContentDeliveryManager",
            "Name": "SubscribedContent-353698Enabled",
            "Type": "DWord",
            "Value": 0,
            "OriginalValue": 1
            },
            {
            "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\ContentDeliveryManager",
            "Name": "SubscribedContent-353694Enabled",
            "Type": "DWord",
            "Value": 0,
            "OriginalValue": 1
            },
            {
            "Path": "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System",
            "Name": "DisableLogonBackgroundImage",
            "Type": "DWord",
            "Value": 0,
            "OriginalValue": 1
            }
        ],
        "InvokeScript": [
            "Set-RegistryValue -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Accent\" -Name \"AccentPalette\" -Type Binary -Value ([byte[]](0x99,0xEB,0xFF,0x00,0x41,0xF8,0x00,0x00,0x78,0xD4,0x00,0x00,0x67,0xC0,0x00,0x00,0x3E,0x92,0x00,0x00,0x1A,0x68,0x00,0xF7,0x63,0x0C,0x00))",
            "powercfg -x -disk-timeout-ac 0",
            "powercfg -x -disk-timeout-dc 0",
            "powercfg -x -monitor-timeout-ac 20",
            "powercfg -x -monitor-timeout-dc 20"
        ]
    },
    "DblModernCursorDark": {
        "Type": "CheckBox",
        "Content": "Modern Cursor Dark",
        "Description": "Amazing modern dark cursor concept by jepriCreations.",
        "message": "dark cursor...",
        "InvokeScript": [
            "
                $downloadUrl = \"https://github.com/vukilis/Windows11-Optimizer-Debloater/raw/dev/cursor.zip\" #github link
                $outputPath = \"$env:TEMP\\win11app\"

                # Check if the file already exists
                if (-not (Test-Path -Path \"$outputPath\\cursor.zip\")) {
                # File does not exist, download it
                New-Item -ItemType Directory -Force -Path $outputPath
                Invoke-WebRequest -Uri $downloadUrl -OutFile \"$outputPath\\cursor.zip\"
                Write-Host \"File downloaded to: $outputPath\" -ForegroundColor Green
                } else {
                Write-Host \"File already exists at: $outputPath\" -ForegroundColor Magenta
                }

                # Unzip the downloaded file
                Write-Host \"Unziping content...\" -ForegroundColor Green
                Expand-Archive -Path \"$outputPath\\cursor.zip\" -DestinationPath $outputPath -Force

                Write-Host \"Installing cursor...\" -ForegroundColor Green   
                # Step 2: Run install.inf
                $infPath = Join-Path $outputPath \"dark\\Install.inf\"
                # Check if the install.inf file exists
                if (Test-Path $infPath) {
                # Run the installation file
                Start-Process \"C:\\Windows\\System32\\rundll32.exe\" -ArgumentList \"advpack.dll,LaunchINFSection $infPath,DefaultInstall\"
                } else {
                Write-Host \"Install.inf not found in the specified location.\"
                }

                # Set the cursor scheme values
                Write-Host \"Seting cursor...\" -ForegroundColor Green
                $cursorScheme = \"C:\\Windows\\Cursors\\Windows_11_dark_v2\\pointer.cur,C:\\Windows\\Cursors\\Windows_11_dark_v2\\help.cur,C:\\Windows\\Cursors\\Windows_11_dark_v2\\working.ani,C:\\Windows\\Cursors\\Windows_11_dark_v2\\busy.ani,C:\\Windows\\Cursors\\Windows_11_dark_v2\\precision.cur,C:\\Windows\\Cursors\\Windows_11_dark_v2\\beam.cur,C:\\Windows\\Cursors\\Windows_11_dark_v2\\handwriting.cur,C:\\Windows\\Cursors\\Windows_11_dark_v2\\unavailable.cur,C:\\Windows\\Cursors\\Windows_11_dark_v2\\vert.cur,C:\\Windows\\Cursors\\Windows_11_dark_v2\\horz.cur,C:\\Windows\\Cursors\\Windows_11_dark_v2\\dgn1.cur,C:\\Windows\\Cursors\\Windows_11_dark_v2\\dgn2.cur,C:\\Windows\\Cursors\\Windows_11_dark_v2\\move.cur,C:\\Windows\\Cursors\\Windows_11_dark_v2\\alternate.cur,C:\\Windows\\Cursors\\Windows_11_dark_v2\\link.cur,C:\\Windows\\Cursors\\Windows_11_dark_v2\\person.cur,C:\\Windows\\Cursors\\Windows_11_dark_v2\\pin.cur\"


                # Define the Registry path for the cursor scheme
                $registryPath = \"HKCU:\\Control Panel\\Cursors\"

                # Set the new cursor scheme for each individual cursor type
                $cursorTypes = @(\"AppStarting\", \"Arrow\", \"Crosshair\", \"Hand\", \"Help\", \"IBeam\", \"No\", \"NWPen\", \"SizeAll\", \"SizeNESW\", \"SizeNS\", \"SizeNWSE\", \"SizeWE\", \"UpArrow\", \"Wait\")
                
                Write-Host \"Updating cursor...\" -ForegroundColor Green
                foreach ($cursorType in $cursorTypes) {
                Set-ItemProperty -Path $registryPath -Name $cursorType -Value $cursorScheme
                }

                Start-Sleep 1

                Add-Type -TypeDefinition 'using System; using System.Runtime.InteropServices; public class SystemParamInfo { [DllImport(\"user32.dll\", CharSet = CharSet.Unicode)] public static extern int SystemParametersInfo(int uAction, int uParam, string lpvParam, int fuWinIni); }' -Language CSharp

                [SystemParamInfo]::SystemParametersInfo(0x0057, 0, $null, 0)
            "
        ],
        "UndoScript": [
            "
                # Remove the cursor scheme
                $registryPath = \"HKCU:\\Control Panel\\Cursors\"
                $cursorTypes = @(\"AppStarting\", \"Arrow\", \"Crosshair\", \"Hand\", \"Help\", \"IBeam\", \"No\", \"NWPen\", \"SizeAll\", \"SizeNESW\", \"SizeNS\", \"SizeNWSE\", \"SizeWE\", \"UpArrow\", \"Wait\")
                
                Write-Host \"Removing cursor...\" -ForegroundColor Green
                foreach ($cursorType in $cursorTypes) {
                Remove-ItemProperty -Path $registryPath -Name $cursorType -ErrorAction SilentlyContinue
                #Set-ItemProperty -Path $registryPath -Name $cursorType -Value $defaultCursors[$cursorType]
                }

                Start-Sleep 1

                Add-Type -TypeDefinition 'using System; using System.Runtime.InteropServices; public class SystemParamInfo { [DllImport(\"user32.dll\", CharSet = CharSet.Unicode)] public static extern int SystemParametersInfo(int uAction, int uParam, string lpvParam, int fuWinIni); }' -Language CSharp

                [SystemParamInfo]::SystemParametersInfo(0x0057, 0, $null, 0)

                Write-Host 'Restored Windows default mouse cursors.' -ForegroundColor Green
            "
        ]
    },
    "DblModernCursorLight": {
        "Type": "CheckBox",
        "Content": "Modern Cursor Light",
        "Description": "Amazing modern light cursor concept by jepriCreations.",
        "message": "light cursor...",
        "InvokeScript": [
            "
                $downloadUrl = \"https://github.com/vukilis/Windows11-Optimizer-Debloater/raw/dev/cursor.zip\" #github link
                $outputPath = \"$env:TEMP\\win11app\"

                # Check if the file already exists
                if (-not (Test-Path -Path \"$outputPath\\cursor.zip\")) {
                # File does not exist, download it
                New-Item -ItemType Directory -Force -Path $outputPath
                Invoke-WebRequest -Uri $downloadUrl -OutFile \"$outputPath\\cursor.zip\"
                Write-Host \"File downloaded to: $outputPath\" -ForegroundColor Green
                } else {
                Write-Host \"File already exists at: $outputPath\" -ForegroundColor Magenta
                }

                # Unzip the downloaded file
                Write-Host \"Unziping content...\" -ForegroundColor Green
                Expand-Archive -Path \"$outputPath\\cursor.zip\" -DestinationPath $outputPath -Force

                Write-Host \"Installing cursor...\" -ForegroundColor Green   
                # Step 2: Run install.inf
                $infPath = Join-Path $outputPath \"light\\Install.inf\"
                # Check if the install.inf file exists
                if (Test-Path $infPath) {
                # Run the installation file
                Start-Process \"C:\\Windows\\System32\\rundll32.exe\" -ArgumentList \"advpack.dll,LaunchINFSection $infPath,DefaultInstall\"
                } else {
                Write-Host \"Install.inf not found in the specified location.\"
                }

                # Set the cursor scheme values
                Write-Host \"Seting cursor...\" -ForegroundColor Green
                $cursorScheme = \"C:\\Windows\\Cursors\\Windows_11_light_v2\\pointer.cur,C:\\Windows\\Cursors\\Windows_11_light_v2\\help.cur,C:\\Windows\\Cursors\\Windows_11_light_v2\\working.ani,C:\\Windows\\Cursors\\Windows_11_light_v2\\busy.ani,C:\\Windows\\Cursors\\Windows_11_light_v2\\precision.cur,C:\\Windows\\Cursors\\Windows_11_light_v2\\beam.cur,C:\\Windows\\Cursors\\Windows_11_light_v2\\handwriting.cur,C:\\Windows\\Cursors\\Windows_11_light_v2\\unavailable.cur,C:\\Windows\\Cursors\\Windows_11_light_v2\\vert.cur,C:\\Windows\\Cursors\\Windows_11_light_v2\\horz.cur,C:\\Windows\\Cursors\\Windows_11_light_v2\\dgn1.cur,C:\\Windows\\Cursors\\Windows_11_light_v2\\dgn2.cur,C:\\Windows\\Cursors\\Windows_11_light_v2\\move.cur,C:\\Windows\\Cursors\\Windows_11_light_v2\\alternate.cur,C:\\Windows\\Cursors\\Windows_11_light_v2\\link.cur,C:\\Windows\\Cursors\\Windows_11_light_v2\\person.cur,C:\\Windows\\Cursors\\Windows_11_light_v2\\pin.cur\"


                # Define the Registry path for the cursor scheme
                $registryPath = \"HKCU:\\Control Panel\\Cursors\"

                # Set the new cursor scheme for each individual cursor type
                $cursorTypes = @(\"AppStarting\", \"Arrow\", \"Crosshair\", \"Hand\", \"Help\", \"IBeam\", \"No\", \"NWPen\", \"SizeAll\", \"SizeNESW\", \"SizeNS\", \"SizeNWSE\", \"SizeWE\", \"UpArrow\", \"Wait\")
                
                Write-Host \"Updating cursor...\" -ForegroundColor Green
                foreach ($cursorType in $cursorTypes) {
                Set-ItemProperty -Path $registryPath -Name $cursorType -Value $cursorScheme
                }

                Start-Sleep 1

                Add-Type -TypeDefinition 'using System; using System.Runtime.InteropServices; public class SystemParamInfo { [DllImport(\"user32.dll\", CharSet = CharSet.Unicode)] public static extern int SystemParametersInfo(int uAction, int uParam, string lpvParam, int fuWinIni); }' -Language CSharp

                [SystemParamInfo]::SystemParametersInfo(0x0057, 0, $null, 0)
            "
        ],
        "UndoScript": [
            "
                # Remove the cursor scheme
                $registryPath = \"HKCU:\\Control Panel\\Cursors\"
                $cursorTypes = @(\"AppStarting\", \"Arrow\", \"Crosshair\", \"Hand\", \"Help\", \"IBeam\", \"No\", \"NWPen\", \"SizeAll\", \"SizeNESW\", \"SizeNS\", \"SizeNWSE\", \"SizeWE\", \"UpArrow\", \"Wait\")
                
                Write-Host \"Removing cursor...\" -ForegroundColor Green
                foreach ($cursorType in $cursorTypes) {
                Remove-ItemProperty -Path $registryPath -Name $cursorType -ErrorAction SilentlyContinue
                #Set-ItemProperty -Path $registryPath -Name $cursorType -Value $defaultCursors[$cursorType]
                }

                Start-Sleep 1

                Add-Type -TypeDefinition 'using System; using System.Runtime.InteropServices; public class SystemParamInfo { [DllImport(\"user32.dll\", CharSet = CharSet.Unicode)] public static extern int SystemParametersInfo(int uAction, int uParam, string lpvParam, int fuWinIni); }' -Language CSharp

                [SystemParamInfo]::SystemParametersInfo(0x0057, 0, $null, 0)

                Write-Host 'Restored Windows default mouse cursors.' -ForegroundColor Green
            "
        ]
    },

    "ToggleUltimatePerformance": {
        "Type": "CheckBox",
        "Content": "Ultimate Performance Plan",
        "Description": "Add and Activate Ultimate Performance Profile",
        "message": "Toggling Ultimate Performance power plan...",
        "DefaultState": "false",
        "InvokeScript": [
            "Invoke-UltimatePerformance -State Enable"
        ],
        "UndoScript": [
            "Invoke-UltimatePerformance -State Disable"
        ]
    },

    "DblRestartPC": {
        "Type": "CheckBox",
        "Content": "Restart Computer",
        "Description": "Restarting the computer is recommended after applying tweaks to ensure they take effect.",
        "message": "Restarting the computer...",
        "InvokeScript": [
            "Restart-Computer"
        ]
    },

    "ToggleBingSearchMenu": {
        "Type": "Toggle",
        "Content": "Bing Search in Start Menu",
        "Description": "Disables Bing search results in the Start Menu.",
        "message": "Bing Search in Start Menu...",
        "registry": [
            {
                "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Search",
                "Name": "BingSearchEnabled",
                "Value": 1,
                "OriginalValue": 0,
                "Type": "Dword",
                "DefaultState": "true"
            },
            {
                "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Search",
                "Name": "CortanaConsent",
                "Value": 1,
                "OriginalValue": 0,
                "Type": "Dword",
                "DefaultState": "true"
            },
            {
                "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\SearchSettings",
                "Name": "IsDynamicSearchBoxEnabled",
                "Value": 1,
                "OriginalValue": 0,
                "Type": "Dword",
                "DefaultState": "true"
            },
            {
                "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\SearchSettings",
                "Name": "IsAADCloudSearchEnabled",
                "Value": 1,
                "OriginalValue": 0,
                "Type": "Dword",
                "DefaultState": "true"
            },
            {
                "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\SearchSettings",
                "Name": "IsMSACloudSearchEnabled",
                "Value": 1,
                "OriginalValue": 0,
                "Type": "Dword",
                "DefaultState": "true"
            }
        ]
    },
    "ToggleDarkMode": {
        "Type": "Toggle",
        "Content": "Dark Theme For Windows",
        "Description": "Enables dark mode for Windows, changing the system theme to dark.",
        "message": "Dark Theme for Windows...",
        "registry": [
            {
                "Path": "HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Themes\\Personalize",
                "Name": "AppsUseLightTheme",
                "Value": "0",
                "OriginalValue": "1",
                "Type": "DWord",
                "DefaultState": "true"
            },
            {
                "Path": "HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Themes\\Personalize",
                "Name": "SystemUsesLightTheme",
                "Value": "0",
                "OriginalValue": "1",
                "Type": "DWord",
                "DefaultState": "true"
            }
        ],
        "InvokeScript": [
            "
            Write-Host \"Restarting Explorer to apply Tweak...\" -ForegroundColor Green
            Invoke-ExplorerUpdate
            "
        ],
        "UndoScript": [
            "
            Write-Host \"Restarting Explorer to apply Tweak...\" -ForegroundColor Green
            Invoke-ExplorerUpdate
            "
        ]
    },
    "ToggleNumLock": {
        "Type": "Toggle",
        "Content": "NumLock on Startup",
        "Description": "Enables Num Lock to be on by default when starting Windows.",
        "message": "Num Lock on Startup...",
        "registry": [
            {
                "Path": "HKCU:\\Control Panel\\Keyboard",
                "Name": "InitialKeyboardIndicators",
                "Value": 2,
                "OriginalValue": 0,
                "Type": "Dword",
                "DefaultState": "true"
            }
        ]
    },
    "ToggleExt": {
        "Type": "Toggle",
        "Content": "Show File Extensions",
        "Description": "Enables file extensions to be visible in File Explorer.",
        "message": "File Extensions visibility...",
        "registry": [
            {
                "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced",
                "Name": "HideFileExt",
                "Value": 0,
                "OriginalValue": 1,
                "Type": "Dword",
                "DefaultState": "true"
            }
        ]
    },
    "ToggleMouseAcceleration": {
        "Type": "Toggle",
        "Content": "Mouse Acceleration",
        "Description": "Disables mouse acceleration for a more consistent pointer movement.",
        "message": "Mouse Acceleration...",
        "registry": [
            {
                "Path": "HKCU:\\Control Panel\\Mouse",
                "Name": "MouseSpeed",
                "Value": 1,
                "OriginalValue": 0,
                "Type": "Dword",
                "DefaultState": "true"
            },
            {
                "Path": "HKCU:\\Control Panel\\Mouse",
                "Name": "MouseThreshold1",
                "Value": 6,
                "OriginalValue": 0,
                "Type": "DWord",
                "DefaultState": "true"
            },
            {
                "Path": "HKCU:\\Control Panel\\Mouse",
                "Name": "MouseThreshold2",
                "Value": "10",
                "OriginalValue": 0,
                "Type": "DWord",
                "DefaultState": "true"
            }
        ]
    },
    "ToggleHiddenFiles": {
        "Type": "Toggle",
        "Content": "Show Hidden Files",
        "Description": "Enables the visibility of hidden files and folders in File Explorer.",
        "message": "visibility of hidden files...",
        "registry": [
            {
                "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced",
                "Name": "Hidden",
                "Value": 1,
                "OriginalValue": 2,
                "Type": "Dword",
                "DefaultState": "true"
            }
        ]
    },
    "ToggleSearch": {
        "Type": "Toggle",
        "Content": "Search Button in Taskbar",
        "Description": "If Enebled Search Button will be on the taskbar.",
        "message": "Search Box in Taskbar...",
        "registry": [
            {
                "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Search",
                "Name": "SearchBoxTaskbarMode",
                "Value": 1,
                "OriginalValue": 0,
                "Type": "Dword",
                "DefaultState": "true"
            }
        ]
    },
    "ToggleSnapWindow": {
        "Type": "Toggle",
        "Content": "Snap Assist Window",
        "Description": "If enabled you can align windows by dragging them. | Relogin Required",
        "message": "Snap Assist Window...",
        "registry": [
            {
                "Path": "HKCU:\\Control Panel\\Desktop",
                "Name": "WindowArrangementActive",
                "Value": "1",
                "OriginalValue": "0",
                "DefaultState": "true",
                "Type": "String"
            }
        ],
        "InvokeScript": [
            "
            Write-Host \"Restarting Explorer to apply Tweak...\" -ForegroundColor Green
            Invoke-ExplorerUpdate
            "
        ],
        "UndoScript": [
            "
            Write-Host \"Restarting Explorer to apply Tweak...\" -ForegroundColor Green
            Invoke-ExplorerUpdate
            "
        ]
    },
    "ToggleSnapFlyout": {
        "Type": "Toggle",
        "Content": "Snap Assist Flyout",
        "Description": "If enabled then Snap preview is disabled when maximize button is hovered.",
        "message": "Snap Assist Flyout...",
        "registry": [
            {
                "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced",
                "Name": "EnableSnapAssistFlyout",
                "Value": 1,
                "OriginalValue": 0,
                "Type": "Dword",
                "DefaultState": "true"
            }
        ],
        "InvokeScript": [
            "
            Write-Host \"Restarting Explorer to apply Tweak...\" -ForegroundColor Green
            Invoke-ExplorerUpdate
            "
        ],
        "UndoScript": [
            "
            Write-Host \"Restarting Explorer to apply Tweak...\" -ForegroundColor Green
            Invoke-ExplorerUpdate
            "
        ]
    },
    "ToggleSnapBar": {
        "Type": "Toggle",
        "Content": "Snap Assist Bar",
        "Description": "If enabled then Snap Assist Bar is shown when dragging a window to the top of the screen.",
        "message": "Snap Assist Bar...",
        "registry": [
            {
                "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced",
                "Name": "EnableSnapBar",
                "Value": "1",
                "OriginalValue": "0",
                "DefaultState": "true",
                "Type": "DWord",
                "DefaultState": "true"
            }
        ],
        "InvokeScript": [
            "
            Write-Host \"Restarting Explorer to apply Tweak...\" -ForegroundColor Green
            Invoke-ExplorerUpdate
            "
        ],
        "UndoScript": [
            "
            Write-Host \"Restarting Explorer to apply Tweak...\" -ForegroundColor Green
            Invoke-ExplorerUpdate
            "
        ]
    },
    "ToggleSnapSuggestion": {
        "Type": "Toggle",
        "Content": "Snap Assist Suggestion",
        "Description": "If enabled then you will get suggestions to snap other applications in the left over spaces.",
        "message": "Snap Assist Suggestion...",
        "registry": [
            {
                "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced",
                "Name": "SnapAssist",
                "Value": "1",
                "OriginalValue": "0",
                "DefaultState": "true",
                "Type": "DWord",
                "DefaultState": "true"
            }
        ],
        "InvokeScript": [
            "
            Write-Host \"Restarting Explorer to apply Tweak...\" -ForegroundColor Green
            Invoke-ExplorerUpdate
            "
        ],
        "UndoScript": [
            "
            Write-Host \"Restarting Explorer to apply Tweak...\" -ForegroundColor Green
            Invoke-ExplorerUpdate
            "
        ]
    },
    "ToggleVerboseLogon": {
        "Type": "Toggle",
        "Content": "Verbose Logon Messages",
        "Description": "Enables detailed logon messages during the startup process.",
        "message": "Verbose Logon Messages...",
        "registry": [
            {
                "Path": "HKLM:\\Software\\Policies\\Microsoft\\Windows\\System",
                "Name": "VerboseStatus",
                "Value": 1,
                "OriginalValue": 0,
                "Type": "Dword",
                "DefaultState": "true"
            }
        ]
    },
    "ToggleSticky": {
        "Type": "Toggle",
        "Content": "Sticky Keys",
        "Description": "Disables Sticky Keys feature in Windows.",
        "message": "Sticky Keys...",
        "registry": [
            {
                "Path": "HKCU:\\Control Panel\\Accessibility\\StickyKeys",
                "Name": "Flags",
                "Value": 510,
                "OriginalValue": 58,
                "Type": "Dword",
                "DefaultState": "true"
            }
        ]
    },
    "ToggleEndTask": {
        "Type": "Toggle",
        "Content": "Enable End Task",
        "Description": "Enables option to end task when right clicking a program in the taskbar",
        "message": "End Task option in Taskbar...",
        "registry": [
            {
                "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\\TaskbarDeveloperSettings",
                "Name": "TaskbarEndTask",
                "Value": 1,
                "OriginalValue": 0,
                "Type": "Dword",
                "DefaultState": "true"
            }
        ],
        "InvokeScript": [
            "
            Write-Host \"Restarting Explorer to apply Tweak...\" -ForegroundColor Green
            Invoke-ExplorerUpdate
            "
        ],
        "UndoScript": [
            "
            Write-Host \"Restarting Explorer to apply Tweak...\" -ForegroundColor Green
            Invoke-ExplorerUpdate
            "
        ]
    },
    "ToggleCenterTaskbar": {
        "Type": "Toggle",
        "Content": "Center Taskbar Items",
        "Description": "Centers the taskbar items in the taskbar.",
        "message": "Center Taskbar Items...",
        "registry": [
            {
                "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced",
                "Name": "TaskbarAl",
                "Value": 1,
                "OriginalValue": 0,
                "Type": "Dword",
                "DefaultState": "true"
            }
        ]
    },
    "ToggleDetailedBSoD": {
        "Type": "Toggle",
        "Content": "Enabled Detailed BSoD",
        "Description": "If Enabled then you will see a detailed Blue Screen of Death (BSOD) with more information.",
        "message": "Detailed BSoD messages...",
        "registry": [
        {
            "Path": "HKLM:\\SYSTEM\\CurrentControlSet\\Control\\CrashControl",
            "Name": "DisplayParameters",
            "Value": "1",
            "OriginalValue": "0",
            "DefaultState": "false",
            "Type": "DWord",
                "DefaultState": "true"
        },
        {
            "Path": "HKLM:\\SYSTEM\\CurrentControlSet\\Control\\CrashControl",
            "Name": "DisableEmoticon",
            "Value": "1",
            "OriginalValue": "0",
            "DefaultState": "false",
            "Type": "DWord",
                "DefaultState": "true"
        }
        ]
    },
    "TogglePasswordReveal": {
        "Type": "Toggle",
        "Content": "Password Reveal Button",
        "Description": "Enables the password reveal button on login screens.",
        "message": "Password Reveal Button...",
        "registry": [
            {
                "Path": "HKLM:\\Software\\Policies\\Microsoft\\Windows\\CredUI",
                "Name": "DisablePasswordReveal",
                "Value": 0,
                "OriginalValue": 1,
                "Type": "Dword",
                "DefaultState": "true"
            }
        ]
    },
    "ToggleTaskbarWidgets": {
        "Type": "Toggle",
        "Content": "Widgets Button in Taskbar",
        "Description": "If Enabled then Widgets Button in Taskbar will be shown.",
        "message": "Password Reveal Button...",
        "registry": [
            {
                "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced",
                "Name": "TaskbarDa",
                "Value": "1",
                "OriginalValue": "0",
                "Type": "DWord",
                "DefaultState": "true"
            }
        ]
    },
    "ToggleStartMenuRecommendations": {
        "Type": "Toggle",
        "Content": "Recommendations in Start Menu",
        "Description": "If disabled then you will not see recommendations in the Start Menu. | Enables 'iseducationenvironment' | Relogin Required. | WARNING: This will also disable Windows Spotlight on your Lock Screen as a side effect.",
        "message": "Start Menu Recommendations...",
        "registry": [
            {
                "Path": "HKLM:\\SOFTWARE\\Microsoft\\PolicyManager\\current\\device\\Start",
                "Name": "HideRecommendedSection",
                "Value": "0",
                "OriginalValue": "1",
                "Type": "DWord",
                "DefaultState": "true"
            },
            {
                "Path": "HKLM:\\SOFTWARE\\Microsoft\\PolicyManager\\current\\device\\Education",
                "Name": "IsEducationEnvironment",
                "Value": "0",
                "OriginalValue": "1",
                "Type": "DWord",
                "DefaultState": "true"
            },
            {
                "Path": "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\Explorer",
                "Name": "HideRecommendedSection",
                "Value": "0",
                "OriginalValue": "1",
                "Type": "DWord",
                "DefaultState": "true"
            }
        ]
    },
    "ToggleHideSettingsHome": {
        "Type": "Toggle",
        "Content": "Settings Home Page",
        "Description": "Removes the Home page in the Windows Settings app.",
        "message": "Settings Home Page...",
        "registry": [
            {
                "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer",
                "Name": "SettingsPageVisibility",
                "Value": "show:home",
                "OriginalValue": "hide:home",
                "Type": "String",
                "DefaultState": "true"
            }
        ]
    },
    "ToggleMultiplaneOverlay": {
        "Type": "Toggle",
        "Content": "Disable Multiplane Overlay",
        "Description": "Disable the Multiplane Overlay which can sometimes cause issues with Graphics Cards.",
        "message": "Disable Multiplane Overlay...",
        "registry": [
            {
                "Path": "HKLM:\\SOFTWARE\\Microsoft\\Windows\\Dwm",
                "Name": "OverlayTestMode",
                "Value": "5",
                "OriginalValue": "<RemoveEntry>",
                "Type": "DWord",
                "DefaultState": "true"
            }
        ]
    },
    "ToggleNewOutlook": {
        "Type": "Toggle",
        "Content": "New Outlook",
        "Description": "If disabled it removes the toggle for new Outlook, disables the new Outlook migration and makes sure the Outlook Application actually uses the old Outlook.",
        "message": "New Outlook...",
        "registry": [
            {
                "Path": "HKCU:\\SOFTWARE\\Microsoft\\Office\\16.0\\Outlook\\Preferences",
                "Name": "UseNewOutlook",
                "Value": "1",
                "OriginalValue": "0",
                "Type": "DWord",
                "DefaultState": "true"
            },
            {
                "Path": "HKCU:\\Software\\Microsoft\\Office\\16.0\\Outlook\\Options\\General",
                "Name": "HideNewOutlookToggle",
                "Value": "0",
                "OriginalValue": "1",
                "Type": "DWord",
                "DefaultState": "true"
            },
            {
                "Path": "HKCU:\\Software\\Policies\\Microsoft\\Office\\16.0\\Outlook\\Options\\General",
                "Name": "DoNewOutlookAutoMigration",
                "Value": "0",
                "OriginalValue": "0",
                "Type": "DWord",
                "DefaultState": "true"
            },
            {
                "Path": "HKCU:\\Software\\Policies\\Microsoft\\Office\\16.0\\Outlook\\Preferences",
                "Name": "NewOutlookMigrationUserSetting",
                "Value": "0",
                "OriginalValue": "<RemoveEntry>",
                "Type": "DWord",
                "DefaultState": "true"
            }
        ]
    },
    "ToggleTaskView": {
        "Type": "Toggle",
        "Content": "Task View Button in Taskbar",
        "Description": "If Enabled then Task View Button in Taskbar will be shown.",
        "message": "Task View Button in Taskbar...",
        "registry": [
            {
                "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced",
                "Name": "ShowTaskViewButton",
                "Value": "1",
                "OriginalValue": "0",
                "Type": "DWord",
                "DefaultState": "true"
            }
        ]
    },
    "ToggleS3Sleep": {
        "Type": "Toggle",
        "Content": "S3 Sleep",
        "Description": "Toggles between Modern Standby and S3 sleep.",
        "message": "S3 Sleep...",
        "registry": [
            {
                "Path": "HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Power",
                "Name": "PlatformAoAcOverride",
                "Value": "0",
                "OriginalValue": "<RemoveEntry>",
                "Type": "DWord",
                "DefaultState": "false"
            }
        ]
    },
    "ToggleCrossDeviceResume": {
        "Type": "Toggle",
        "Content": "Cross-Device Resume",
        "Description": "This tweak controls the Resume function in Windows 11 24H2 and later, which allows you to resume an activity from a mobile device and vice-versa.",
        "message": "Cross-Device Resume...",
        "registry": [
            {
                "Path": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\CrossDeviceResume\\Configuration",
                "Name": "IsResumeAllowed",
                "Value": "1",
                "OriginalValue": "0",
                "Type": "DWord",
                "DefaultState": "true"
            }
        ]
    },
    "ToggleClipboardHistory": {
        "Type": "Toggle",
        "Content": "Disable Clipboard History",
        "Description": "The clipboard is used to copy data between applications. Windows can store the history of the last contents of the clipboard. To rule out potential security risks, I recommend disabling this feature.",
        "message": "Disable Clipboard History...",
        "registry": [
            {
                "Path": "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System",
                "Name": "AllowClipboardHistory",
                "Value": "0",
                "OriginalValue": "<RemoveEntry>",
                "Type": "DWord",
                "DefaultState": "false"
            }
        ]
    }
}

'@ | ConvertFrom-Json

# Embedded from preset.json
$preset = @'
{
    "megaPresetButton": [
        "DblTelemetry",
        "DblWifi",
        "DblAH",
        "DblDeleteTempFiles",
        "DblRecycleBin",
        "DblDiskCleanup",
        "DblLocTrack",
        "DblStorage",
        "DblHiber",
        "DblDVR",
        "DblCoreIsolation",
        "DblDisableTeredo",
        "DblAutoAdjustVolume",
        "DblPower",
        "DblDisplay",
        "DblRemoveCortana",
        "DblRemoveWidgets",
        "DblDisableNotifications",
        "DblRightClickMenu",
        "DblDisableUAC",
        "DblClassicAltTab",
        "DblWindowsSound",
        "DblPersonalize",
        "DblModernCursorLight"
    ],
    "fastPresetButton": [
        "DblTelemetry", 
        "DblWifi", 
        "DblAH", 
        "DblDeleteTempFiles", 
        "DblRecycleBin", 
        "DblLocTrack", 
        "DblStorage", 
        "DblHiber", 
        "DblDVR",             
        "DblDisableTeredo", 
        "DblAutoAdjustVolume", 
        "DblPower", 
        "DblDisplay", 
        "DblDisableUAC", 
        "DblClassicAltTab", 
        "DblRightClickMenu", 
        "DblPersonalize", 
        "DblModernCursorLight"
    ]
}


'@ | ConvertFrom-Json


################################################################################################################
###                                                                                                          ###
###                                        INFO: MAIN FUNCTIONS                                            ###
###                                                                                                          ###
################################################################################################################

<#
.NOTES
    Author         : Vuk1lis
    Website        : https://vukilis.com
    GitHub         : https://github.com/vukilis
    Name:          : Windows11 Optimizer&Debloater
    Version        : 3.2
#>

Add-Type -AssemblyName PresentationFramework

Start-Transcript $ENV:TEMP\win11deb.log -Append
$xamlFile="C:\Users\vukilis\Desktop\Windows11-Optimizer-Debloater\xaml\MainWindow.xaml" #uncomment for development
$inputXAML=Get-Content -Path $xamlFile -Raw #uncomment for development
# $inputXAML = (new-object Net.WebClient).DownloadString("https://raw.githubusercontent.com/vukilis/Windows11-Optimizer-Debloater/main/xaml/MainWindow.xaml") #uncomment for Production
$inputXAML=$inputXAML -replace 'mc:Ignorable="d"', '' -replace 'x:N', "N" -replace '^<Win.*', '<Window'

[void][System.Reflection.Assembly]::LoadWithPartialName('presentationframework')
[XML]$XAML=$inputXAML

[void] [System.Reflection.Assembly]::LoadWithPartialName("System.Drawing") 
[void] [System.Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms") 

$reader = New-Object System.Xml.XmlNodeReader $XAML
try {
    $psform=[Windows.Markup.XamlReader]::Load($reader)
}
catch [System.Management.Automation.MethodInvocationException] {
    Write-Warning "We ran into a problem with the XAML code.  Check the syntax for this control..."
    write-host $error[0].Exception.Message -ForegroundColor Red
    If ($error[0].Exception.Message -like "*button*") {
        write-warning "Ensure your &lt;button in the `$inputXML does NOT have a Click=ButtonClick property.  PS can't handle this`n`n`n`n"
    }
}
catch {
    ### If it broke some other way <img draggable="false" role="img" class="emoji" alt="????" src="https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/svg/1f600.svg">
    Write-Host "Unable to load Windows.Markup.XamlReader. Double-check syntax and ensure .net is installed."
}

$xaml.SelectNodes("//*[@Name]") | ForEach-Object {
    try {
        Set-Variable -Name "wpf_$($_.Name)" -Value $psform.FindName($_.Name) -ErrorAction Stop
    }
    catch {
        throw
    }
}

$wpf_AppVersion.Content = "Version: 3.2 - 16.08.2025"

function Invoke-CloseButton {
    <#
    .SYNOPSIS
        Close application

    .PARAMETER Button
    #>

    $psform.Close()
    Write-Host "Goodbye! :)" -ForegroundColor Red
}
function Invoke-MinButton {
    <#
    .SYNOPSIS
        Minimize application

    .PARAMETER Button
    #>

    $psform.WindowState = 'Minimized'
    #Write-Host "Minimize!"
}
function Invoke-MaxButton {
    <#
    .SYNOPSIS
        Maximize application
    #>

    if ($psform.WindowState -eq 'Normal')
    {
        $psform.WindowState = 'Maximized'
        $maxMargin = New-Object Windows.Thickness -ArgumentList 5, 5, 5, 5
        $wpf_MainGrid.Margin = $maxMargin
    }
    else
    {
        $psform.WindowState = 'Normal'
        $maxMargin = New-Object Windows.Thickness -ArgumentList 0, 0, 0, 0
        $wpf_MainGrid.Margin = $maxMargin
    }
}

function Invoke-BuyMeACoffee {
    <#
    .SYNOPSIS
        Open BuyMeACoffe link

    .PARAMETER Button
    #>

    Start-Process "https://buymeacoffee.com/vukilis"
}

function Invoke-BuyMeAKofi {
    <#
    .SYNOPSIS
        Open BuyMeAKofi link

    .PARAMETER Button
    #>

    Start-Process "https://ko-fi.com/vukilis"
}

$dragging = $false
$psform.Add_MouseLeftButtonDown({
    $dragging = $true
    $psform.DragMove()
})

$psform.Add_MouseLeftButtonUp({
    $dragging = $false
})

$psform.Add_MouseMove({
    if ($dragging) {
        $screenHeight = [Windows.SystemParameters]::PrimaryScreenHeight
        $mousePosition = [Windows.Forms.Cursor]::Position

        $maximizeThreshold = 24

        if ($mousePosition.Y -lt $maximizeThreshold) {
            $psform.WindowState = 'Maximized'
            $maxMargin = New-Object Windows.Thickness -ArgumentList 5, 5, 5, 5
            $wpf_MainGrid.Margin = $maxMargin
        } 
    }
})

function Maximize-Window {
    <#
    .SYNOPSIS
        Maximize application handler
    #>
    if ($psform.WindowState -eq 'Normal')
    {
        $psform.WindowState = 'Maximized'
        $maxMargin = New-Object Windows.Thickness -ArgumentList 5, 5, 5, 5
        $wpf_MainGrid.Margin = $maxMargin
    }
    else
    {
        $psform.WindowState = 'Normal'
        $maxMargin = New-Object Windows.Thickness -ArgumentList 0, 0, 0, 0
        $wpf_MainGrid.Margin = $maxMargin
    }
}
function Handle-DoubleLeftClick {
    Write-Host "Double Left Clicked!"
}
$doubleLeftClickEvent = [System.Windows.Input.MouseButtonEventHandler]{
    <#
    .SYNOPSIS
        Maximize application when double right click 
    #>
    param(
        [object]$sender,
        [System.Windows.Input.MouseButtonEventArgs]$e
    )

    if ($e.ChangedButton -eq [System.Windows.Input.MouseButton]::Left -and $e.ClickCount -eq 2) {
        Maximize-Window
        #Handle-DoubleLeftClick
    }
}
$wpf_ControlPanel.Add_MouseLeftButtonDown($doubleLeftClickEvent)
$wpf_DockerPanel.Add_MouseLeftButtonDown($doubleLeftClickEvent)

function Invoke-AboutButton {
    <#
        .DESCRIPTION
        This function show and hide about page.
    #>
    $AboutButton = $psform.FindName("AboutButton")
    $aboutGrid = $psform.FindName("AboutGrid")
    
        if ($AboutButton.IsChecked) {
            $aboutGrid.Visibility = "Visible"
            $animation = New-Object Windows.Media.Animation.DoubleAnimation
            $animation.From = 0
            $animation.To = 607.663333333333
            $animation.Duration = [Windows.Duration]::new([TimeSpan]::FromSeconds(0.5))
            $aboutGrid.BeginAnimation([Windows.FrameworkElement]::WidthProperty, $animation)
        } else {
            $animation = New-Object Windows.Media.Animation.DoubleAnimation
            $animation.From = 607.663333333333
            $animation.To = 0
            $animation.Duration = [Windows.Duration]::new([TimeSpan]::FromSeconds(0.5))
            $aboutGrid.BeginAnimation([Windows.FrameworkElement]::WidthProperty, $animation)
            # $aboutGrid.Visibility = "Collapsed"
        }
}


$radioButtons = get-variable | Where-Object {$psitem.name -like "wpf_*" -and $psitem.value -ne $null -and $psitem.value.GetType().name -eq "RadioButton"}
foreach ($radioButton in $radioButtons){
    $radioButton.value.Add_Click({
        [System.Object]$Sender = $args[0]
        Invoke-Tabs "wpf_$($Sender.name)"
    })
}

$buttons = get-variable | Where-Object {$psitem.name -like "wpf_*" -and $psitem.value -ne $null -and $psitem.value.GetType().name -eq "Button"}
foreach ($button in $buttons){
    $button.value.Add_Click({
        [System.Object]$Sender = $args[0]
        Invoke-Button "wpf_$($Sender.name)"
    })
}

$toggleButtons = get-variable | Where-Object {$psitem.name -like "wpf_*" -and $psitem.value -ne $null -and $psitem.value.GetType().name -eq "ToggleButton"}
foreach ($btn in $toggleButtons) {
    $btn.Value.Add_Click({
        $Sender = $args[0]
        Invoke-ToggleButtons -toggle "wpf_$($Sender.Name)" -isChecked ([bool]$Sender.IsChecked)
    })
}

$checkbox = get-variable | Where-Object {$psitem.name -like "wpf_*" -and $psitem.value -ne $null -and $psitem.value.GetType().name -eq "CheckBox"}
foreach ($box in $checkbox){
    $box.value.Add_Click({
        [System.Object]$Sender = $args[0]
        Invoke-Checkbox "wpf_$($Sender.name)"
    })
}

# Load all JSON configs automatically
$sync = @{
    configs = @{
        tweaks = $tweaks
        preset = $preset
    }
}

function Invoke-ToggleButtons {
    Param ([string]$ToggleButton, [bool]$isChecked)

    switch -Wildcard ($ToggleButton) {
        "wpf_AboutButton"    { Invoke-AboutButton }
        "wpf_SettingsButton" { Invoke-SettingsButton }
        "wpf_megaPresetButton" { Invoke-ToggleMegaPreset }
        "wpf_fastPresetButton" {Invoke-ToggleFastPreset}

        default {
            $toggleName = $ToggleButton -replace '^wpf_', ''
            $toggleEntry = $null
            $action = if ($isChecked) { "Enabling" } else { "Disabling" }

            if ($sync.configs.tweaks.PSObject.Properties.Name -contains $toggleName) {
                $toggleEntry = $sync.configs.tweaks.$toggleName
            }

            if (-not $toggleEntry) {
                Write-Warning "No toggle matched for '$toggleName'"
                return
            }

            Write-Host "$action $($toggleEntry.message)" -ForegroundColor Green

            foreach ($regEntry in $toggleEntry.registry) {
                $value = if ($isChecked) { $regEntry.Value } else { $regEntry.OriginalValue }
                try { Set-RegistryValue -Path $regEntry.Path -Name $regEntry.Name -Type $regEntry.Type -Value $value } catch {}
            }

            $scriptType = if ($isChecked) { "InvokeScript" } else { "UndoScript" }
            if ($toggleEntry.PSObject.Properties.Name -contains $scriptType) {
                foreach ($script in $toggleEntry.$scriptType) {
                    try {
                        Write-Host "Running $scriptType for '$toggleName'" -ForegroundColor Cyan
                        # Invoke-Expression $script
                        Invoke-Scripts -Name $toggleEntry.Content -Script $script
                    } catch {
                        Write-Warning "Failed to run $scriptType for '$toggleName': $_"
                    }
                }
            }

            foreach ($svc in $toggleEntry.service) {
                try {
                    $service = Get-Service -Name $svc.Name -ErrorAction Stop
                    $desiredType = if ($isChecked) { $svc.StartupType } else { $svc.OriginalType }

                    Write-Host "Setting service $($svc.Name) startup type to $desiredType" -ForegroundColor Yellow
                    Set-WinService -Name $svc.Name -StartupType $desiredType
                }
                catch {
                    Write-Warning "Service $($svc.Name) not found or could not be modified: $_"
                }
            }

            foreach ($fw in $toggleEntry.firewall) {
                try {
                    $desiredAction = if ($isChecked) { $fw.Action } else { 
                        if ($fw.Action -eq "Disable") { "Enable" } else { "Disable" }
                    }
                    Write-Host "Setting firewall group '$($fw.Group)' on profile '$($fw.Profile)' to $desiredAction" -ForegroundColor Cyan
                    Set-FirewallRule -Group $fw.Group -Profile $fw.Profile -Action $desiredAction
                }
                catch {
                    Write-Warning "Failed to modify firewall rule group '$($fw.Group)': $_"
                }
            }

        }
    }
}

function Invoke-Button {

    <#
    
        .DESCRIPTION
        Meant to make creating buttons easier. There is a section below in the gui that will assign this function to every button.
        This way you can dictate what each button does from this function. 
    
        Input will be the name of the button that is clicked. 
    #>
    
    Param ([string]$Button) 

    Switch -Wildcard ($Button){

        "wpf_Tab?BT" {Invoke-Tabs $Button}
        "wpf_CloseButton" {Invoke-CloseButton}
        "wpf_MinButton" {Invoke-MinButton}
        "wpf_MaxButton" {Invoke-MaxButton}
        "wpf_buymeacoffee" {Invoke-BuyMeACoffee}
        "wpf_buymeakofi" {Invoke-BuyMeAKofi}
        "wpf_SelectDebloat" {Invoke-SelectApplication}
        "wpf_SelectDebloatAll" {Invoke-SelectApplicationAll}
        "wpf_UnselectDebloatAll" {Invoke-UnselectApplicationAll}
        "wpf_UninstallDebloat" {Invoke-UninstallDebloat}
        "wpf_optimizationButton" {Invoke-optimizationButton}
        "wpf_optimizationUndoButton" {Invoke-OptimizationUndo}
        "wpf_recommended" {Invoke-recommended}
        "wpf_gaming" {Invoke-gaming}
        "wpf_normal" {Invoke-normal}
        "wpf_Updatesdefault" {Invoke-UpdatesDefault}
        "wpf_PauseUpdate" {Invoke-PauseUpdate}
        "wpf_FixesUpdate" {Invoke-FixesUpdate}
        "wpf_Updatesdisable" {Invoke-UpdatesDisable}
        "wpf_Updatessecurity" {Invoke-UpdatesSecurity}
        "wpf_PanelControl" {Invoke-Configs -Panel $button}
        "wpf_PanelPnF" {Invoke-Configs -Panel $button}
        "wpf_PanelNetwork" {Invoke-Configs -Panel $button}
        "wpf_PanelPower" {Invoke-Configs -Panel $button}
        "wpf_PanelSound" {Invoke-Configs -Panel $button}
        "wpf_PanelSystem" {Invoke-Configs -Panel $button}
        "wpf_PanelUser" {Invoke-Configs -Panel $button}
        "wpf_PanelServices" {Invoke-Configs -Panel $button}
        "wpf_PanelWindowsFirewall" {Invoke-Configs -Panel $button}
        "wpf_PanelDeviceManager" {Invoke-Configs -Panel $button}
        "wpf_PanelExplorerOption" {Invoke-Configs -Panel $button}
        "wpf_PanelRegedit" {Invoke-Configs -Panel $button}
        "wpf_PanelScheduler" {Invoke-Configs -Panel $button}
        "wpf_PanelResourceMonitor" {Invoke-Configs -Panel $button}
        "wpf_PanelSysConf" {Invoke-Configs -Panel $button}
        "wpf_PanelEvent" {Invoke-Configs -Panel $button}
        "wpf_PanelSysInfo" {Invoke-Configs -Panel $button}
        "wpf_PanelDiskManagement" {Invoke-Configs -Panel $button}
        "wpf_FeatureInstall" {Invoke-FeatureInstall}
        "wpf_PanelAutologin" {Invoke-PanelAutologin}
        "wpf_PanelRegion" {Invoke-Configs -Panel $button}
        "wpf_DblInstall" {Invoke-installButton}
        "wpf_DblGetInstalled" {Invoke-getInstallButton}
        "wpf_DblUninstall" {Invoke-UninstallButton}
        "wpf_DblUpgrade" {Invoke-UpgradeButton}
        "wpf_DblClearPrograms" {Invoke-ClearProgramsButton}
        "wpf_ResetButton" {Invoke-ResetButton}
        "wpf_DblChocoInstall" {Invoke-ChocoInstall}
        "wpf_DblChocoUpgrade" {Invoke-ChocoUpgrade}
        "wpf_DblChocoUninstall" {Invoke-ChocoUninstall}
        "wpf_DblWingetFix" {Invoke-FixesWinget}
        "wpf_DblMsStoreFix" {Invoke-MsStoreFix}
        "wpf_ShortcutApp" {Invoke-ShortcutApp -ShortcutToAdd "Win11Deb"}
        "wpf_FixesNetwork" {Invoke-FixesNetwork}
        "wpf_FixesSound" {Invoke-FixesSound}
        "wpf_RegistryBackup" {Invoke-RegistryBackup}
        "wpf_WingetConfig" {Set-WingetConfig}
        "wpf_FixesADB" {Invoke-FixADB}
        "wpf_ActivateWindows" {Invoke-ActivateWindows}
    }
}

function Invoke-Checkbox {
    <#
    
        .DESCRIPTION
        Meant to make creating checkboxes easier. There is a section below in the gui that will assign this function to every button.
        This way you can dictate what each checkbox does from this function. 
    
        Input will be the name of the checkbox that is clicked. 
    #>

    Param ([string]$checkbox) 

    Switch -Wildcard ($checkbox){
        "wpf_ToggleXboxPreset" {Invoke-ToggleXboxPreseta}
        "wpf_ToggleLitePreset" {Invoke-ToggleLitePreset}
        "wpf_ToggleDevPreset" {Invoke-ToggleDevPreset}
        "wpf_ToggleGamingPreset" {Invoke-ToggleGamingPreset}
    }
}
################################
####  Navigation Controls  #####
################################
function Invoke-Tabs {

    <#
    
        .DESCRIPTION
        Sole purpose of this fuction reduce duplicated code for switching between tabs. 
    
    #>

    Param ($ClickedTab)
    $Tabs = Get-Variable wpf_Tab?BT
    $TabNav = Get-Variable wpf_TabNav
    $x = [int]($ClickedTab -replace "wpf_Tab","" -replace "BT","") - 1

    $TabSearchName = "Tab2"
    $TabSearchItem = $psform.FindName($TabSearchName)

    0..($Tabs.Count -1 ) | ForEach-Object {
        
        if ($x -eq $psitem){
            $TabNav.value.Items[$psitem].IsSelected = $true
        }
        else{
            $TabNav.value.Items[$psitem].IsSelected = $false
        }
    }

    $isVisible = if ($TabSearchItem.isSelected) {"Visible"} else {"Collapsed"}; $wpf_CheckboxFilter.Visibility = $isVisible; $wpf_ResetButton.Visibility = $isVisible
}
Invoke-Tabs "wpf_Tab1BT"

Function Get-Author7 {
    <#
        .SYNOPSIS
        This function will show basic information about author and app
        This is for powershell v7.1+
    #>
    
    Clear-Host
    $colors = @("`e[38;5;200m", "`e[38;5;51m", "`e[38;5;98m")

    function Get-RandomColor {
        Get-Random -InputObject $colors
    }

    $text = @"
           __      __          _      __   _   _       
           \ \    / /         | |    /_ | | | (_)      
            \ \  / /   _   _  | | __  | | | |  _   ___ 
             \ \/ /   | | | | | |/ /  | | | | | | / __|
              \  /    | |_| | |   <   | | | | | | \__ \
               \/      \__,_| |_|\_\  |_| |_| |_| |___/
        
GitHub:                                 Website:
https://github.com/vukilis              https://vukilis.com

Name:                                   Version:
Windows11 Optimizer&Debloater           3.2  
"@
    $coloredText = $text.ToCharArray() | ForEach-Object {
        $randomColor = Get-RandomColor
        "$randomColor$_`e[0m"
    }
    Write-Output ($coloredText -join "")
    Write-Host "`n"
}

Function Get-Author5 {
    <#
        .SYNOPSIS
        This function will show basic information about author and app
        This is for powershell v5.1
    #>

    # Clear-Host
    $colors = @("Red", "Cyan", "Magenta")

    function Get-RandomColor {
        Get-Random -InputObject $colors
    }

    $text = @"
           __      __          _      __   _   _       
           \ \    / /         | |    /_ | | | (_)      
            \ \  / /   _   _  | | __  | | | |  _   ___ 
             \ \/ /   | | | | | |/ /  | | | | | | / __|
              \  /    | |_| | |   <   | | | | | | \__ \
               \/      \__,_| |_|\_\  |_| |_| |_| |___/
        
GitHub:                                 Website:
https://github.com/vukilis              https://vukilis.com

Name:                                   Version:
Windows11 Optimizer&Debloater           3.2    
"@

    $coloredText = $text.ToCharArray() | ForEach-Object {
        $randomColor = Get-RandomColor
        Write-Host $_ -ForegroundColor $randomColor -NoNewline
    }

    Write-Host "`n"
}


function Art {
    <#
        .SYNOPSIS
        This function will show tweak message in console in different colors
    #>

    param (
        [string]$artN,
        [string]$ch = "White"
    )

    $artN | ForEach-Object {
        Write-Host $_ -NoNewline -ForegroundColor $ch
    }

    Write-Host "`n"
}

### Get all variables from form
# Get-Variable wpf_*
# Function to download a file

$downloadUrl = "https://raw.githubusercontent.com/vukilis/Windows11-Optimizer-Debloater/main/logo.png"
$destinationPath = Join-Path $env:TEMP "win11deb_logo.png"

# Check if the file already exists
if (-not (Test-Path $destinationPath)) {
    # File does not exist, download it
    $wc = New-Object System.Net.WebClient
    $wc.DownloadFile($downloadUrl, $destinationPath)
    Write-Host "File downloaded to: $destinationPath"
} else {
    Write-Output "File already exists at: $destinationPath"
}

################################################################################################################
###                                                                                                          ###
###                                        INFO: HELPER FUNCTIONS                                            ###
###                                                                                                          ###
################################################################################################################

function Get-NavigateUri {
    <#
    .SYNOPSIS
        Function that gets url links from xaml
        Get-NavigateUri -hyperlink $GitHubHyperlink 
    #>

    param (
        [System.Windows.Documents.Hyperlink]$hyperlink
    )

    if ($hyperlink -ne $null) {
        return $hyperlink.NavigateUri.AbsoluteUri
    }

    return $null
}
function Invoke-ExplorerUpdate {
    <#
    .SYNOPSIS
        Refreshes the Windows Explorer
    #>

    param (
        [string]$action = "restart"
    )

    if ($action -eq "restart") {
        # Restart the Windows Explorer
        taskkill.exe /F /IM "explorer.exe"
        Start-Process "explorer.exe"
    }
}
function Invoke-jsonChecker {
    <#

    .SYNOPSIS
        This function checks if json object can be successfully converted into a PowerShell object
        Provides some basic error handling to report whether the conversion was successful or if an error occurred during the process
        Invoke-jsonChecker -name "applications"
    #>

    param(
        $name
    )

    $jsonfile = Get-Content ./config/$name.json | ConvertFrom-Json

    foreach ($jsonString in $jsonfile) {
        try {
            $programObject = $jsonString
            Write-Host "Successfully converted JSON: $jsonString" -ForegroundColor Green
        } catch {
            Write-Host "Failed to convert JSON: $jsonString" -ForegroundColor Red
            Write-Host "Error: $_"
        }
    }
}
function Invoke-MessageBox {
    <#

    .SYNOPSIS
        Handler function for [System.Windows.MessageBox]
        Invoke-MessageBox -msg "install"
    #>

    param (
        [string]$msg
    )

    $MessageboxTitle = switch ($msg) {
        "install"  { "Installs are finished" }
        "uninstall" { "Uninstalls are finished" }
        "upgrade"   { "Upgrading are finished" }
        "tweak"   { "Tweaking are finished" }
        "undotweak"   { "Undo tweaking are finished" }
        "debloat"   { "Debloating are finished" }
        "debloatError"   { "Please unselect all unchecked APPXs!" }
        "debloatInfo"   { "Please select an APPX!" }
        "updateDefault"   { "Set Updates To Default" }
        "updateSecurity"   { "Set Security Updates" }
        "updateDisabled"   { "Updates Are Disabled" }
        "updateFix"   { "Reset Windows Update" }
        "updatePause"   { "Pause Windows Update" }
        "feature"   { "All features are now installed" }
        "networkReset"   { "Stock settings loaded. Please reboot your computer" }
        "soundReset"   { "Audio Service restarted" }
        "backup"   { "Backup are finished" }
        "shortcut"   { "Shortcut is created" }
        default     {
            Write-Warning "Unknown message type: $msg"
            return
        }
    }

    [System.Windows.MessageBox]::Show("Done", $MessageboxTitle, [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Information)
}
function Invoke-Scripts {
    <#
    .SYNOPSIS
        Invokes the provided script or scriptblock. Intended for tweaks that can't be handled with the other functions.

    .PARAMETER Name
        The name of the script being invoked.

    .PARAMETER Script
        The script content as a string or scriptblock.

    .EXAMPLE
        Invoke-Scripts -Name "Hello World" -Script {"Write-Output 'Hello World'"}
        Invoke-Scripts -Name "Hello World" -Script "Write-Output 'Hello World'"
    #>
    param (
        [string]$Name,
        [Parameter(Mandatory)]
        $Script
    )

    try {
        #Write-Host "Running script for $Name"

        # Convert string to scriptblock if needed
        if ($Script -is [string]) {
            $ScriptBlock = [scriptblock]::Create($Script)
        } elseif ($Script -is [scriptblock]) {
            $ScriptBlock = $Script
        } else {
            throw "Unsupported script type: $($Script.GetType().FullName)"
        }

        Invoke-Command $ScriptBlock -ErrorAction Stop
    }
    catch [System.Management.Automation.CommandNotFoundException] {
        Write-Warning "The specified command was not found."
        Write-Warning $PSItem.Exception.message
    } catch [System.Management.Automation.RuntimeException] {
        Write-Warning "A runtime exception occurred."
        Write-Warning $PSItem.Exception.message
    } catch [System.Security.SecurityException] {
        Write-Warning "A security exception occurred."
        Write-Warning $PSItem.Exception.message
    } catch [System.UnauthorizedAccessException] {
        Write-Warning "Access denied. You do not have permission to perform this operation."
        Write-Warning $PSItem.Exception.message
    } catch {
        # Generic catch block to handle any other type of exception
        Write-Warning "Unable to run script for $name due to unhandled exception"
        Write-Warning $psitem.Exception.StackTrace
    }
}
Function Open-Link {
    <#
    .SYNOPSIS
        Function that opens a url link
        Open-Link -Uri $navigateUriGit
    #>

    param($Uri)

    try {
        Start-Process $Uri
    }
    catch {
        [System.Windows.MessageBox]::Show("Error opening link: $_", "Error", [Windows.MessageBoxButton]::OK, [Windows.MessageBoxImage]::Error)
    }
}

$wpf_GitHubHyperlink.Add_Click({
    <#
    .SYNOPSIS
        Open GitHub page link
    #>
    $GitHubHyperlink = $psform.FindName("GitHubHyperlink")
    $navigateUriGit = Get-NavigateUri -hyperlink $GitHubHyperlink
    Open-Link -Uri $navigateUriGit
})

$wpf_WebsiteHyperlink.Add_Click({
    <#
    .SYNOPSIS
        Open Website link
    #>
    $WebsiteHyperlink = $psform.FindName("WebsiteHyperlink")
    $navigateUriSite = Get-NavigateUri -hyperlink $WebsiteHyperlink
    Open-Link -Uri $navigateUriSite
})
function AddCustomCheckBox {
    param (
        [string]$Id,
        [string]$Name,
        [System.Windows.Controls.Panel]$panel,
        [string]$Foreground,
        [string]$HorizontalAlignment,
        [System.Windows.Input.Cursor]$Cursor,
        [array]$Margin,
        [int]$FontSize,
        [string]$FontFamily
    )

    $cbox = New-Object Windows.Controls.CheckBox
    $cbox.Name = $Id
    $cbox.Content = $Name
    $cbox.Foreground = $Foreground
    $cbox.HorizontalAlignment = $HorizontalAlignment
    $cbox.Cursor = $Cursor
    $cbox.Margin = New-Object Windows.Thickness $Margin[0], $Margin[1], $Margin[2], $Margin[3]
    $cbox.FontSize = $FontSize
    $cbox.FontFamily = New-Object Windows.Media.FontFamily("$FontFamily")

    $scaleTransform = New-Object Windows.Media.ScaleTransform
    $scaleTransform.ScaleX = 1.5
    $scaleTransform.ScaleY = 1.5
    $cbox.LayoutTransform = $scaleTransform

    $panel.Children.Add($cbox) | Out-Null
}


# $cbox = New-Object Windows.Controls.CheckBox
# $cbox.Name = $app.Id
# $cbox.Content = $app.Name
# $cbox.Foreground = "#a69f6c"
# $cbox.HorizontalAlignment = "Left"
# $cbox.Cursor = "Hand"
# $cbox.Margin = New-Object Windows.Thickness(15, 5, 15, 5)
# $cbox.FontSize = 11
# $cbox.FontFamily = New-Object Windows.Media.FontFamily("Gadugi")
function AddCustomLabel {
    param (
        [string]$content,
        [System.Windows.Controls.Panel]$panel,
        [string]$Foreground,
        [array]$Margin,
        [int]$fontSize,
        [string]$fontWeight,
        [string]$fontFamily
    )

    $label = New-Object Windows.Controls.Label
    $label.Content = $content
    $label.Foreground = $Foreground
    $label.Margin = New-Object Windows.Thickness $Margin[0], $Margin[1], $Margin[2], $Margin[3]
    $label.FontSize = $fontSize
    $label.FontWeight = $fontWeight
    $label.FontFamily = New-Object Windows.Media.FontFamily($fontFamily)
    $panel.Children.Add($label) | Out-Null
}


# $label = New-Object Windows.Controls.Label
# $label.Content = $content
# $label.Foreground = "#a69f6c"
# $label.Margin = New-Object Windows.Thickness(15, 5, 15, 0)
# $label.FontSize = 14
# $label.FontWeight = "Bold"
# $label.FontFamily = New-Object Windows.Media.FontFamily("Gadugi")
# $panel.Children.Add($label) | Out-Null
foreach ($ttKey in $sync.configs.tweaks.PSObject.Properties.Name) {
    $control = $psform.FindName($ttKey)
    if ($null -ne $control -and $sync.configs.tweaks.$ttKey.PSObject.Properties.Name -contains "Description") {
        $description = $sync.configs.tweaks.$ttKey.Description
        $control.ToolTip = $description
        # Write-Host "Assigned ToolTip to '$ttKey': $description" -ForegroundColor Green
    }
    else {
        Write-Host "No matching control or description found for '$ttKey'." -ForegroundColor Yellow
    }
}
function Set-FirewallRule {
    <#
    .SYNOPSIS
        Enables or disables a firewall rule group for a given profile.

    .PARAMETER Group
        The firewall rule group (e.g. "Network Discovery").

    .PARAMETER Profile
        The firewall profile (Domain, Private, Public, Any).

    .PARAMETER Action
        Enable or Disable.
    #>

    param (
        [Parameter(Mandatory = $true)]
        [string]$Group,

        [Parameter(Mandatory = $true)]
        [ValidateSet("Domain","Private","Public","Any")]
        [string]$Profile,

        [Parameter(Mandatory = $true)]
        [ValidateSet("Enable","Disable")]
        [string]$Action
    )

    try {
        Write-Host "[$Action] firewall group '$Group' on profile '$Profile'" -ForegroundColor Cyan

        # Get matching rules first
        $rules = if ($Profile -eq "Any") {
            Get-NetFirewallRule -DisplayGroup $Group -ErrorAction Stop
        } else {
            Get-NetFirewallRule -DisplayGroup $Group -ErrorAction Stop |
                Where-Object { $_.Profile -match $Profile }
        }

        if ($rules.Count -eq 0) {
            Write-Warning "No firewall rules found for group '$Group' and profile '$Profile'"
            return
        }

        if ($Action -eq "Enable") {
            $rules | Enable-NetFirewallRule
        }
        elseif ($Action -eq "Disable") {
            $rules | Disable-NetFirewallRule
        }
    }
    catch {
        Write-Warning "Failed to update firewall group '$Group' on profile '$Profile': $_"
    }
}
function Set-RestorePoint {
    <#
    
        .DESCRIPTION
        Purpose of this fuction is to create restore point. 
    
    #>
    
    # Check if the user has administrative privileges
    if (-Not ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
        Write-Host "Please run this script as an administrator."
        return
    }

    # Check if System Restore is enabled for the main drive
    try {
        # Try getting restore points to check if System Restore is enabled
        Enable-ComputerRestore -Drive "$env:SystemDrive"
    } catch {
        Write-Host "An error occurred while enabling System Restore: $_"
    }

    # Check if the SystemRestorePointCreationFrequency value exists
    $exists = Get-ItemProperty -path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SystemRestore" -name "SystemRestorePointCreationFrequency" -ErrorAction SilentlyContinue
    if($null -eq $exists){
        write-host 'Changing system to allow multiple restore points per day'
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SystemRestore" -Name "SystemRestorePointCreationFrequency" -Value "0" -Type DWord -Force -ErrorAction Stop | Out-Null
    }

    # Get all the restore points for the current day
    $existingRestorePoints = Get-ComputerRestorePoint | Where-Object { $_.CreationTime.Date -eq (Get-Date).Date }

    # Check if there is already a restore point created today
    if ($existingRestorePoints.Count -eq 0) {
        $description = "System Restore Point created by Windows11-Optimizer-Debloater"

        Checkpoint-Computer -Description $description -RestorePointType "MODIFY_SETTINGS"
        Write-Host -ForegroundColor Green "System Restore Point Created Successfully"
    }
}
Function Set-WinService {
    <#

    .SYNOPSIS
        Changes the startup type of the given service

    .PARAMETER Name
        The name of the service to modify

    .PARAMETER StartupType
        The startup type to set the service to

    .EXAMPLE
        Set-WinService -Name "HomeGroupListener" -StartupType "Manual"

    #>
    param (
        $Name,
        $StartupType
    )
    try {
        Write-Host "Setting Service $Name to $StartupType"

        # Check if the service exists
        $service = Get-Service -Name $Name -ErrorAction Stop

        # Service exists, proceed with changing properties
        $service | Set-Service -StartupType $StartupType -ErrorAction Stop
    } catch [System.ServiceProcess.ServiceNotFoundException] {
        Write-Warning "Service $Name was not found"
    } catch {
        Write-Warning "Unable to set $Name due to unhandled exception"
        Write-Warning $_.Exception.Message
    }

}
function Start-Sleep($seconds) {
    <#

    .SYNOPSIS
        Animated sleep function
    #>

    $doneDT = (Get-Date).AddSeconds($seconds)
    while($doneDT -gt (Get-Date)) {
        $secondsLeft = $doneDT.Subtract((Get-Date)).TotalSeconds
        $percent = ($seconds - $secondsLeft) / $seconds * 100
        Write-Progress -Activity "Loading" -Status "Loading..." -SecondsRemaining $secondsLeft -PercentComplete $percent
        [System.Threading.Thread]::Sleep(500)
    }
    Write-Progress -Activity "Loading" -Status "Loading..." -SecondsRemaining 0 -Completed
}

################################################################################################################
###                                                                                                          ###
###                                         INFO: INFO FUNCTIONS                                             ###
###                                                                                                          ###
################################################################################################################

# HARDWARE INFO

$ComputerInfo = Get-ComputerInfo

$pcName = $ComputerInfo.CsDNSHostName
$wpf_pcName.Content="Welcome $pcName"

$cpuInfo = $ComputerInfo.CsProcessors
$wpf_cpuInfo.Content=$cpuInfo.Name

Get-CimInstance -ClassName win32_VideoController | ForEach-Object {[void]$wpf_gpuInfo.Items.Add($_.VideoProcessor)}

$ramInfo = get-wmiobject -class Win32_ComputerSystem
$ramInfoGB = [math]::Ceiling($ramInfo.TotalPhysicalMemory / 1024 / 1024 / 1024)
$ramSpeed = Get-WmiObject Win32_PhysicalMemory | Select-Object *
$IsVirtual = $ramInfo.Model.Contains("Virtual")
if ($IsVirtual -like 'False'){
    Write-Output "This Machine is Physical Platform"
    $wpf_ramInfo.Content=[string]$ramInfoGB+"GB"+" "+ $ramSpeed.ConfiguredClockSpeed[0]+"MT/s"
} else{
    Write-Output "This Machine is Virtual Platform"
    $wpf_ramInfo.Content=[string]$ramInfoGB+"GB"
}

$mbInfo = Get-CimInstance -ClassName win32_baseboard | Select-Object *
$wpf_mbInfo.Content=$mbInfo.Product

# OS INFO
$osInfo = $ComputerInfo.OSName
$wpf_osInfo.Content=$osInfo + " " + $ComputerInfo.OsArchitecture

$version = (Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion").DisplayVersion
$verInfo = "Version " + $version + " " + "($($ComputerInfo.OsVersion))"
$wpf_verInfo.Content=$verInfo

$installTimeInfo = $ComputerInfo.OsInstallDate
$wpf_installTimeInfo.Content=$installTimeInfo.ToString('dd-MMM-yyyy HH:mm')

$licenceInfo=Get-CimInstance SoftwareLicensingProduct -Filter "partialproductkey is not null" | Where-Object name -like windows*
$licenceCheckInfo=$licenceInfo.LicenseStatus
if ($licenceCheckInfo -eq 1) {
    $licenceCheckInfo = "Active"
}else {
    $licenceCheckInfo = "Not Active"
}
$wpf_licenceInfo.Content=$licenceCheckInfo

#DISK INFO
Get-Disk | ForEach-Object {[void]$wpf_diskNameInfo.Items.Add($_.FriendlyName)}
function Get-DiskInfo {
    $diskSelected=$wpf_diskNameInfo.SelectedItem
    $details=Get-Disk -FriendlyName "$diskSelected" | Select-Object *
    $wpf_diskStatus.Content=$details.HealthStatus
    $wpf_diskStyle.Content=$details.PartitionStyle
}

$volumes = Get-Volume
foreach ($volume in $volumes) { if ($volume.DriveLetter -notlike "") {[void]$wpf_diskName.Items.Add($volume.DriveLetter)} }
function Get-DiskSize {
    $diskSelected = $wpf_diskName.SelectedItem
    foreach ($volume in $volumes) {
        if ($volume.DriveLetter -eq $diskSelected) {
            $maxSizeGB = $volume.Size / 1GB
            $freeSizeGB = $volume.SizeRemaining / 1GB
            $maxSizeFormatted = if ($maxSizeGB -ge 1000) {
                "{0}TB" -f [math]::Round($maxSizeGB / 1024)
            } else {
                "{0}GB" -f [math]::Round($maxSizeGB)
            }
            $freeSizeFormatted = if ($freeSizeGB -ge 1000) {
                "{0:N1}TB" -f ($freeSizeGB / 1024)
            } else {
                "{0:N1}GB" -f ($freeSizeGB)
            }
            $wpf_diskMaxSize.Content = $maxSizeFormatted
            $wpf_diskFreeSize.Content = $freeSizeFormatted
        }
    }
}

################################################################################################################
###                                                                                                          ###
###                                        INFO: INSTALL FUNCTIONS                                           ###
###                                                                                                          ###
################################################################################################################

function Invoke-APPX {
    #$jsonfile = Get-Content ./config/applications.json | ConvertFrom-Json
    $result = @()

    foreach ($program in $programs) {
        $program = $program | ConvertFrom-Json
        $id = $program.id
        $name = $program.name
        $winget = $program.winget
        $idPython = $id -like "DblPython*"
        $pipPackage = $program.pip
        $idChoco = $id -like "DblChoco*"
        $choco = $program.choco

        $checkBox = $psform.FindName("$id")
        $isChecked = $checkBox.IsChecked

        $result += [PSCustomObject]@{
            Id = $id
            Name = $name
            Winget = $winget
            IdPython = $idPython
            PipPackage = $pipPackage
            IdChoco = $idChoco
            Choco = $choco
            IsChecked = $isChecked
        }
    }

    return $result
}
function Invoke-Filter {
    <#

    .SYNOPSIS
        Search filter for apps 
    #>
    
    $matchingProgram = Invoke-APPX
    foreach ($program in $matchingProgram) {
        $id = $program.Id
        $filter = $wpf_CheckboxFilter.Text
        $checkBoxes = $psform.FindName("$id")

        Foreach ($CheckBox in $CheckBoxes) {
            if ($CheckBox.Content.ToLower().Contains($filter)) {
                $CheckBox.Visibility = "Visible"
                #Write-Host "Match found: $name"
            }
            elseif($CheckBox.Content.Contains($filter)){
                $CheckBox.Visibility = "Visible"
            }
            elseif($CheckBox.Content.ToUpper().Contains($filter)){
                $CheckBox.Visibility = "Visible"
            }
            else {
                $CheckBox.Visibility = "Collapsed"
            }
        }
    }
}

$wpf_CheckboxFilter.Add_TextChanged({
    Invoke-Filter
})
function Invoke-ManageInstall {
    <#

    .SYNOPSIS
        Handler function for installing, uninstalling and upgrading apps
        Invoke-ManageInstall -PackageManger "winget" -manage "Installing" -program $name -PackageName $winget
    #>

    param(
            $program,
            $PackageManger,
            $PackageName,
            $manage 
        )

    if($manage -eq "Installing" -and $PackageManger -eq "pip"){
        if (Get-Command python -ErrorAction Ignore) {
            Write-Host "Installing $name package" -ForegroundColor Green
            python -m pip install --no-input --quiet --upgrade pip
            pip install $PackageName --no-input --quiet 
        } else {
            Write-Host "Python is not installed." -ForegroundColor Red
        }
    }elseif($manage -eq "Installing" -and $PackageManger -eq "winget"){
        Write-Host "Installing $name package" -ForegroundColor Green
        Start-Process -FilePath winget -ArgumentList "install --id $PackageName -e --accept-source-agreements --accept-package-agreements --disable-interactivity --silent" -NoNewWindow -Wait
    }elseif($manage -eq "Installing" -and $PackageManger -eq "choco"){
        if ((Get-Command -Name choco -ErrorAction Ignore) -and (Get-Item "$env:ChocolateyInstall\choco.exe" -ErrorAction Ignore).VersionInfo.ProductVersion) {
            Write-Host "Installing $name package" -ForegroundColor Green
            Start-Process -FilePath choco -ArgumentList "install $PackageName -y" -NoNewWindow -Wait
        }else{
            Write-Host "Seems Chocolatey is not installed" -ForegroundColor Red
        }
    }

    if($manage -eq "Uninstalling" -and $PackageManger -eq "pip"){
        if (Get-Command python -ErrorAction Ignore) {
            Write-Host "Uninstalling $name package" -ForegroundColor Red
            pip uninstall $PackageName --yes --quiet --no-input
        } else {
            Write-Host "Python is not installed." -ForegroundColor Red
        }
    }elseif($manage -eq "Uninstalling" -and $PackageManger -eq "winget"){
        Write-Host "Uninstalling $name package" -ForegroundColor Red
        Start-Process -FilePath winget -ArgumentList "uninstall --id $PackageName -e --purge --force --disable-interactivity --silent" -NoNewWindow -Wait
    }elseif($manage -eq "Uninstalling" -and $PackageManger -eq "choco"){
        if ((Get-Command -Name choco -ErrorAction Ignore) -and (Get-Item "$env:ChocolateyInstall\choco.exe" -ErrorAction Ignore).VersionInfo.ProductVersion) {
            Write-Host "Uninstalling $name package" -ForegroundColor Red
            Start-Process -FilePath choco -ArgumentList "uninstall $PackageName -y" -NoNewWindow -Wait
        }else{
            Write-Host "Seems Chocolatey is not installed" -ForegroundColor Red
        }
    }

    if($manage -eq "Upgrading" -and $PackageManger -eq "pip"){
        if (Get-Command python -ErrorAction Ignore) {
            Write-Host "Upgrading $name package" -ForegroundColor Blue
            pip install --upgrade $PackageName --no-input --quiet --no-cache
        } else {
            Write-Host "Python is not installed." -ForegroundColor Red
        }
    }elseif($manage -eq "Upgrading" -and $PackageManger -eq "winget"){
        Write-Host "Upgrading $name package" -ForegroundColor Blue
        Start-Process -FilePath winget -ArgumentList "upgrade --id $PackageName -e --accept-source-agreements --accept-package-agreements --disable-interactivity --silent --force" -NoNewWindow -Wait
    }elseif($manage -eq "Upgrading" -and $PackageManger -eq "choco"){
        if ((Get-Command -Name choco -ErrorAction Ignore) -and (Get-Item "$env:ChocolateyInstall\choco.exe" -ErrorAction Ignore).VersionInfo.ProductVersion) {
            Write-Host "Upgrading $name package" -ForegroundColor Blue
            Start-Process -FilePath choco -ArgumentList "upgrade $PackageName -y" -NoNewWindow -Wait
        }else{
            Write-Host "Seems Chocolatey is not installed" -ForegroundColor Red
        }
    }
}
Function Install-ProgramWinget {
    <#
    .SYNOPSIS
    Runs the designated action on the provided programs using Winget

    .PARAMETER Programs
    A list of programs to process

    .PARAMETER action
    The action to perform on the programs, can be either 'Install' or 'Uninstall'

    .NOTES
    The triple quotes are required any time you need a " in a normal script block.
    The winget Return codes are documented here: https://github.com/microsoft/winget-cli/blob/master/doc/windows/package-actionr/winget/returnCodes.md
    #>

    param(
        [Parameter(Mandatory, Position=0)]$Programs,

        [Parameter(Mandatory, Position=1)]
        [ValidateSet("Install")]
        [String]$Action
    )

    Function Invoke-Winget {
    <#
    .SYNOPSIS
    Invokes the winget.exe with the provided arguments and return the exit code

    .PARAMETER wingetId
    The Id of the Program that Winget should Install/Uninstall

    .PARAMETER scope
    Determines the installation mode. Can be "user" or "machine" (For more info look at the winget documentation)

    .PARAMETER credential
    The PSCredential Object of the user that should be used to run winget

    .NOTES
    Invoke Winget uses the public variable $Action defined outside the function to determine if a Program should be installed or removed
    #>
        param (
            [string]$wingetId,
            [string]$scope = "",
            [PScredential]$credential = $null
        )

        $commonArguments = "--id $wingetId --silent"
        $arguments = if ($Action -eq "Install") {
            "install $commonArguments --accept-source-agreements --accept-package-agreements $(if ($scope) {" --scope $scope"})"
        }

        $processParams = @{
            FilePath = "winget"
            ArgumentList = $arguments
            Wait = $true
            PassThru = $true
            NoNewWindow = $true
        }

        if ($credential) {
            $processParams.credential = $credential
        }

        return (Start-Process @processParams).ExitCode
    }

    Function Invoke-Install {
    <#
    .SYNOPSIS
    Contains the Install Logic and return code handling from winget

    .PARAMETER Program
    The Winget ID of the Program that should be installed
    #>
        param (
            [string]$Program
        )
        $status = Invoke-Winget -wingetId $Program
        if ($status -eq 0) {
            Write-Host "$($Program) installed successfully."
            return $true
        } elseif ($status -eq -1978335189) {
            Write-Host "$($Program) No applicable update found"
            return $true
        }

        Write-Host "Attempt installation of $($Program) with User scope"
        $status = Invoke-Winget -wingetId $Program -scope "user"
        if ($status -eq 0) {
            Write-Host "$($Program) installed successfully with User scope."
            return $true
        } elseif ($status -eq -1978335189) {
            Write-Host "$($Program) No applicable update found"
            return $true
        }

        $userAcknowledgment = [System.Windows.MessageBox]::Show("You need to input your password to install $($Program) with specific user credentials.", "User credential Prompt", [System.Windows.MessageBoxButton]::Ok)
        if ($userAcknowledgment -eq 'Ok') {
            $getcreds = Get-Credential $env:USERNAME
            $status = Invoke-Winget -wingetId $Program -credential $getcreds
            if ($status -eq 0) {
                Write-Host "$($Program) installed successfully with User prompt."
                return $true
            }
        } else {
            Write-Host "Skipping installation with specific user credentials."
        }

        Write-Host "Failed to install $($Program)."
        return $false
    }

    $count = $Programs.Count
    $failedPackages = @()

    Write-Host "==========================================="
    Write-Host "--    Configuring winget packages       ---"
    Write-Host "==========================================="

    for ($i = 0; $i -lt $count; $i++) {
        $Program = $Programs[$i]
        $result = $false
        $result = switch ($Action) {
            "Install" {Invoke-Install -Program $Program}
            default {throw "[Install-ProgramWinget] Invalid action: $Action"}
        }

        if (-not $result) {
            $failedPackages += $Program
        }
    }
    return $failedPackages
}
function Invoke-ChocoInstall {
    <#

    .SYNOPSIS
        Installing chocolatey
    #>

    #Check if chocolatey is installed and get its version
    if ((Get-Command -Name choco -ErrorAction Ignore) -and ($chocoVersion = (Get-Item "$env:ChocolateyInstall\choco.exe" -ErrorAction Ignore).VersionInfo.ProductVersion)) {
        Write-Host "Chocolatey Version $chocoVersion is already installed" -ForegroundColor Green
    }else {
        Write-Host "Seems Chocolatey is not installed, installing now" -ForegroundColor Magenta
        Set-ExecutionPolicy Bypass -Scope Process -Force; Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
        powershell choco feature enable -n allowGlobalConfirmation
    }
    Invoke-MessageBox -msg "install"
}
function Invoke-ChocoUninstall {

    <#

    .SYNOPSIS
        Unistalling chocolatey
    #>

    if ((Get-Command -Name choco -ErrorAction Ignore) -and (Get-Item "$env:ChocolateyInstall\choco.exe" -ErrorAction Ignore).VersionInfo.ProductVersion) {
        Write-Host "Uninstalling chocolatey package" -ForegroundColor Red
        $chocoPath = $env:ChocolateyInstall
        # Remove the folder
        Remove-Item -Path $chocoPath -Recurse -Force
        # Specify the name of the environment variable you want to remove
        $chocoEnv = "ChocolateyInstall"
        $chocoUpdateEnv = "ChocolateyLastPathUpdate"
        # Remove the environment variable
        [Environment]::SetEnvironmentVariable($chocoEnv, $null, [System.EnvironmentVariableTarget]::Machine)
        [Environment]::SetEnvironmentVariable($chocoUpdateEnv, $null, [System.EnvironmentVariableTarget]::User)
        Invoke-MessageBox -msg "uninstall"
    }else{
        Write-Host "Seems Chocolatey is not installed" -ForegroundColor Red
    }
}
function Invoke-ChocoUpgrade {
    <#

    .SYNOPSIS
        Upgrading chocolatey
    #>

    if ((Get-Command -Name choco -ErrorAction Ignore) -and (Get-Item "$env:ChocolateyInstall\choco.exe" -ErrorAction Ignore).VersionInfo.ProductVersion) {
        Write-Host "Upgrading chocolatey package" -ForegroundColor Blue
        Start-Process -FilePath choco -ArgumentList "upgrade chocolatey -y" -NoNewWindow -Wait
        Invoke-MessageBox -msg "upgrade"
    }else{
        Write-Host "Seems Chocolatey is not installed" -ForegroundColor Red
    }
}
function Invoke-ClearProgramsButton {
    <#

    .SYNOPSIS
        Clear selected apps   
    #>
    
    $presets = @($wpf_ToggleLitePreset, $wpf_ToggleDevPreset, $wpf_ToggleGamingPreset)
    $styles = @("ToggleSwitchStyleGreen", "ToggleSwitchStylePurple", "ToggleSwitchStyleBlue")

    for ($i = 0; $i -lt $presets.Count; $i++) {
        $presets[$i].IsEnabled = $true
        $presets[$i].IsChecked = $false
        $presets[$i].Style = $presets[$i].TryFindResource($styles[$i])
    }

    $matchingProgram = Invoke-APPX | Where-Object { $_.IsChecked}

    foreach ($program in $matchingProgram) {
        $checkBox = $psform.FindName($program.Id).IsChecked = $false
    }
    Write-Host "Selection cleared" -ForegroundColor Green
}
function Invoke-FixesWinget {

    <#

    .SYNOPSIS
        This would install the latest version of winget and install it with its dependency's
    #>

    Write-Host "Installing winget" -ForegroundColor Green
    $winget = "https://github.com/microsoft/winget-cli/releases/latest/download/Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.msixbundle"
    Start-Process -FilePath powershell -ArgumentList "-NoProfile -ExecutionPolicy Bypass -Command Add-AppxPackage -Path '$winget'" -NoNewWindow -Wait

    Invoke-MessageBox -msg "install"
}
function Invoke-getInstallButton {
    <#

    .SYNOPSIS
        This function select all installed apps
        Read installed winget, choco and pip packages  
    #>

    Write-Host "Selecting Installed applications" -ForegroundColor Green
    # Export winget package information to a JSON file
    $wingetExportPath = Join-Path $env:TEMP "wingetPackage.json"
    winget export -o $wingetExportPath
    #Start-Sleep (2)
    # Read and parse the JSON file
    $jsonObject = Get-Content -Raw -Path $wingetExportPath | ConvertFrom-Json

    # Export Choco packages to a text file
    $chocoExportPath = Join-Path $env:TEMP "chocoPackage.json"
    choco export -o $chocoExportPath
    #Start-Sleep (2)
    $chocoObject = Get-Content -Path $chocoExportPath
    $xml = [xml]$chocoObject

    # Export Python packages to a text file
    pip freeze | Out-File -FilePath "$env:TEMP\pipPackage.txt"
    $PIPpackage = "$env:TEMP\PIPpackage.txt" 

    # Process winget packages
    foreach ($package in $jsonObject.Sources.Packages) {
        $matchingProgram = Invoke-APPX | Where-Object { $_.Winget -eq $package.PackageIdentifier }

        if ($matchingProgram -ne $null) {
            $checkBox = $psform.FindName($matchingProgram.Id)
            $checkBox.IsChecked = $true
        }
    }

    # Process Python packages
    foreach ($line in Get-Content -Path $PIPpackage) {
        $index = $line.IndexOf('=')
        $result = $line.Substring(0, $index).Trim()
        $matchingProgram = Invoke-APPX | Where-Object { $_.PipPackage -eq $result }
        if ($matchingProgram -ne $null) {
            $checkBox = $psform.FindName($matchingProgram.Id)
            $checkBox.IsChecked = $true
        }
    }

    # Process Choco packages
    foreach ($package in $xml.packages.package) {
        $matchingProgram = Invoke-APPX | Where-Object { $_.Choco -eq $package.id }
        if ($matchingProgram -ne $null) {
            $checkBox = $psform.FindName($matchingProgram.Id)
            $checkBox.IsChecked = $true
        }
    }
    
}
function Invoke-installButton {
    <#

    .SYNOPSIS
        This function install all selected apps
        Support winget, choco and pip packages  
    #>

    $matchingProgram = Invoke-APPX
    foreach ($program in $matchingProgram) {
        $checkBox = $psform.FindName($program.Id)
        $isChecked = $checkBox.IsChecked

        if ($isChecked -eq $true -and $program.IdPython) {
            Invoke-ManageInstall -PackageManger "pip" -manage "Installing" -program $program.Name -PackageName $program.PipPackage
        }elseif ($isChecked -eq $true -and $program.IdChoco){
            Invoke-ManageInstall -PackageManger "choco" -manage "Installing" -program $program.Name -PackageName $program.Choco
        }elseif ($isChecked -eq $true){
            Invoke-ManageInstall -PackageManger "winget" -manage "Installing" -program $program.Name -PackageName $program.Winget
        }else {
            continue
        }
    }
    
    Invoke-MessageBox -msg "install"
}
function Invoke-MsStoreFix {
    <#

    .SYNOPSIS
        Fixes Microsoft Store by re-register
    #>
    
    $store = Get-AppxPackage | Select-Object Name, PackageFullName | Where-Object Name -like *windowsstore*
    if ($store){
        Write-Host "Reinstaling windows store" -ForegroundColor Green
        Get-AppxPackage *windowsstore* | Remove-AppxPackage
        Start-Sleep 1
        Get-AppxPackage -allusers Microsoft.WindowsStore | Foreach {Add-AppxPackage -DisableDevelopmentMode -Register "$($_.InstallLocation)\AppXManifest.xml"}
    } else{
        Write-Host "Seems Windows Store is not installed, installing now" -ForegroundColor Magenta
        Get-AppxPackage -allusers Microsoft.WindowsStore | Foreach {Add-AppxPackage -DisableDevelopmentMode -Register "$($_.InstallLocation)\AppXManifest.xml"}
    }
    Invoke-MessageBox -msg "install"
}
function Invoke-ResetButton {
    <#

    .SYNOPSIS
        Button to reset search filter
    #>

    $wpf_CheckboxFilter.Text = "Search"

    $matchingProgram = Invoke-APPX
    foreach ($program in $matchingProgram) {
        $id = $program.Id
        $checkBoxes = $psform.FindName("$id")

        Foreach ($CheckBox in $CheckBoxes) {
            $CheckBox.Visibility = "Visible"
            $CheckBox.isChecked = $false    
        }
    }
}
function Invoke-ToggleDevPreset {
    <#

    .SYNOPSIS
        Developer preset to help when installing apps   
    #>

    $IsChecked = $wpf_ToggleDevPreset.IsChecked
    $wpf_ToggleLitePreset.IsEnabled = !$IsChecked; $wpf_ToggleLitePreset.Style = $wpf_ToggleLitePreset.TryFindResource(('ToggleSwitchStyle' + ('Green', 'Disabled')[$IsChecked]))
    $wpf_ToggleGamingPreset.IsEnabled = !$IsChecked; $wpf_ToggleGamingPreset.Style = $wpf_ToggleGamingPreset.TryFindResource(('ToggleSwitchStyle' + ('Blue', 'Disabled')[$IsChecked]))

    $matchingProgram = Invoke-APPX
    foreach ($program in $matchingProgram) {
        $checkBox = $psform.FindName($program.Id)
        $isChecked = $checkBox.IsChecked

        if ($checkBox.IsChecked -eq $false -and @(
            "Githubdesktop", "Nodemanager", "Java8", "Ohmyposh",
            "Python3", "Postman", "Ruby", "Visualstudio2022", "Code",
            "Dotnet3", "Dotnet5", "Dotnet6", "Dotnet7",
            "Powershell", "vc2015_64", "vc2015_32", "Terminal",
            "Thorium", "Discord", "Slack", "Teams", "Zoom",
            "Steam", "Greenshot", "Imageglass", "Klite", "Spotify", "Vlc",
            "Notepadplus", "7zip", "Cpuz", "ClasicMixer", "Drawio", "Hwinfo",
            "Jdownloader", "Msiafterburner", "OVirtualBox", "Qbittorrent",
            "Ttaskbar", "Winrar", "Sumatra"
        ) -contains $checkBox.Name.Replace("DblInstall", "")){ $checkBox.IsChecked = $true }else{ $checkBox.IsChecked = $false }

    }
    if ($wpf_ToggleDevPreset.IsChecked){ Write-Host "Enabling Dev Preset" -ForegroundColor Green} else { Write-Host "Disabling Dev Preset" -ForegroundColor Red  }
}
function Invoke-ToggleGamingPreset {
    <#

    .SYNOPSIS
        Gaming preset to help when installing apps   
    #>

    $IsChecked = $wpf_ToggleGamingPreset.IsChecked
    $wpf_ToggleLitePreset.IsEnabled = !$IsChecked; $wpf_ToggleLitePreset.Style = $wpf_ToggleLitePreset.TryFindResource(('ToggleSwitchStyle' + ('Green', 'Disabled')[$IsChecked]))
    $wpf_ToggleDevPreset.IsEnabled = !$IsChecked; $wpf_ToggleDevPreset.Style = $wpf_ToggleDevPreset.TryFindResource(('ToggleSwitchStyle' + ('Purple', 'Disabled')[$IsChecked]))

    $matchingProgram = Invoke-APPX
    foreach ($program in $matchingProgram) {
        $checkBox = $psform.FindName($program.Id)
        $isChecked = $checkBox.IsChecked

        if ($checkBox.IsChecked -eq $false -and @(
            "Git", "Dotnet3", "Dotnet5", "Dotnet6",
            "Dotnet7", "vc2015_64", "vc2015_32", "Thorium",
            "Discord", "Eaapp", "Epicgames", "Steam",
            "Ubisoft", "Greenshot", "Imageglass", "Obs", "Spotify",
            "Vlc", "Notepadplus", "Sumatra", "7zip", "Cpuz",
            "ClasicMixer", "Hwinfo", "Msiafterburner", "Qbittorrent"
        ) -contains $checkBox.Name.Replace("DblInstall", "")){ $checkBox.IsChecked = $true }else{ $checkBox.IsChecked = $false }

    }
    if ($wpf_ToggleGamingPreset.IsChecked){ Write-Host "Enabling Gaming Preset" -ForegroundColor Green} else { Write-Host "Disabling Gaming Preset" -ForegroundColor Red  }
}
function Invoke-ToggleLitePreset {
    <#

    .SYNOPSIS
        Minimal preset to help when installing apps   
    #>

    $IsChecked = $wpf_ToggleLitePreset.IsChecked
    $wpf_ToggleDevPreset.IsEnabled = !$IsChecked; $wpf_ToggleDevPreset.Style = $wpf_ToggleDevPreset.TryFindResource(('ToggleSwitchStyle' + ('Purple', 'Disabled')[$IsChecked]))
    $wpf_ToggleGamingPreset.IsEnabled = !$IsChecked; $wpf_ToggleGamingPreset.Style = $wpf_ToggleGamingPreset.TryFindResource(('ToggleSwitchStyle' + ('Blue', 'Disabled')[$IsChecked]))

    $matchingProgram = Invoke-APPX
    foreach ($program in $matchingProgram) {
        $checkBox = $psform.FindName($program.Id)
        $isChecked = $checkBox.IsChecked

        if ($checkBox.IsChecked -eq $false -and @(
            "Git", "Java8", "Ohmyposh", "Code", "Powershell", 
            "vc2015_64", "vc2015_32", "Terminal", "Thorium", 
            "Discord", "Steam", "Greenshot", "Imageglass", "Klite", 
            "Spotify", "Vlc", "Notepadplus", "Sumatra", "7zip", "Cpuz", 
            "ClasicMixer", "Hwinfo", "Jdownloader", "Msiafterburner", 
            "Qbittorrent", "Ttaskbar"
        ) -contains $checkBox.Name.Replace("DblInstall", "")){ $checkBox.IsChecked = $true }else{ $checkBox.IsChecked = $false }
    }

    if ($wpf_ToggleLitePreset.IsChecked){ Write-Host "Enabling Lite Preset" -ForegroundColor Green} else { Write-Host "Disabling Lite Preset" -ForegroundColor Red  }
}
function Invoke-UninstallButton {
    <#

    .SYNOPSIS
        This function uninstall all selected apps
    #>

    $matchingProgram = Invoke-APPX
    foreach ($program in $matchingProgram) {
        $checkBox = $psform.FindName($program.Id)
        $isChecked = $checkBox.IsChecked

        if ($isChecked -eq $true -and $program.IdPython) {
            Invoke-ManageInstall -PackageManger "pip" -manage "Uninstalling" -program $program.Name -PackageName $program.PipPackage
        }elseif ($isChecked -eq $true -and $program.IdChoco){
            Invoke-ManageInstall -PackageManger "choco" -manage "Uninstalling" -program $program.Name -PackageName $program.Choco
        }elseif ($isChecked -eq $true){
            Invoke-ManageInstall -PackageManger "winget" -manage "Uninstalling" -program $program.Name -PackageName $program.Winget
        }else {
            continue
        }
    }
    
    Invoke-MessageBox -msg "uninstall"
}
function Invoke-UpgradeButton {
    <#

    .SYNOPSIS
        This function upgrade all selected apps
    #>

    $matchingProgram = Invoke-APPX
    foreach ($program in $matchingProgram) {
        $checkBox = $psform.FindName($program.Id)
        $isChecked = $checkBox.IsChecked

        if ($isChecked -eq $true -and $program.IdPython) {
            Invoke-ManageInstall -PackageManger "pip" -manage "Upgrading" -program $name -PackageName $program.PipPackage
        }elseif ($isChecked -eq $true -and $program.IdChoco){
            Invoke-ManageInstall -PackageManger "choco" -manage "Upgrading" -program $name -PackageName $program.Choco
        }elseif ($isChecked -eq $true){
            Invoke-ManageInstall -PackageManger "winget" -manage "Upgrading" -program $name -PackageName $program.Winget
        }else {
            continue
        }
    }
    
    Invoke-MessageBox -msg "upgrade"
}

################################################################################################################
###                                                                                                          ###
###                                        INFO: DEBLOAT FUNCTIONS                                           ###
###                                                                                                          ###
################################################################################################################

function Invoke-MsAppxDebloat {
    #$jsonfile = Get-Content ./config/msAppxDebloat.json | ConvertFrom-Json
    param(
        $state
    )
    $result = @()
    foreach ($app in $appx) {
        $app = $app | ConvertFrom-Json
        $id = $app.id
        $name = $app.name
        $GetDebloatCheckBox = $app.IsChecked
        $isChecked = $GetDebloatCheckBox

        $result += [PSCustomObject]@{
            Id = $id
            Name = $name
            IsChecked = $isChecked
        }
    }

    return $result
}
function Remove-WinDebloatAPPX {
    <#
        .DESCRIPTION
        This handler function will remove any of the provided APPX names
        .EXAMPLE
        Remove-WinDebloatAPPX -Name "Microsoft.Microsoft3DViewer"
    #>
    param (
        $Name
    )

    Try{
        Write-Host "Removing $Name"
        Start-Process powershell.exe -ArgumentList "-NoProfile -ExecutionPolicy Bypass -Command Get-AppxPackage | Where-Object {`$_.Name -like '*$Name*'} | Remove-AppxPackage -ErrorAction SilentlyContinue" -NoNewWindow
        Start-Process powershell.exe -ArgumentList "-NoProfile -ExecutionPolicy Bypass -Command Get-AppxProvisionedPackage -Online | Where-Object {`$_.DisplayName -like '*$Name*'} | Remove-AppxProvisionedPackage -Online -ErrorAction SilentlyContinue" -NoNewWindow -Wait
    }
    Catch [System.Exception] {
        if($psitem.Exception.Message -like "*The requested operation requires elevation*"){
            Write-Warning "Unable to uninstall $name due to a Security Exception"
        }
        Else{
            Write-Warning "Unable to uninstall $name due to unhandled exception"
            Write-Warning $psitem.Exception.StackTrace 
        }
    }
    Catch{
        Write-Warning "Unable to uninstall $name due to unhandled exception"
        Write-Warning $psitem.Exception.StackTrace 
    }
}
$DblGetPanel = $psform.FindName("GetDebloat")
$wpf_DblSelected.Content = "Selected: 0 of $($appx.Count)"

# Iterate through each AppxPackage and create a TextBlock for each
$matchingMsAppx = Invoke-MsAppxDebloat
foreach ($app in $matchingMsAppx) {
    #Write-Host "ID: $($app.id), Name: $($app.name)"
    AddCustomCheckBox -Id "$($app.Id)" -Name "$($app.Name)" -panel $DblGetPanel -Foreground "#a69f6c" -HorizontalAlignment "Left" -Cursor "Hand" -Margin @(15, 10, 15, 5) -FontSize 11 -FontFamily "Gadugi"
}
function Invoke-SelectApplication {
    <#

    .SYNOPSIS
        This function select MS APPX you choose.
    #>

    $DblSelectPanel = $psform.FindName("SetDebloat")
    $DblSelectPanel.Children.Clear()
    $checkedCheckboxes = $DblGetPanel.Children
    $checkedCount = 0
    foreach ($app in $checkedCheckboxes) {
        $isChecked = $app.IsChecked
        if ($isChecked -eq $true) {
            AddCustomLabel -content $app.Content -panel $DblSelectPanel -Foreground "#a69f6c" -Margin @(15, 5, 15, 4) -FontSize 14 -FontWeight "Bold" -FontFamily "Gadugi"
            $checkedCount++
        }
    }
    $wpf_DblSelected.Content = "Selected: $checkedCount of $($matchingMsAppx.Count)"
}
function Invoke-SelectApplicationAll {
    <#

    .SYNOPSIS
        This function select all MS APPX.
    #>

    $DblSelectPanel = $psform.FindName("SetDebloat")
    $DblSelectPanel.Children.Clear()
    $checkedCheckboxes = $DblGetPanel.Children
    $checkedCount = 0
    foreach ($app in $checkedCheckboxes) {
        $isChecked = $app.IsChecked = $true
        if ($isChecked -eq $true) {
            AddCustomLabel -content $app.Content -panel $DblSelectPanel -Foreground "#a69f6c" -Margin @(15, 5, 15, 4) -FontSize 14 -FontWeight "Bold" -FontFamily "Gadugi"
            $checkedCount++
        }
    }
    $wpf_DblSelected.Content = "Selected: $checkedCount of $($matchingMsAppx.Count)"
}
function Invoke-ToggleXboxPreseta {
    <#

    .SYNOPSIS
        XBOX preset to help when debloating.
    .DESCRIPTION
        This will remove ALL Microsoft store apps other than the essentials to make winget and xbox work. 
        Games installed by MS Store ARE NOT INCLUDED!
    #>

    $DblSelectPanel = $psform.FindName("SetDebloat")
    $DblSelectPanel.Children.Clear()
    $checkedCheckboxes = $DblGetPanel.Children
    $state = $wpf_ToggleXboxPreset.IsChecked
    
    $xboxApps = @(
        "Microsoft.BingWeather", "Microsoft.GamingServices", "Microsoft.XboxApp", "Microsoft.Xbox.TCUI",
        "Microsoft.XboxGameOverlay", "Microsoft.XboxGamingOverlay", "Microsoft.XboxGameCallableUI", "Microsoft.XboxSpeechToTextOverlay",
        "Microsoft.XboxIdentityProvider", "Microsoft.ZuneMusic", "Microsoft.ZuneVideo", "Microsoft.MixedReality.Portal"
    )

    $checkedCount = 0
    foreach ($app in $checkedCheckboxes) {
        if ($app -is [Windows.Controls.CheckBox]){
            $isChecked = $app.IsChecked = $false

            if ($isChecked -eq $false -and $state -and $xboxApps -notcontains $app.Content) {
                AddCustomLabel -content $app.Content -panel $DblSelectPanel -Foreground "#a69f6c" -Margin @(15, 5, 15, 4) -FontSize 14 -FontWeight "Bold" -FontFamily "Gadugi"
                $app.IsChecked = $true
                $checkedCount++
            } else {
                $app.IsChecked = $false
            }
        }
    }
    $wpf_DblSelected.Content = "Selected: $checkedCount of $($matchingMsAppx.Count)"
}
function Invoke-UninstallDebloat {
    <#

    .SYNOPSIS
        This function uninstall all selected MS APPX.
    #>

    $DblSelectPanel = $psform.FindName("SetDebloat")
    $DblGetPanel = $psform.FindName("GetDebloat")

    $SelectPanelCount = $DblSelectPanel.Children.Count -gt 0
    $GetPanelCount = $DblGetPanel.Children.Count -gt 0

    # Check if the DoubleSelectPanel exists and has children
    $matched = $false
    if (($DblSelectPanel -and $SelectPanelCount) -and ($DblGetPanel -and $GetPanelCount)) {
        foreach ($childSelect in $DblSelectPanel.Children) {
            if ($childSelect -is [Windows.Controls.Label]) {
                $nameFromSelect = $childSelect.Content

                foreach ($childGet in $DblGetPanel.Children) {
                    if ($childGet -is [Windows.Controls.CheckBox]) {
                        $nameFromGet = $childGet.Content
                        $isChecked = $childGet.IsChecked

                        if ($nameFromSelect -eq $nameFromGet -and $isChecked) {
                            #Write-Host "Found label select: $nameFromSelect, State: $isChecked)"
                            Remove-WinDebloatAPPX -Name $nameFromSelect
                            $matched = $true
                            break
                        }
                    }
                }
            }
        }

        if (-not $matched) {
            Write-Host "Application is unchecked and is not unselect from the list. Please unselect all unchecked APPXs!" -ForegroundColor Red
            Invoke-MessageBox -msg "debloatError"
        }else {
            Invoke-UninstallTeams
            Invoke-MessageBox -msg "debloat"
        }

    } else {
        Write-Host "Please select an APPX!" -ForegroundColor Magenta
        Invoke-MessageBox -msg "debloatInfo"
    }
}
function Invoke-UninstallTeams {
    <#

    .SYNOPSIS
        Remove teams
    #>
    $TeamsPath = [System.IO.Path]::Combine($env:LOCALAPPDATA, 'Microsoft', 'Teams')
    $TeamsUpdateExePath = [System.IO.Path]::Combine($TeamsPath, 'Update.exe')

    Write-Host \"Stopping Teams process...\"
    Stop-Process -Name \"*teams*\" -Force -ErrorAction SilentlyContinue

    Write-Host \"Uninstalling Teams from AppData\\Microsoft\\Teams\"
    if ([System.IO.File]::Exists($TeamsUpdateExePath)) {
        # Uninstall app
        $proc = Start-Process $TeamsUpdateExePath \"-uninstall -s\" -PassThru
        $proc.WaitForExit()
    }

    Write-Host \"Removing Teams AppxPackage...\"
    Get-AppxPackage \"*Teams*\" | Remove-AppxPackage -ErrorAction SilentlyContinue
    Get-AppxPackage \"*Teams*\" -AllUsers | Remove-AppxPackage -AllUsers -ErrorAction SilentlyContinue

    Write-Host \"Deleting Teams directory\"
    if ([System.IO.Directory]::Exists($TeamsPath)) {
        Remove-Item $TeamsPath -Force -Recurse -ErrorAction SilentlyContinue
    }

    Write-Host \"Deleting Teams uninstall registry key\"
    # Uninstall from Uninstall registry key UninstallString
    $us = (Get-ChildItem -Path HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall, HKLM:\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall | Get-ItemProperty | Where-Object { $_.DisplayName -like '*Teams*'}).UninstallString
    if ($us.Length -gt 0) {
        $us = ($us.Replace('/I', '/uninstall ') + ' /quiet').Replace('  ', ' ')
        $FilePath = ($us.Substring(0, $us.IndexOf('.exe') + 4).Trim())
        $ProcessArgs = ($us.Substring($us.IndexOf('.exe') + 5).Trim().replace('  ', ' '))
        $proc = Start-Process -FilePath $FilePath -Args $ProcessArgs -PassThru
        $proc.WaitForExit()
    }
}
function Invoke-UnselectApplicationAll {
    <#

    .SYNOPSIS
        This function Unelect all MS APPX
    #>

    $DblSelectPanel = $psform.FindName("SetDebloat")
    $DblSelectPanel.Children.Clear()
    $checkedCheckboxes = $DblGetPanel.Children
    $wpf_ToggleXboxPreset.IsChecked = $false
    foreach ($app in $checkedCheckboxes) {
        $app.IsChecked = $false
    }
    $wpf_DblSelected.Content = "Selected: 0 of $($matchingMsAppx.Count)"
}

################################################################################################################
###                                                                                                          ###
###                                      INFO: OPTIMIZATION FUNCTIONS                                        ###
###                                                                                                          ###
################################################################################################################

function Set-RegistryValue {
    <#

    .SYNOPSIS
        Modifies the registry based on the given inputs

    .PARAMETER Name
        The name of the key to modify

    .PARAMETER Path
        The path to the key

    .PARAMETER Type
        The type of value to set the key to

    .PARAMETER Value
        The value to set the key to

    .EXAMPLE
        Set-RegistryValue -Name "PublishUserActivities" -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\System" -Type "DWord" -Value "0"

    #>
    param (
        $Name,
        $Path,
        $Type,
        $Value
    )

    try {
        if(!(Test-Path 'HKU:\')) {New-PSDrive -PSProvider Registry -Name HKU -Root HKEY_USERS}

        If (!(Test-Path $Path)) {
            Write-Host "$Path was not found, Creating..."
            New-Item -Path $Path -Force -ErrorAction Stop | Out-Null
        }

        if ($Value -ne "<RemoveEntry>") {
            Write-Host "Set $Path\$Name to $Value"
            Set-ItemProperty -Path $Path -Name $Name -Type $Type -Value $Value -Force -ErrorAction Stop | Out-Null
        }
        else{
            Write-Host "Remove $Path\$Name"
            Remove-ItemProperty -Path $Path -Name $Name -Force -ErrorAction Stop | Out-Null
        }
    } catch [System.Security.SecurityException] {
        Write-Warning "Unable to set $Path\$Name to $Value due to a Security Exception"
    } catch [System.Management.Automation.ItemNotFoundException] {
        Write-Warning $psitem.Exception.ErrorRecord
    } catch [System.UnauthorizedAccessException] {
        Write-Warning $psitem.Exception.Message
    } catch {
        Write-Warning "Unable to set $Name due to unhandled exception"
        Write-Warning $psitem.Exception.StackTrace
    }
}
function Set-ScheduledTask {
    <#

    .SYNOPSIS
        Disables the provided Scheduled Task

    .PARAMETER Name
        The path to the Scheduled Task

    .PARAMETER State
        The State to set the Task to

    .EXAMPLE
        Set-ScheduledTask -Name "Microsoft\Windows\Application Experience\Microsoft Compatibility Appraiser" -State "Disabled"

    #>
    param (
        $Name,
        $State
    )

    try {
        if($State -eq "Disabled") {
            Write-Host "Disabling Scheduled Task $Name"
            Disable-ScheduledTask -TaskName $Name -ErrorAction Stop
        }
        if($State -eq "Enabled") {
            Write-Host "Enabling Scheduled Task $Name"
            Enable-ScheduledTask -TaskName $Name -ErrorAction Stop
        }
    } catch [System.Exception] {
        if($psitem.Exception.Message -like "*The system cannot find the file specified*") {
            Write-Warning "Scheduled Task $name was not Found"
        } else {
            Write-Warning "Unable to set $Name due to unhandled exception"
            Write-Warning $psitem.Exception.Message
        }
    } catch {
        Write-Warning "Unable to run script for $name due to unhandled exception"
        Write-Warning $psitem.Exception.StackTrace
    }
}
function Get-ToggleStatus {
    <#
    .SYNOPSIS
        Initializes ToggleButtons based on registry or DefaultState.
    .OUTPUTS
        Boolean
    #>

    # Loop all tweak entries
    foreach ($key in $sync.configs.tweaks.PSObject.Properties.Name) {
        $entry = $sync.configs.tweaks.$key
        if ($entry.Type -ne "Toggle") { continue }

        $control = $psform.FindName($key)
        if (-not $control -or $control -isnot [System.Windows.Controls.Primitives.ToggleButton]) { continue }

        $isChecked = $null  # Start as null to distinguish "unset"

        if ($entry.registry -and $entry.registry.Count -gt 0) {
            foreach ($regEntry in $entry.registry) {
                try {
                    if (-not (Test-Path $regEntry.Path)) { New-Item -Path $regEntry.Path -Force | Out-Null }
                    $regValue = (Get-ItemProperty -Path $regEntry.Path -ErrorAction SilentlyContinue).$($regEntry.Name)

                    if ($regValue -eq $regEntry.Value) { $isChecked = $true }
                    elseif ($regValue -eq $regEntry.OriginalValue) { $isChecked = $false }

                    # If $isChecked is set, stop checking further
                    if ($isChecked -ne $null) { break }
                } catch { }
            }
        }

        # If still null, fallback to DefaultState
        if ($isChecked -eq $null -and $entry.registry -and $entry.registry[0].PSObject.Properties.Name -contains "DefaultState") {
            $defaultState = $entry.registry[0].DefaultState
            $isChecked = ($defaultState -eq $true -or $defaultState -eq "true")
        }

        # Ensure a boolean value
        $control.IsChecked = [bool]$isChecked
        # Write-Host "Set '$key' toggle to $($control.IsChecked)" -ForegroundColor Green
    }
}

Get-ToggleStatus
function Invoke-OptimizationButton {
    <#
    .SYNOPSIS
        Applies all selected CheckBox tweaks dynamically and resets their state.
    #>

    # Loop through all tweaks
    foreach ($toggleName in $sync.configs.tweaks.PSObject.Properties.Name) {
        $tweak = $sync.configs.tweaks.$toggleName

        $apply = $false

        switch ($tweak.Type) {
            "ScheduledTask" {
                $apply = $true
            }
            "CheckBox" {
                $controlVar = Get-Variable -Name "wpf_$toggleName" -ErrorAction SilentlyContinue
                if ($controlVar) {
                    $apply = [bool]$controlVar.Value.IsChecked
                } elseif ($tweak.DefaultState) {
                    $apply = [bool]$tweak.DefaultState
                }
            }
            "InvokeScript" {
                $apply = $true
            }
        }

        # Apply registry changes if available and checkbox is checked
        if ($apply) {
            if ($tweak.ScheduledTask) {
                Write-Host "ScheduledTask: Disabling" $tweak.message -ForegroundColor Yellow
                foreach ($task in $tweak.ScheduledTask) {
                    try {
                        Set-ScheduledTask -Name $task.Name -State $task.State
                    } catch {
                        Write-Warning "Failed to set scheduled task '$($task.Name)' to $($task.State): $_"
                    }
                }
            }

            if ($tweak.Registry) {
                Write-Host "Registry: Disabling" $tweak.message -ForegroundColor Green
                foreach ($regEntry in $tweak.Registry) {
                    try { 
                        Set-RegistryValue -Path $regEntry.Path -Name $regEntry.Name -Type $regEntry.Type -Value $regEntry.Value }
                    catch { 
                        Write-Warning "Failed to apply registry tweak: $_" }
                }
            }
            if ($tweak.InvokeScript) {
                Write-Host "InvokeScript: Disabling" $tweak.message -ForegroundColor Cyan
                foreach ($script in $tweak.InvokeScript) {
                    Invoke-Scripts -Name $tweak.Content -Script $script
                }
            }
            if ($tweak.service) {
                Write-Host "Service: Disabling" $tweak.message -ForegroundColor Magenta
                foreach ($service in $tweak.service) {
                    try {
                        Set-WinService -Name $service.Name -StartupType $service.StartupType
                    } catch {
                        Write-Warning "Failed to set service '$($service.Name)' to $($service.StartupType): $_"
                    }
                }
            }
        }

    }

    Invoke-MessageBox -msg "tweak"
}
function Invoke-OptimizationUndo {
    <#
    .SYNOPSIS
        Undo all selected CheckBox tweaks dynamically and resets their state.
    #>

    # Loop through all tweaks
    foreach ($toggleName in $sync.configs.tweaks.PSObject.Properties.Name) {
        $tweak = $sync.configs.tweaks.$toggleName

        $apply = $false

        switch ($tweak.Type) {
            "ScheduledTask" {
                $apply = $true
            }
            "CheckBox" {
                $controlVar = Get-Variable -Name "wpf_$toggleName" -ErrorAction SilentlyContinue
                if ($controlVar) {
                    $apply = [bool]$controlVar.Value.IsChecked
                } elseif ($tweak.DefaultState) {
                    $apply = [bool]$tweak.DefaultState
                }
            }
            "UndoScript" {
                $apply = $true
            }
        }

        # Apply registry changes if available and checkbox is checked
        if ($apply) {
            if ($tweak.ScheduledTask) {
                Write-Host "ScheduledTask: Enabling" $tweak.message -ForegroundColor Yellow
                foreach ($task in $tweak.ScheduledTask) {
                    try {
                        Set-ScheduledTask -Name $task.Name -State $task.OriginalState
                    } catch {
                        Write-Warning "Failed to set scheduled task '$($task.Name)' to $($task.OriginalState): $_"
                    }
                }
            }

            if ($tweak.Registry) {
                Write-Host "Registry: Enabling" $tweak.message -ForegroundColor Green
                foreach ($regEntry in $tweak.Registry) {
                    try { 
                        Set-RegistryValue -Path $regEntry.Path -Name $regEntry.Name -Type $regEntry.Type -Value $regEntry.OriginalValue }
                    catch { 
                        Write-Warning "Failed to apply registry tweak: $_" }
                }
            }
            if ($tweak.UndoScript) {
                Write-Host "UndoScript: Enabling" $tweak.message -ForegroundColor Cyan
                foreach ($script in $tweak.UndoScript) {
                    Invoke-Scripts -Name $tweak.Content -Script $script
                }
            }
            if ($tweak.service) {
                Write-Host "Service: Enabling" $tweak.message -ForegroundColor Magenta
                foreach ($service in $tweak.service) {
                    try {
                        Set-WinService -Name $service.Name -StartupType $service.OriginalType
                    } catch {
                        Write-Warning "Failed to set service '$($service.Name)' to $($service.OriginalType): $_"
                    }
                }
            }
        }

    }

    Invoke-MessageBox -msg "undotweak"
}
function Invoke-ToggleFastPreset {
    param(
        [switch]$IsChecked  # Optional: allows forcing check/uncheck
    )

    $tweak = $sync.configs.preset.fastPresetButton
    # Write-Host "Found $($tweak.Count) checkboxes: $($tweak -join ', ')"

    # Determine the toggle state for Fast Preset
    $IsChecked = if ($PSBoundParameters.ContainsKey('IsChecked')) { $IsChecked } else { $wpf_fastPresetButton.IsChecked }
    
    # Enable/disable the mega preset button depending on state
    $wpf_megaPresetButton.IsEnabled = -not $IsChecked
    $styleName = ('ToggleSwitchStyleDisabled', 'ToggleSwitchStylePurple')[[int](-not $IsChecked)]
    $styleResource = $wpf_megaPresetButton.TryFindResource($styleName)
    if ($styleResource -and $styleResource.TargetType -eq [System.Windows.Controls.Primitives.ToggleButton]) {
        $wpf_megaPresetButton.Style = $styleResource
    } else {
        Write-Warning "Style '$styleName' not found or incompatible with ToggleButton."
    }


    # Find the tab containing the checkboxes
    $tabItemName = "Tab4"
    $tabItem = $psform.FindName($tabItemName)

    if ($tabItem -eq $null) {
        Write-Host "TabItem '$tabItemName' not found"
        return
    }

    $checkBoxes = $tweak | ForEach-Object { $tabItem.FindName($_) }

    # Set all checkboxes to the same state as Fast Preset
    foreach ($checkBox in $checkBoxes) {
        if ($checkBox -ne $null) {
            $checkBox.IsChecked = $IsChecked
        } else {
            # Write-Warning "Checkbox '$_' not found in Tab4"
        }
    }

    # Log status
    if ($IsChecked) { 
        Write-Host "Enabling Fast Preset" -ForegroundColor Green 
    } else { 
        Write-Host "Disabling Fast Preset" -ForegroundColor Red 
    }
}
function Invoke-ToggleMegaPreset {
    param(
        [switch]$IsChecked  # Optional: allows forcing check/uncheck
    )

    $tweak = $sync.configs.preset.megaPresetButton
    # Write-Host "Found $($tweak.Count) checkboxes: $($tweak -join ', ')"

    # Determine the toggle state for Mega Preset
    $IsChecked = if ($PSBoundParameters.ContainsKey('IsChecked')) { $IsChecked } else { $wpf_megaPresetButton.IsChecked }
    
    # Enable/disable the fast preset button depending on state
    $wpf_fastPresetButton.IsEnabled = -not $IsChecked
    $styleName = ('ToggleSwitchStyleDisabled', 'ToggleSwitchStyleGreen')[[int](-not $IsChecked)]
    $styleResource = $wpf_fastPresetButton.TryFindResource($styleName)
    if ($styleResource -and $styleResource.TargetType -eq [System.Windows.Controls.Primitives.ToggleButton]) {
        $wpf_fastPresetButton.Style = $styleResource
    } else {
        Write-Warning "Style '$styleName' not found or incompatible with ToggleButton."
    }

    # Find the tab containing the checkboxes
    $tabItemName = "Tab4"
    $tabItem = $psform.FindName($tabItemName)

    if ($tabItem -eq $null) {
        Write-Host "TabItem '$tabItemName' not found"
        return
    }

    $checkBoxes = $tweak | ForEach-Object { $tabItem.FindName($_) }

    # Set all checkboxes to the same state as Mega Preset
    foreach ($checkBox in $checkBoxes) {
        if ($checkBox -ne $null) {
            $checkBox.IsChecked = $IsChecked
        } else {
            # Write-Warning "Checkbox '$_' not found in Tab4"
        }
    }

    # Log status
    if ($IsChecked) { 
        Write-Host "Enabling Mega Preset" -ForegroundColor Green 
    } else { 
        Write-Host "Disabling Mega Preset" -ForegroundColor Red 
    }
}
function Invoke-TweakPS7{
        <#
    .SYNOPSIS
        This will edit the config file of the Windows Terminal Replacing the Powershell 5 to Powershell 7 and install Powershell 7 if necessary
    .PARAMETER action
        PS7:           Configures Powershell 7 to be the default Terminal
        PS5:           Configures Powershell 5 to be the default Terminal
    #>
    param (
        [ValidateSet("PS7", "PS5")]
        [string]$action
    )

    switch ($action) {
        "PS7"{
            if (Test-Path -Path "$env:ProgramFiles\PowerShell\7") {
                Write-Host "Powershell 7 is already installed."
            } else {
                Write-Host "Installing Powershell 7..."
                # Start-Process -FilePath winget -ArgumentList "install --id 'Microsoft.PowerShell' -e --accept-source-agreements --accept-package-agreements --disable-interactivity --silent" -NoNewWindow -Wait
                Install-ProgramWinget -Action Install -Programs @("Microsoft.PowerShell")
            }
            $targetTerminalName = "PowerShell"
        }
        "PS5"{
            $targetTerminalName = "Windows PowerShell"
        }
    }
    # Check if the Windows Terminal is installed and return if not (Prerequisite for the following code)
    if (-not (Get-Command "wt" -ErrorAction SilentlyContinue)) {
        Write-Host "Windows Terminal not installed. Skipping Terminal preference"
        return
    }
    # Check if the Windows Terminal settings.json file exists and return if not (Prereqisite for the following code)
    $settingsPath = "$env:LOCALAPPDATA\Packages\Microsoft.WindowsTerminal_8wekyb3d8bbwe\LocalState\settings.json"
    if (-not (Test-Path -Path $settingsPath)) {
        Write-Host "Windows Terminal Settings file not found at $settingsPath"
        return
    }

    Write-Host "Settings file found."
    $settingsContent = Get-Content -Path $settingsPath | ConvertFrom-Json
    $ps7Profile = $settingsContent.profiles.list | Where-Object { $_.name -eq $targetTerminalName }
    if ($ps7Profile) {
        $settingsContent.defaultProfile = $ps7Profile.guid
        $updatedSettings = $settingsContent | ConvertTo-Json -Depth 100
        Set-Content -Path $settingsPath -Value $updatedSettings
        Write-Host "Default profile updated to " -NoNewline
        Write-Host "$targetTerminalName " -ForegroundColor White -NoNewline
        Write-Host "using the name attribute."
    } else {
        Write-Host "No PowerShell 7 profile found in Windows Terminal settings using the name attribute."
    }
}
Function Invoke-UltimatePerformance {
    <#

    .SYNOPSIS
        Enables or disables the Ultimate Performance power scheme based on its GUID.

    .PARAMETER State
        Specifies whether to "Enable" or "Disable" the Ultimate Performance power scheme.

    #>
    param(
        [Parameter(Mandatory = $true)]
        [ValidateSet("Enable", "Disable")]
        [string]$State
    )

    try {
        # GUID of the Ultimate Performance power plan
        $ultimateGUID = "e9a42b02-d5df-448d-aa00-03f14749eb61"

        switch ($State) {
            "Enable" {
                # Duplicate the Ultimate Performance power plan using its GUID
                $duplicateOutput = powercfg /duplicatescheme $ultimateGUID

                $guid = $null
                $nameFromFile = "Vuk1lis - Ultimate Power Plan"
                $description = "Ultimate Power Plan, added via Win11deb"

                # Extract the new GUID from the duplicateOutput
                foreach ($line in $duplicateOutput) {
                    if ($line -match "\b[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\b") {
                        $guid = $matches[0]  # $matches[0] will contain the first match, which is the GUID
                        Write-Output "GUID: $guid has been extracted and stored in the variable."
                        break
                    }
                }

                if (-not $guid) {
                    Write-Output "No GUID found in the duplicateOutput. Check the output format."
                    exit 1
                }

                # Change the name of the power plan and set its description
                $changeNameOutput = powercfg /changename $guid "$nameFromFile" "$description"
                Write-Output "The power plan name and description have been changed. Output:"
                Write-Output $changeNameOutput

                # Set the duplicated Ultimate Performance plan as active
                $setActiveOutput = powercfg /setactive $guid
                Write-Output "The power plan has been set as active. Output:"
                Write-Output $setActiveOutput

                Write-Host "> Ultimate Performance plan installed and set as active."
            }
            "Disable" {
                # Check if the Ultimate Performance plan is installed by GUID
                $installedPlan = powercfg -list | Select-String -Pattern "Vuk1lis - Ultimate Power Plan"

                if ($installedPlan) {
                    # Extract the GUID of the installed Ultimate Performance plan
                    $ultimatePlanGUID = $installedPlan.Line.Split()[3]

                    # Set a different power plan as active before deleting the Ultimate Performance plan
                    $balancedPlanGUID = "381b4222-f694-41f0-9685-ff5bb260df2e"
                    powercfg -setactive $balancedPlanGUID

                    # Delete the Ultimate Performance plan by GUID
                    powercfg -delete $ultimatePlanGUID

                    Write-Host "Ultimate Performance plan has been uninstalled."
                    Write-Host "> Balanced plan is now active."
                } else {
                    Write-Host "Ultimate Performance plan is not installed."
                }
            }
            default {
                Write-Host "Invalid state. Please use 'Enable' or 'Disable'."
            }
        }
    } catch {
        Write-Error "Error occurred: $_"
    }
}

################################################################################################################
###                                                                                                          ###
###                                          INFO: SERVICE FUNCTIONS                                         ###
###                                                                                                          ###
################################################################################################################

Get-Service -ErrorAction SilentlyContinue | ForEach-Object {[void]$wpf_ddlServices.Items.Add($_.Name)}
function Get-Services {
    <#

    .SYNOPSIS
        Function to get all services and their information 
    #>

    $ServiceName = $wpf_ddlServices.SelectedItem
    # Use Get-WmiObject to retrieve service information
    $serviceInfo = Get-WmiObject -Class Win32_Service -Filter "Name = '$ServiceName'"
    # Use Get-Service to retrieve service information
    $serviceDetails = Get-Service -Name $ServiceName -ErrorAction SilentlyContinue | Select-Object *
    # Use Display service information from Get-Service if available, otherwise fallback to WMI
    $wpf_lblName.Content = if ($serviceDetails.DisplayName) { $serviceDetails.DisplayName } else { $serviceInfo.Name }
    $wpf_lblStatus.Content = if ($serviceDetails.Status) { $serviceDetails.Status } else { $serviceInfo.State }
    $wpf_lblStartupType.Content = if ($serviceDetails.StartupType) { $serviceDetails.StartupType } else { $serviceInfo.StartMode }
    $wpf_lblServicesDesc.Text = if ($serviceDetails.Description) { $serviceDetails.Description } else { $serviceInfo.Description }


    ### status color
    $wpf_lblStatus.Foreground = switch ($wpf_lblStatus.Content) {
        'Stopped' {'red'} 
        'Paused' {'yellow'} 
        default {'green'}
    }
    ### type color
    $wpf_lblStartupType.Foreground = switch ($wpf_lblStartupType.Content) {
        'Manual' {'yellow'} 
        'Automatic' {'blue'} 
        default {'red'}
    }
}
function Invoke-gaming{
    <#

    .SYNOPSIS
        Set all services to gaming mode 
    #>

    # Set-Presets "gaming"
    $services_m = @(
        "BcastDVRUserService_48486de"                  # GameDVR and Broadcast is used for Game Recordings and Live Broadcasts
        "Browser"                                      # Let users browse and locate shared resources in neighboring computers
        "BthAvctpSvc"                                  # AVCTP service (needed for Bluetooth Audio Devices or Wireless Headphones)
        "CaptureService_48486de"                       # Optional screen capture functionality for applications that call the Windows.Graphics.Capture API.
        "cbdhsvc_48486de"                              # Clipboard Service
        "edgeupdate"                                   # Edge Update Service
        "edgeupdatem"                                  # Another Update Service
        "FontCache"                                    # Windows font cache
        "gupdate"                                      # Google Update
        "gupdatem"                                     # Another Google Update Service
        "lmhosts"                                      # TCP/IP NetBIOS Helper
        "MicrosoftEdgeElevationService"                # Another Edge Update Service
        "MSDTC"                                        # Distributed Transaction Coordinator
        "NahimicService"                               # Nahimic Service
        "PerfHost"                                     # Remote users and 64-bit processes to query performance.
        "QWAVE"                                        # Quality Windows Audio Video Experience (audio and video might sound worse)
        "RtkBtManServ"                                 # Realtek Bluetooth Device Manager Service
        "SharedAccess"                                 # Internet Connection Sharing (ICS)
        "ssh-agent"                                    # OpenSSH Authentication Agent
        "TrkWks"                                       # Distributed Link Tracking Client
        "WMPNetworkSvc"                                # Windows Media Player Network Sharing Service
        "WPDBusEnum"                                   # Portable Device Enumerator Service
        "WpnService"                                   # WpnService (Push Notifications may not work)
        "WSearch"                                      # Windows Search
        "XblAuthManager"                               # Xbox Live Auth Manager (Disabling Breaks Xbox Live Games)
        "XblGameSave"                                  # Xbox Live Game Save Service (Disabling Breaks Xbox Live Games)
        "XboxNetApiSvc"                                # Xbox Live Networking Service (Disabling Breaks Xbox Live Games)
        "XboxGipSvc"                                   # Xbox Accessory Management Service
        "HPAppHelperCap"
        "HPDiagsCap"
        "HPNetworkCap"
        "HPSysInfoCap"
        "HpTouchpointAnalyticsService"
        "HvHost"
        "vmicguestinterface"
        "vmicheartbeat"
        "vmickvpexchange"
        "vmicrdv"
        "vmicshutdown"
        "vmictimesync"
        "vmicvmsession"
    )

    foreach ($service in $services_m) {
        # -ErrorAction SilentlyContinue is so it doesn't write an error to stdout if a service doesn't exist
        Write-Host "Setting $service StartupType to Manual" -ForegroundColor Yellow
        Get-Service -Name $service -ErrorAction SilentlyContinue | Set-Service -StartupType Manual -ErrorAction SilentlyContinue
    }

    $services_d = @(
        "ALG"                                          # Application Layer Gateway Service(Provides support for 3rd party protocol plug-ins for Internet Connection Sharing)
        "AJRouter"                                     # Needed for AllJoyn Router Service
        "tzautoupdate"                                 # DialogBlockingService
        "CertPropSvc"                                  # Certificate Propagation
        "DusmSvc"                                      # Data Usage
        "DialogBlockingService"                        # DialogBlockingService
        "DiagTrack"                                    # Diagnostics Tracking Service
        "diagnosticshub.standardcollector.service"     # Microsoft (R) Diagnostics Hub Standard Collector Service
        "dmwappushservice"                             # WAP Push Message Routing Service
        "DPS"                                          # Diagnostic Policy Service (Detects and Troubleshoots Potential Problems)
        "Fax"                                          # Fax Service
        "fhsvc"                                        # Fax History
        "AppVClient"                                   # Microsoft App-V Client
        "MapsBroker"                                   # Downloaded Maps Manager
        "MsKeyboardFilter"                             # Microsoft Keyboard Filter
        "uhssvc"                                       # Microsoft Update Health
        "NcbService"                                   # Network Connection Broker (allow Windows Store Apps to receive notifications from the internet)
        "NetTcpPortSharing"                            # Net.Tcp Port Sharing Service
        "PcaSvc"                                       # Program Compatibility Assistant Service
        "PhoneSvc"                                     # Phone Service(Manages the telephony state on the device)
        "PrintNotify"                                  # Windows printer notifications and extentions
        "RemoteRegistry"                               # Remote Registry
        "RemoteAccess"                                 # Routing and Remote Access
        "RetailDemo"                                   # Demo Mode for Store Display
        "shpamsvc"                                     # Shared PC Account Manager
        "ScDeviceEnum"                                 # Smart Card Device Enumeration
        "SCPolicySvc"                                  # Smart Card Removal Policy
        "SEMgrSvc"                                     # Payments and NFC/SE Manager (Manages payments and Near Field Communication (NFC) based secure elements)
        "seclogon"                                     # Secondary Logon (Disables other credentials only password will work)
        "stisvc"                                       # Windows Image Acquisition (WIA)
        "Spooler"                                      # Print Spooler
        "SCardSvr"                                     # Windows Smart Card Service
        "SysMain"                                      # Analyses System Usage and Improves Performance
        "UevAgentService"                              # User Experience Virtualization Service
        "lfsvc"                                        # Geolocation Service
        "icssvc"                                       # Windows Mobile Hotspot Service 
        "iphlpsvc"                                     # IP Helper
        "WpcMonSvc"                                    # Parental Controls
        "WerSvc"                                       # Windows error reporting
        "WbioSrvc"                                     # Windows Biometric Service
        "wisvc"                                        # Windows Insider program(Windows Insider will not work if Disabled)
    )

    foreach ($service in $services_d) {
        # -ErrorAction SilentlyContinue is so it doesn't write an error to stdout if a service doesn't exist
        Write-Host "Setting $service StartupType to Disabled" -ForegroundColor Red
        Get-Service -Name $service -ErrorAction SilentlyContinue | Set-Service -StartupType Disabled -ErrorAction SilentlyContinue
    }
    Art -artN "
=======================================
----- Services set to Gaming Mode -----
=======================================
" -ch Cyan
    Invoke-MessageBox "tweak"
}
function Invoke-normal{
    <#

    .SYNOPSIS
        Set all services to default 
    #>

    #Set-Presets "normal"
    cmd /c services.msc
    Invoke-MessageBox "tweak"
}
function Invoke-recommended{
    <#

    .SYNOPSIS
        Set all services to manual startup 
    #>

    # Set-Presets "recommended"
    $services = @(
        "ALG"                                          # Application Layer Gateway Service(Provides support for 3rd party protocol plug-ins for Internet Connection Sharing)
        "AJRouter"                                     # Needed for AllJoyn Router Service
        "BcastDVRUserService_48486de"                  # GameDVR and Broadcast is used for Game Recordings and Live Broadcasts
        "Browser"                                      # Let users browse and locate shared resources in neighboring computers
        "BthAvctpSvc"                                  # AVCTP service (needed for Bluetooth Audio Devices or Wireless Headphones)
        "CaptureService_48486de"                       # Optional screen capture functionality for applications that call the Windows.Graphics.Capture API.
        "cbdhsvc_48486de"                              # Clipboard Service
        "diagnosticshub.standardcollector.service"     # Microsoft (R) Diagnostics Hub Standard Collector Service
        "DiagTrack"                                    # Diagnostics Tracking Service
        "dmwappushservice"                             # WAP Push Message Routing Service
        "DPS"                                          # Diagnostic Policy Service (Detects and Troubleshoots Potential Problems)
        "edgeupdate"                                   # Edge Update Service
        "edgeupdatem"                                  # Another Update Service
        "Fax"                                          # Fax Service
        "fhsvc"                                        # Fax History
        "FontCache"                                    # Windows font cache
        "gupdate"                                      # Google Update
        "gupdatem"                                     # Another Google Update Service
        "lfsvc"                                        # Geolocation Service
        "lmhosts"                                      # TCP/IP NetBIOS Helper
        "MapsBroker"                                   # Downloaded Maps Manager
        "MicrosoftEdgeElevationService"                # Another Edge Update Service
        "MSDTC"                                        # Distributed Transaction Coordinator
        "NahimicService"                               # Nahimic Service
        "NetTcpPortSharing"                            # Net.Tcp Port Sharing Service
        "PcaSvc"                                       # Program Compatibility Assistant Service
        "PerfHost"                                     # Remote users and 64-bit processes to query performance.
        "PhoneSvc"                                     # Phone Service(Manages the telephony state on the device)
        "PrintNotify"                                  # Windows printer notifications and extentions
        "QWAVE"                                        # Quality Windows Audio Video Experience (audio and video might sound worse)
        "RemoteAccess"                                 # Routing and Remote Access
        "RemoteRegistry"                               # Remote Registry
        "RetailDemo"                                   # Demo Mode for Store Display
        "RtkBtManServ"                                 # Realtek Bluetooth Device Manager Service
        "SCardSvr"                                     # Windows Smart Card Service
        "seclogon"                                     # Secondary Logon (Disables other credentials only password will work)
        "SEMgrSvc"                                     # Payments and NFC/SE Manager (Manages payments and Near Field Communication (NFC) based secure elements)
        "SharedAccess"                                 # Internet Connection Sharing (ICS)
        "ssh-agent"                                    # OpenSSH Authentication Agent
        "stisvc"                                       # Windows Image Acquisition (WIA)
        "SysMain"                                      # Analyses System Usage and Improves Performance
        "TrkWks"                                       # Distributed Link Tracking Client
        "WerSvc"                                       # Windows error reporting
        "wisvc"                                        # Windows Insider program(Windows Insider will not work if Disabled)
        "WMPNetworkSvc"                                # Windows Media Player Network Sharing Service
        "WpcMonSvc"                                    # Parental Controls
        "WPDBusEnum"                                   # Portable Device Enumerator Service
        "WpnService"                                   # WpnService (Push Notifications may not work)
        "WSearch"                                      # Windows Search
        "XblAuthManager"                               # Xbox Live Auth Manager (Disabling Breaks Xbox Live Games)
        "XblGameSave"                                  # Xbox Live Game Save Service (Disabling Breaks Xbox Live Games)
        "XboxNetApiSvc"                                # Xbox Live Networking Service (Disabling Breaks Xbox Live Games)
        "XboxGipSvc"                                   # Xbox Accessory Management Service
        "HPAppHelperCap"
        "HPDiagsCap"
        "HPNetworkCap"
        "HPSysInfoCap"
        "HpTouchpointAnalyticsService"
        "HvHost"
        "vmicguestinterface"
        "vmicheartbeat"
        "vmickvpexchange"
        "vmicrdv"
        "vmicshutdown"
        "vmictimesync"
        "vmicvmsession"
    )
    
    foreach ($service in $services) {
        # -ErrorAction SilentlyContinue is so it doesn't write an error to stdout if a service doesn't exist
        Write-Host "Setting $service StartupType to Manual" -ForegroundColor Yellow
        Get-Service -Name $service -ErrorAction SilentlyContinue | Set-Service -StartupType Manual -ErrorAction SilentlyContinue
    }
    Art -artN "
======================================
-- Services set to Recommended Mode --
======================================
" -ch Cyan
    Invoke-MessageBox "tweak"
}

################################################################################################################
###                                                                                                          ###
###                                          INFO: UPDATES FUNCTIONS                                         ###
###                                                                                                          ###
################################################################################################################

function Invoke-FixesUpdate{
    <#

    .SYNOPSIS
        Reset Windows Update Script - reregister dlls, services, and remove registry entires.
    #>

    Write-Host "1. Stopping Windows Update Services..."
    Stop-Service -Name BITS
    Stop-Service -Name wuauserv
    Stop-Service -Name appidsvc
    Stop-Service -Name cryptsvc
    Write-Host "2. Remove QMGR Data file..."
        Remove-Item "$env:allusersprofile\Application Data\Microsoft\Network\Downloader\qmgr*.dat" -ErrorAction SilentlyContinue

    Write-Host "3. Renaming the Software Distribution and CatRoot Folder..."
        Rename-Item $env:systemroot\SoftwareDistribution SoftwareDistribution.bak -ErrorAction SilentlyContinue
        Rename-Item $env:systemroot\System32\Catroot2 catroot2.bak -ErrorAction SilentlyContinue

    Write-Host "4. Removing old Windows Update log..."
        Remove-Item $env:systemroot\WindowsUpdate.log -ErrorAction SilentlyContinue

    Write-Host "5. Resetting the Windows Update Services to default settings..."
        Start-Process -NoNewWindow -FilePath "sc.exe" -ArgumentList "sdset", "bits", "D:(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)(A;;CCLCSWLOCRRC;;;AU)(A;;CCLCSWRPWPDTLOCRRC;;;PU)"
        Start-Process -NoNewWindow -FilePath "sc.exe" -ArgumentList "sdset", "wuauserv", "D:(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)(A;;CCLCSWLOCRRC;;;AU)(A;;CCLCSWRPWPDTLOCRRC;;;PU)"
        Set-Location $env:systemroot\system32

    Write-Host "6. Registering some DLLs..."
    $DLLs = @(
        "atl.dll", "urlmon.dll", "mshtml.dll", "shdocvw.dll", "browseui.dll",
        "jscript.dll", "vbscript.dll", "scrrun.dll", "msxml.dll", "msxml3.dll",
        "msxml6.dll", "actxprxy.dll", "softpub.dll", "wintrust.dll", "dssenh.dll",
        "rsaenh.dll", "gpkcsp.dll", "sccbase.dll", "slbcsp.dll", "cryptdlg.dll",
        "oleaut32.dll", "ole32.dll", "shell32.dll", "initpki.dll", "wuapi.dll",
        "wuaueng.dll", "wuaueng1.dll", "wucltui.dll", "wups.dll", "wups2.dll",
        "wuweb.dll", "qmgr.dll", "qmgrprxy.dll", "wucltux.dll", "muweb.dll", "wuwebv.dll"
    )
    foreach ($dll in $DLLs) {
        Start-Process -NoNewWindow -FilePath "regsvr32.exe" -ArgumentList "/s", $dll
    }

    Write-Host "7) Removing WSUS client settings..."
    if (Test-Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate") {
        Start-Process -NoNewWindow -FilePath "REG" -ArgumentList "DELETE", "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate", "/v", "AccountDomainSid", "/f"
        Start-Process -NoNewWindow -FilePath "REG" -ArgumentList "DELETE", "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate", "/v", "PingID", "/f"
        Start-Process -NoNewWindow -FilePath "REG" -ArgumentList "DELETE", "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate", "/v", "SusClientId", "/f"
    }

    Write-Host "8) Resetting the WinSock..."
        Start-Process -NoNewWindow -FilePath "netsh" -ArgumentList "winsock", "reset"
        Start-Process -NoNewWindow -FilePath "netsh" -ArgumentList "winhttp", "reset", "proxy"
        Start-Process -NoNewWindow -FilePath "netsh" -ArgumentList "int", "ip", "reset"

    Write-Host "9) Delete all BITS jobs..."
        Get-BitsTransfer | Remove-BitsTransfer

    Write-Host "10) Attempting to install the Windows Update Agent..."
    If ([System.Environment]::Is64BitOperatingSystem) {
        Start-Process -NoNewWindow -FilePath "wusa" -ArgumentList "Windows8-RT-KB2937636-x64", "/quiet"
    }
    else {
        Start-Process -NoNewWindow -FilePath "wusa" -ArgumentList "Windows8-RT-KB2937636-x86", "/quiet"
    }

    Write-Host "11) Starting Windows Update Services..."
        Start-Service -Name BITS
        Start-Service -Name wuauserv
        Start-Service -Name appidsvc
        Start-Service -Name cryptsvc

    Write-Host "12) Forcing discovery..."
    Start-Process -NoNewWindow -FilePath "wuauclt" -ArgumentList "/resetauthorization", "/detectnow"


    Write-Host "Process complete. Please reboot your computer."

    Art -artN "
    ===============================================
-- Reset All Windows Update Settings to Stock --
===============================================
" -ch DarkGreen
    Invoke-MessageBox -msg "updateFix"
}
function Invoke-PauseUpdate {
    <#

    .SYNOPSIS
        Pause Windows Update up to 35 days or 5 weeks.
    #>

    Write-Host "Pausing Windows Update for 5 weeks..." -ForegroundColor Green

    $pause = (Get-Date).AddDays(35)
    $pause = $pause.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
    #Write-Host $pause
    $pause_start = (Get-Date)
    $pause_start = $pause_start.ToUniversalTime().ToString( "yyyy-MM-ddTHH:mm:ssZ" )
    set-itemproperty -path 'hklm:\software\microsoft\windowsupdate\ux\settings' -name 'pauseupdatesexpirytime' -value $pause                                                                                        
    set-itemproperty -path 'hklm:\software\microsoft\windowsupdate\ux\settings' -name 'pausefeatureupdatesstarttime' -value $pause_start
    set-itemproperty -path 'hklm:\software\microsoft\windowsupdate\ux\settings' -name 'pausefeatureupdatesendtime' -value $pause
    set-itemproperty -path 'hklm:\software\microsoft\windowsupdate\ux\settings' -name 'pausequalityupdatesstarttime' -value $pause_start
    set-itemproperty -path 'hklm:\software\microsoft\windowsupdate\ux\settings' -name 'pausequalityupdatesendtime' -value $pause
    set-itemproperty -path 'hklm:\software\microsoft\windowsupdate\ux\settings' -name 'pauseupdatesstarttime' -value $pause_start
    new-item -path 'hklm:\software\policies\microsoft\windows\windowsupdate\au' -force
    new-itemproperty -path  'hklm:\software\policies\microsoft\windows\windowsupdate\au' -name 'noautoupdate' -propertytype dword -value 1  
    
    $pauseDateOnly = (Get-Date).AddDays(35)
    $pauseDateOnly = $pauseDateOnly.ToUniversalTime().ToString("yyyy-MM-dd")

    Art -artN "
======================================
-- Updates paused until $pauseDateOnly --
======================================
" -ch DarkGreen
    Invoke-MessageBox -msg "updatePause" 
}
function Invoke-UpdatesDefault{
    <#

    .SYNOPSIS
        Resets Windows Update settings to default
    #>

    If (!(Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU")) {
        New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" -Force | Out-Null
    }
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" -Name "NoAutoUpdate" -Type DWord -Value 0
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" -Name "AUOptions" -Type DWord -Value 3
    If (!(Test-Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\DeliveryOptimization\Config")) {
        New-Item -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\DeliveryOptimization\Config" -Force | Out-Null
    }
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\DeliveryOptimization\Config" -Name "DODownloadMode" -Type DWord -Value 1
    
    $services = @(
        "BITS"
        "wuauserv"
    )

    foreach ($service in $services) {
        # -ErrorAction SilentlyContinue is so it doesn't write an error to stdout if a service doesn't exist

        Write-Host "Setting $service StartupType to Automatic"
        Get-Service -Name $service -ErrorAction SilentlyContinue | Set-Service -StartupType Automatic
    }
    Write-Host "Enabling driver offering through Windows Update..."
    Remove-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Device Metadata" -Name "PreventDeviceMetadataFromNetwork" -ErrorAction SilentlyContinue
    Remove-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\DriverSearching" -Name "DontPromptForWindowsUpdate" -ErrorAction SilentlyContinue
    Remove-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\DriverSearching" -Name "DontSearchWindowsUpdate" -ErrorAction SilentlyContinue
    Remove-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\DriverSearching" -Name "DriverUpdateWizardWuSearchEnabled" -ErrorAction SilentlyContinue
    Remove-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" -Name "ExcludeWUDriversInQualityUpdate" -ErrorAction SilentlyContinue
    Write-Host "Enabling Windows Update automatic restart..."
    Remove-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" -Name "NoAutoRebootWithLoggedOnUsers" -ErrorAction SilentlyContinue
    Remove-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" -Name "AUPowerManagement" -ErrorAction SilentlyContinue
    Write-Host "Enabled driver offering through Windows Update"
    Remove-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\WindowsUpdate\UX\Settings" -Name "BranchReadinessLevel" -ErrorAction SilentlyContinue
    Remove-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\WindowsUpdate\UX\Settings" -Name "DeferFeatureUpdatesPeriodInDays" -ErrorAction SilentlyContinue
    Remove-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\WindowsUpdate\UX\Settings" -Name "DeferQualityUpdatesPeriodInDays " -ErrorAction SilentlyContinue
    Art -artN "
==================================
----- Updates Set to Default -----
==================================
" -ch Cyan
    Invoke-MessageBox -msg "updateDefault"
}
function Invoke-UpdatesDisable{
    <#

    .SYNOPSIS
        Disable Windows Update
    
    .NOTES
        Disabling Windows Update is not recommended.
    #>

    If (!(Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU")) {
        New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" -Force | Out-Null
    }
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" -Name "NoAutoUpdate" -Type DWord -Value 1
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" -Name "AUOptions" -Type DWord -Value 1
    If (!(Test-Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\DeliveryOptimization\Config")) {
        New-Item -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\DeliveryOptimization\Config" -Force | Out-Null
    }
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\DeliveryOptimization\Config" -Name "DODownloadMode" -Type DWord -Value 0

    $services = @(
        "BITS"
        "wuauserv"
    )

    foreach ($service in $services) {
        # -ErrorAction SilentlyContinue is so it doesn't write an error to stdout if a service doesn't exist

        Write-Host "Setting $service StartupType to Disabled"
        Get-Service -Name $service -ErrorAction SilentlyContinue | Set-Service -StartupType Disabled
    }
    Art -artN "
==================================
------ Updates ARE DISABLED ------
==================================
" -ch DarkRed
    Invoke-MessageBox -msg "updateDisabled"
}
function Invoke-UpdatesSecurity{
    <#

    .SYNOPSIS
        Set Windows Update to security
    
    .DESCRIPTION
        1. Disables driver offering through Windows Update
        2. Disables Windows Update automatic restart
        3. Sets Windows Update to Semi-Annual Channel (Targeted)
        4. Defers feature updates for 365 days
        5. Defers quality updates for 4 days
        
    #>

    Write-Host "Disabling driver offering through Windows Update..."
    If (!(Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Device Metadata")) {
        New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Device Metadata" -Force | Out-Null
    }
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Device Metadata" -Name "PreventDeviceMetadataFromNetwork" -Type DWord -Value 1
    If (!(Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\DriverSearching")) {
        New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\DriverSearching" -Force | Out-Null
    }
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\DriverSearching" -Name "DontPromptForWindowsUpdate" -Type DWord -Value 1
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\DriverSearching" -Name "DontSearchWindowsUpdate" -Type DWord -Value 1
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\DriverSearching" -Name "DriverUpdateWizardWuSearchEnabled" -Type DWord -Value 0
    If (!(Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate")) {
        New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" | Out-Null
    }
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" -Name "ExcludeWUDriversInQualityUpdate" -Type DWord -Value 1
    Write-Host "Disabling Windows Update automatic restart..."
    If (!(Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU")) {
        New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" -Force | Out-Null
    }
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" -Name "NoAutoRebootWithLoggedOnUsers" -Type DWord -Value 1
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" -Name "AUPowerManagement" -Type DWord -Value 0
    Write-Host "Disabled driver offering through Windows Update"
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\WindowsUpdate\UX\Settings" -Name "BranchReadinessLevel" -Type DWord -Value 20
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\WindowsUpdate\UX\Settings" -Name "DeferFeatureUpdatesPeriodInDays" -Type DWord -Value 365
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\WindowsUpdate\UX\Settings" -Name "DeferQualityUpdatesPeriodInDays " -Type DWord -Value 4

    Art -artN "
==================================
--- Updates Set to Recommended ---
==================================
" -ch Cyan
    Invoke-MessageBox -msg "updateSecurity"
}

################################################################################################################
###                                                                                                          ###
###                                           INFO: CONFIG FUNCTIONS                                         ###
###                                                                                                          ###
################################################################################################################

function Invoke-FixADB {
    <#

    .SYNOPSIS
        This script will find install location of ADB and set environment. 
    #>

    #[Environment]::SetEnvironmentVariable('PATH', ([Environment]::GetEnvironmentVariable('PATH', [System.EnvironmentVariableTarget]::User) + ';C:\Users\winget\Packages\Google.PlatformTools_Microsoft.Winget.Source_8wekyb3d8bbwe\platform-tools'), [System.EnvironmentVariableTarget]::User)

    $filePath = "$env:LOCALAPPDATA\Packages\Microsoft.DesktopAppInstaller_8wekyb3d8bbwe\LocalState\settings.json"
    $jsonContent = Get-Content -Path $filePath | Out-String
    $jsonObject = ConvertFrom-Json $jsonContent
    if ($jsonObject.installBehavior.PSObject.Properties.Name -contains 'portablePackageUserRoot') {
        $portablePackageUserRoot = $jsonObject.installBehavior.portablePackageUserRoot -replace '/', '\'
        #Write-Output "portablePackageUserRoot: $portablePackageUserRoot"
        $targetPath = "$portablePackageUserRoot\Google.PlatformTools_Microsoft.Winget.Source_8wekyb3d8bbwe\platform-tools"
    } else {
        $targetPath = "%LOCALAPPDATA%\Microsoft\WinGet\Packages\Google.PlatformTools_Microsoft.Winget.Source_8wekyb3d8bbwe\platform-tools"
        #Write-Output "portablePackageUserRoot property does not exist in the JSON file."
    }

    $userPath = [Environment]::GetEnvironmentVariable('PATH', [System.EnvironmentVariableTarget]::User)

    # Check if the path is already in the user's PATH
    if ($userPath -notlike "*$targetPath*") {
        # Append the path to the end if it doesn't exist
        [Environment]::SetEnvironmentVariable('PATH', "$userPath;$targetPath", [System.EnvironmentVariableTarget]::User)
        #Write-Host "Path added to the user's PATH variable." -ForegroundColor Green
        Art -artN "
=============================================
-- Path added to the user's PATH variable. --
=============================================
" -ch DarkGreen
    } else {
        #Write-Host "Path is already present in the user's PATH variable." -ForegroundColor Magenta
        Art -artN "
==========================================================
-- Path is already present in the user's PATH variable. --
==========================================================
" -ch Magenta
    }
    
    Invoke-MessageBox -msg "tweak"
    
}
function Set-WingetConfig {
    <#

    .SYNOPSIS
        This function will setup winget configuration. 
    #>

    $jsonContent = @'
{
    "$schema": "https://aka.ms/winget-settings.schema.json",
    "visual": {
        "progressBar": "rainbow"
    },
    "installBehavior": {
        "preferences": {
            "locale": [ "en-US" ]
        },
        "portablePackageUserRoot": "C:/Users/winget/Packages",
        "portablePackageMachineRoot": "C:/Program Files/winget/Packages"
    },
    "telemetry": {
        "disable": true
    },
    "logging": {
        "level": "error"
    }
}
'@

    $filePath = "$env:LOCALAPPDATA\Packages\Microsoft.DesktopAppInstaller_8wekyb3d8bbwe\LocalState\settings.json"
    $jsonContent | Set-Content -Path $filePath
    Art -artN "
====================================
-- WinGet settings are configured --
====================================
" -ch DarkGreen
    Invoke-MessageBox -msg "tweak"
}
function Invoke-ActivateWindows {
    <#
        .DESCRIPTION
        Run Microsoft Activation Scripts (MAS) script 
    #>
    Start-Process powershell -ArgumentList "-NoProfile -ExecutionPolicy Bypass -Command irm https://massgrave.dev/get | iex" -Verb RunAs
}

function Invoke-Configs {
    <#
    .DESCRIPTION
    Simple Switch for lagacy windows
#>
param($Panel)

switch ($Panel){
    "wpf_PanelControl"              {cmd /c control}
    "wpf_PanelPnF"                  {cmd /c appwiz.cpl}
    "wpf_PanelNetwork"              {cmd /c ncpa.cpl}
    "wpf_PanelPower"                {cmd /c powercfg.cpl}
    "wpf_PanelSound"                {cmd /c mmsys.cpl}
    "wpf_PanelSystem"               {cmd /c sysdm.cpl}
    "wpf_PanelUser"                 {cmd /c "control userpasswords2"}
    "wpf_PanelServices"             {cmd /c services.msc}
    "wpf_PanelWindowsFirewall"      {cmd /c firewall.cpl}
    "wpf_PanelDeviceManager"        {cmd /c devmgmt.msc}
    "wpf_PanelExplorerOption"       {cmd /c control folders}
    "wpf_PanelRegedit"              {cmd /c regedit}
    "wpf_PanelScheduler"            {cmd /c taskschd.msc}
    "wpf_PanelResourceMonitor"      {cmd /c resmon}
    "wpf_PanelSysConf"              {cmd /c msconfig}
    "wpf_PanelEvent"                {cmd /c taskschd.msc}
    "wpf_PanelSysInfo"              {cmd /c msinfo32}
    "wpf_PanelDiskManagement"       {cmd /c diskmgmt.msc}
    "wpf_PanelRegion"               {cmd /c intl.cpl}
}
}
function Invoke-FeatureInstall {
    <#
    .DESCRIPTION
    GUI Function to install Windows Features
    #>
    If ( $wpf_FeaturesDotnet.IsChecked -eq $true ) {
        Enable-WindowsOptionalFeature -Online -FeatureName "NetFx4-AdvSrvs" -All -NoRestart
        Enable-WindowsOptionalFeature -Online -FeatureName "NetFx3" -All -NoRestart
    }
    If ( $wpf_FeaturesHyperv.IsChecked -eq $true ) {
        Enable-WindowsOptionalFeature -Online -FeatureName "HypervisorPlatform" -All -NoRestart
        Enable-WindowsOptionalFeature -Online -FeatureName "Microsoft-Hyper-V-All" -All -NoRestart
        Enable-WindowsOptionalFeature -Online -FeatureName "Microsoft-Hyper-V" -All -NoRestart
        Enable-WindowsOptionalFeature -Online -FeatureName "Microsoft-Hyper-V-Tools-All" -All -NoRestart
        Enable-WindowsOptionalFeature -Online -FeatureName "Microsoft-Hyper-V-Management-PowerShell" -All -NoRestart
        Enable-WindowsOptionalFeature -Online -FeatureName "Microsoft-Hyper-V-Hypervisor" -All -NoRestart
        Enable-WindowsOptionalFeature -Online -FeatureName "Microsoft-Hyper-V-Services" -All -NoRestart
        Enable-WindowsOptionalFeature -Online -FeatureName "Microsoft-Hyper-V-Management-Clients" -All -NoRestart
        cmd /c bcdedit /set hypervisorschedulertype classic
        Write-Host "HyperV is now installed and configured. Please Reboot before using."
    }
    If ( $wpf_FeaturesLegacymedia.IsChecked -eq $true ) {
        Enable-WindowsOptionalFeature -Online -FeatureName "WindowsMediaPlayer" -All -NoRestart
        Enable-WindowsOptionalFeature -Online -FeatureName "MediaPlayback" -All -NoRestart
        Enable-WindowsOptionalFeature -Online -FeatureName "DirectPlay" -All -NoRestart
        Enable-WindowsOptionalFeature -Online -FeatureName "LegacyComponents" -All -NoRestart
    }
    If ( $wpf_FeatureWsl.IsChecked -eq $true ) {
        Enable-WindowsOptionalFeature -Online -FeatureName "VirtualMachinePlatform" -All -NoRestart
        Enable-WindowsOptionalFeature -Online -FeatureName "Microsoft-Windows-Subsystem-Linux" -All -NoRestart
        Write-Host "WSL is now installed and configured. Please Reboot before using."
    }
    If ( $wpf_FeatureNfs.IsChecked -eq $true ) {
        Enable-WindowsOptionalFeature -Online -FeatureName "ServicesForNFS-ClientOnly" -All -NoRestart
        Enable-WindowsOptionalFeature -Online -FeatureName "ClientForNFS-Infrastructure" -All -NoRestart
        Enable-WindowsOptionalFeature -Online -FeatureName "NFS-Administration" -All -NoRestart
        nfsadmin client stop
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\ClientForNFS\CurrentVersion\Default" -Name "AnonymousUID" -Type DWord -Value 0
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\ClientForNFS\CurrentVersion\Default" -Name "AnonymousGID" -Type DWord -Value 0
        nfsadmin client start
        nfsadmin client localhost config fileaccess=755 SecFlavors=+sys -krb5 -krb5i
        Write-Host "NFS is now setup for user based NFS mounts"
    }

    Write-Host "================================="
    Write-Host "---  Features are Installed   ---"
    Write-Host "================================="

    Invoke-MessageBox -msg "feature"
}
function Invoke-FixesNetwork {
    <#

    .SYNOPSIS
        Resets various network configurations
    #>

    Write-Host "Resetting Network with netsh" -ForegroundColor Green

    # Reset WinSock catalog to a clean state
    Start-Process -NoNewWindow -FilePath "netsh" -ArgumentList "winsock", "reset"
    # Resets WinHTTP proxy setting to DIRECT
    Start-Process -NoNewWindow -FilePath "netsh" -ArgumentList "winhttp", "reset", "proxy"
    # Removes all user configured IP settings
    Start-Process -NoNewWindow -FilePath "netsh" -ArgumentList "int", "ip", "reset"

    Write-Host "Process complete. Please reboot your computer." -ForegroundColor Green

    Art -artN "
===============================================
-- Network Configuration has been Reset --
===============================================
" -ch DarkGreen
    Invoke-MessageBox -msg "networkReset"
}
function Invoke-FixesSound {
    <#

    .SYNOPSIS
        Reset sound service. 
    #>

    Restart-Service -Name "Audiosrv" -Force -Confirm:$false
    Write-Host "Windows Audio Service restarted successfully."
    Art -artN "
==================================================
-- Windows Audio Service restarted successfully --
==================================================
" -ch DarkGreen
    Invoke-MessageBox -msg "soundReset"
}
function Invoke-PanelAutologin {
    <#
        .DESCRIPTION
        PlaceHolder
    #>
    curl.exe -ss "https://live.sysinternals.com/Autologon.exe" -o $env:temp\autologin.exe # Official Microsoft recommendation https://learn.microsoft.com/en-us/sysinternals/downloads/autologon
    cmd /c $env:temp\autologin.exe
}
function Invoke-RegistryBackup {
    <#

    .SYNOPSIS
        Creating a backup registry. 
    #>

    Art -artN "
============================================================
== Backup might take some time - approximation 30 seconds ==
============================================================
" -ch DarkGreen

    Add-Type -AssemblyName System.Windows.Forms
    $FileBrowser = New-Object System.Windows.Forms.SaveFileDialog
    $FileBrowser.Title = "Save Registry Backup"
    $FileBrowser.Filter = "Registry files (*.reg)|*.reg"
    $FileBrowser.DefaultExt = "reg"
    $FileBrowser.AddExtension = $true
    $FileBrowser.InitialDirectory = [Environment]::GetFolderPath("Desktop")

    $DialogResult = $FileBrowser.ShowDialog()

    if ($DialogResult -eq [System.Windows.Forms.DialogResult]::OK) {
        $FilePath = $FileBrowser.FileName
        $TempFilePath = [System.IO.Path]::GetTempFileName()
        $RegistryRoots = @("HKEY_CURRENT_USER", "HKEY_LOCAL_MACHINE", "HKEY_CURRENT_CONFIG")

        foreach ($Root in $RegistryRoots) {
            reg export $Root $TempFilePath /y
            Get-Content -Path $TempFilePath | Out-File -Append -FilePath $FilePath
        }
        Remove-Item -Path $TempFilePath

        Art -artN "
==========================================
== Backup registry created successfully ==
== Location: $FilePath ==
==========================================
" -ch DarkGreen

    Invoke-MessageBox -msg "backup"
    } else {
        Art -artN "
======================================
== Operation cancelled by the user. ==
======================================
" -ch DarkRed
    }
}

function Invoke-ShortcutApp {
    <#

    .SYNOPSIS
        Creates a shortcut and prompts for a save location

    .PARAMETER ShortcutToAdd
        The name of the shortcut to add

    #>
    param($ShortcutToAdd)

        $iconPath = $null
        Switch ($ShortcutToAdd) {
        "Win11Deb" {
            $SourceExe = "$env:SystemRoot\System32\WindowsPowerShell\v1.0\powershell.exe"
            $IRM = 'irm https://dub.sh/win11deb | iex'
            $Powershell = '-NoProfile -ExecutionPolicy Bypass'
            $ArgumentsToSourceExe = "$powershell $IRM"
            $DestinationName = "Win11Deb.lnk"
            
            $downloadUrl = "https://raw.githubusercontent.com/vukilis/Windows11-Optimizer-Debloater/dev/icon.ico"
            $destinationPath = "$env:SystempRoot\win11deb.ico"

            # Check if the file already exists
            if (-not (Test-Path -Path "$env:SystempRoot\win11deb.ico")) {
                # File does not exist, download it
                Invoke-WebRequest -Uri $downloadUrl -OutFile $destinationPath
                Write-Host "File downloaded to: $destinationPath" -ForegroundColor Green
            } else {
                Write-Host "File already exists at: $destinationPath" -ForegroundColor Magenta
            }     
            $iconPath = "$env:SystempRoot\win11deb.ico"
        }
    }

    $FileBrowser = New-Object System.Windows.Forms.SaveFileDialog
    $FileBrowser.InitialDirectory = [Environment]::GetFolderPath('Desktop')
    $FileBrowser.Filter = "Shortcut Files (*.lnk)|*.lnk"
    $FileBrowser.FileName = $DestinationName
    $DialogResult = $FileBrowser.ShowDialog()

    if ($DialogResult -eq [System.Windows.Forms.DialogResult]::OK) {
        $WshShell = New-Object -comObject WScript.Shell
        $Shortcut = $WshShell.CreateShortcut($FileBrowser.FileName)
        $Shortcut.TargetPath = $SourceExe
        $Shortcut.Arguments = $ArgumentsToSourceExe
        if ($null -ne $iconPath) {
            $shortcut.IconLocation = $iconPath
        }
        $Shortcut.Save()

        $bytes = [System.IO.File]::ReadAllBytes($($FileBrowser.FileName))
        $bytes[0x15] = $bytes[0x15] -bor 0x20 #set byte 21 (0x15) bit 6 (0x20) ON
        [System.IO.File]::WriteAllBytes("$($FileBrowser.FileName)", $bytes)

        Art -artN "
Shortcut for $ShortcutToAdd has been saved to $($FileBrowser.FileName)
" -ch DarkGreen

    Invoke-MessageBox -msg "shortcut"
    }else {
        Art -artN "
======================================
== Operation cancelled by the user. ==
======================================
" -ch DarkRed
    }
}

################################################################################################################
###                                                                                                          ###
###                                       INFO: SETUP BACKGROUND CONFIG                                      ###
###                                                                                                          ###
################################################################################################################

$psVersion = $PSVersionTable.PSVersion
if ($psVersion.Major -eq 7 -and $psVersion.Minor -ge 1) {
    Write-Host "You are running PowerShell version 7.1 or higher." -ForegroundColor Green
    Get-Author7
} elseif ($psVersion.Major -eq 5 -and $psVersion.Minor -eq 1) {
    Write-Host "You are running PowerShell version 5.1." -ForegroundColor Blue
    Get-Author5
} else {
    Write-Host "You are running a different version of PowerShell. Versions from 1.0 to 5.0 not supported!" -ForegroundColor Red
}

if (-not ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
    Write-Host "################################################################################################" -ForegroundColor Red
    Write-Host "Not running as administrator. Please run the script as an administrator!" -ForegroundColor Red
    Write-Host "If you continue to use as non-admin user, it will result to script creates unexpected behaviour!" -ForegroundColor Red
    Write-Host "################################################################################################" -ForegroundColor Red

    $wpf_ElevatorStatus.Visibility = "Visible"
    $wpf_ElevatorStatus.Background = "red"
    $wpf_ElevatorMode.Content = "Not running as administrator. Please run the script as an administrator!!!"
} 

$wpf_diskNameInfo.Add_SelectionChanged({Get-DiskInfo})
$wpf_diskName.Add_SelectionChanged({Get-DiskSize})
$wpf_ddlServices.Add_SelectionChanged({Get-Services})

# Check if the window is already opened or not
if ($psform.IsVisible -eq $false -or $psform.IsLoaded -eq $false) {
    $psform.ShowDialog() | Out-Null
} else {
    Write-Host "The window is already open and cannot be shown again."
}

Stop-Transcript
