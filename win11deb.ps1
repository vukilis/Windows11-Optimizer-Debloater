
################################################################################################################
###                                                                                                          ###
### WARNING: This file is automatically generated DO NOT modify this file directly as it will be overwritten ###
###                                                                                                          ###
################################################################################################################

<#
.NOTES
    Author         : Vuk1lis
    Website        : https://vukilis.com
    GitHub         : https://github.com/vukilis
    Name:          : Windows11 Optimizer&Debloater
    Version        : 3.1
#>

Add-Type -AssemblyName PresentationFramework

Start-Transcript $ENV:TEMP\win11deb.log -Append
$xamlFile="C:\Users\vukilis\Desktop\Windows11-Optimizer-Debloater\xaml\MainWindow.xaml" #uncomment for development
$inputXAML=Get-Content -Path $xamlFile -Raw #uncomment for development
# $inputXAML = (new-object Net.WebClient).DownloadString("https://raw.githubusercontent.com/vukilis/Windows11-Optimizer-Debloater/main/xaml/MainWindow.xaml") #uncomment for Production
$inputXAML=$inputXAML -replace 'mc:Ignorable="d"', '' -replace 'x:N', "N" -replace '^<Win.*', '<Window'

[void][System.Reflection.Assembly]::LoadWithPartialName('presentationframework')
[XML]$XAML=$inputXAML

[void] [System.Reflection.Assembly]::LoadWithPartialName("System.Drawing") 
[void] [System.Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms") 

$reader = New-Object System.Xml.XmlNodeReader $XAML
try {
    $psform=[Windows.Markup.XamlReader]::Load($reader)
}
catch [System.Management.Automation.MethodInvocationException] {
    Write-Warning "We ran into a problem with the XAML code.  Check the syntax for this control..."
    write-host $error[0].Exception.Message -ForegroundColor Red
    If ($error[0].Exception.Message -like "*button*") {
        write-warning "Ensure your &lt;button in the `$inputXML does NOT have a Click=ButtonClick property.  PS can't handle this`n`n`n`n"
    }
}
catch {
    ### If it broke some other way <img draggable="false" role="img" class="emoji" alt="??" src="https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/svg/1f600.svg">
    Write-Host "Unable to load Windows.Markup.XamlReader. Double-check syntax and ensure .net is installed."
}

$xaml.SelectNodes("//*[@Name]") | ForEach-Object {
    try {
        Set-Variable -Name "wpf_$($_.Name)" -Value $psform.FindName($_.Name) -ErrorAction Stop
    }
    catch {
        throw
    }
}

$wpf_AppVersion.Content = "Version: 3.1 - 03.08.2025"

function Invoke-CloseButton {
    <#
    .SYNOPSIS
        Close application

    .PARAMETER Button
    #>

    $psform.Close()
    Write-Host "Goodbye! :)" -ForegroundColor Red
}
function Invoke-MinButton {
    <#
    .SYNOPSIS
        Minimize application

    .PARAMETER Button
    #>

    $psform.WindowState = 'Minimized'
    #Write-Host "Minimize!"
}
function Invoke-MaxButton {
    <#
    .SYNOPSIS
        Maximize application
    #>

    if ($psform.WindowState -eq 'Normal')
    {
        $psform.WindowState = 'Maximized'
        $maxMargin = New-Object Windows.Thickness -ArgumentList 5, 5, 5, 5
        $wpf_MainGrid.Margin = $maxMargin
    }
    else
    {
        $psform.WindowState = 'Normal'
        $maxMargin = New-Object Windows.Thickness -ArgumentList 0, 0, 0, 0
        $wpf_MainGrid.Margin = $maxMargin
    }
}

function Invoke-BuyMeACoffee {
    <#
    .SYNOPSIS
        Open BuyMeACoffe link

    .PARAMETER Button
    #>

    Start-Process "https://buymeacoffee.com/vukilis"
}

function Invoke-BuyMeAKofi {
    <#
    .SYNOPSIS
        Open BuyMeAKofi link

    .PARAMETER Button
    #>

    Start-Process "https://ko-fi.com/vukilis"
}

$dragging = $false
$psform.Add_MouseLeftButtonDown({
    $dragging = $true
    $psform.DragMove()
})

$psform.Add_MouseLeftButtonUp({
    $dragging = $false
})

$psform.Add_MouseMove({
    if ($dragging) {
        $screenHeight = [Windows.SystemParameters]::PrimaryScreenHeight
        $mousePosition = [Windows.Forms.Cursor]::Position

        $maximizeThreshold = 24

        if ($mousePosition.Y -lt $maximizeThreshold) {
            $psform.WindowState = 'Maximized'
            $maxMargin = New-Object Windows.Thickness -ArgumentList 5, 5, 5, 5
            $wpf_MainGrid.Margin = $maxMargin
        } 
    }
})

function Maximize-Window {
    <#
    .SYNOPSIS
        Maximize application handler
    #>
    if ($psform.WindowState -eq 'Normal')
    {
        $psform.WindowState = 'Maximized'
        $maxMargin = New-Object Windows.Thickness -ArgumentList 5, 5, 5, 5
        $wpf_MainGrid.Margin = $maxMargin
    }
    else
    {
        $psform.WindowState = 'Normal'
        $maxMargin = New-Object Windows.Thickness -ArgumentList 0, 0, 0, 0
        $wpf_MainGrid.Margin = $maxMargin
    }
}
function Handle-DoubleLeftClick {
    Write-Host "Double Left Clicked!"
}
$doubleLeftClickEvent = [System.Windows.Input.MouseButtonEventHandler]{
    <#
    .SYNOPSIS
        Maximize application when double right click 
    #>
    param(
        [object]$sender,
        [System.Windows.Input.MouseButtonEventArgs]$e
    )

    if ($e.ChangedButton -eq [System.Windows.Input.MouseButton]::Left -and $e.ClickCount -eq 2) {
        Maximize-Window
        #Handle-DoubleLeftClick
    }
}
$wpf_ControlPanel.Add_MouseLeftButtonDown($doubleLeftClickEvent)
$wpf_DockerPanel.Add_MouseLeftButtonDown($doubleLeftClickEvent)

function Invoke-AboutButton {
    <#
        .DESCRIPTION
        This function show and hide about page.
    #>
    $AboutButton = $psform.FindName("AboutButton")
    $aboutGrid = $psform.FindName("AboutGrid")
    
        if ($AboutButton.IsChecked) {
            $aboutGrid.Visibility = "Visible"
            $animation = New-Object Windows.Media.Animation.DoubleAnimation
            $animation.From = 0
            $animation.To = 607.663333333333
            $animation.Duration = [Windows.Duration]::new([TimeSpan]::FromSeconds(0.5))
            $aboutGrid.BeginAnimation([Windows.FrameworkElement]::WidthProperty, $animation)
        } else {
            $animation = New-Object Windows.Media.Animation.DoubleAnimation
            $animation.From = 607.663333333333
            $animation.To = 0
            $animation.Duration = [Windows.Duration]::new([TimeSpan]::FromSeconds(0.5))
            $aboutGrid.BeginAnimation([Windows.FrameworkElement]::WidthProperty, $animation)
            # $aboutGrid.Visibility = "Collapsed"
        }
}


$radioButtons = get-variable | Where-Object {$psitem.name -like "wpf_*" -and $psitem.value -ne $null -and $psitem.value.GetType().name -eq "RadioButton"}
foreach ($radioButton in $radioButtons){
    $radioButton.value.Add_Click({
        [System.Object]$Sender = $args[0]
        Invoke-Tabs "wpf_$($Sender.name)"
    })
}

$buttons = get-variable | Where-Object {$psitem.name -like "wpf_*" -and $psitem.value -ne $null -and $psitem.value.GetType().name -eq "Button"}
foreach ($button in $buttons){
    $button.value.Add_Click({
        [System.Object]$Sender = $args[0]
        Invoke-Button "wpf_$($Sender.name)"
    })
}

$toggleButtons = get-variable | Where-Object {$psitem.name -like "wpf_*" -and $psitem.value -ne $null -and $psitem.value.GetType().name -eq "ToggleButton"}
foreach ($btn in $toggleButtons) {
    $btn.Value.Add_Click({
        $Sender = $args[0]
        Invoke-ToggleButtons -toggle "wpf_$($Sender.Name)" -isChecked ([bool]$Sender.IsChecked)
    })
}

$checkbox = get-variable | Where-Object {$psitem.name -like "wpf_*" -and $psitem.value -ne $null -and $psitem.value.GetType().name -eq "CheckBox"}
foreach ($box in $checkbox){
    $box.value.Add_Click({
        [System.Object]$Sender = $args[0]
        Invoke-Checkbox "wpf_$($Sender.name)"
    })
}

# Load tweaks.json
$tweaksJsonPath = ".\config\tweaks.json"
$tweaks = Get-Content $tweaksJsonPath -Raw | ConvertFrom-Json

function Invoke-ToggleButtons {
    Param ([string]$ToggleButton, [bool]$isChecked)

    switch -Wildcard ($ToggleButton) {
        # Static / hard-coded buttons
        "wpf_AboutButton" { Invoke-AboutButton }
        "wpf_SettingsButton" { Invoke-SettingsButton }

        # Dynamic toggle buttons from JSON
        default {
            # Strip off "wpf_" prefix for JSON lookup
            $toggleName = $ToggleButton -replace '^wpf_', ''

            if ($tweaks.PSObject.Properties.Name -contains $toggleName) {
                $toggleEntry = $tweaks.$toggleName

                foreach ($regEntry in $toggleEntry.registry) {
                    $path = $regEntry.Path
                    $name = $regEntry.Name
                    $type = $regEntry.Type

                    if ($isChecked) {
                        $valueToSet = $regEntry.Value
                    } else {
                        $valueToSet = $regEntry.OriginalValue
                    }

                    # Write-Host "Setting registry $path\$name to $valueToSet"

                    try {
                        Set-RegistryValue -Path $path -Name $name -Type $type -Value $valueToSet

                    } catch {
                        # Write-Warning "Failed to set registry ${path}\${name}: $_"
                    }
                }
            }
            else {
                Write-Warning "No toggle matched for '$toggle'"
            }
        }
    }
}



# function Invoke-ToggleButtons {
#     Param (
#         [string]$toggle,
#         [bool]$isChecked
#     ) 

#     # Write-Host "Invoke-Toggle called with isChecked = '$isChecked'"

#     $toggleName = $toggle -replace '^wpf_', ''

#     if ($tweaks.PSObject.Properties.Name -contains $toggleName) {
#         $toggleEntry = $tweaks.$toggleName

#         foreach ($regEntry in $toggleEntry.registry) {
#             $path = $regEntry.Path
#             $name = $regEntry.Name
#             $type = $regEntry.Type

#             if ($isChecked) {
#                 $valueToSet = $regEntry.Value
#             } else {
#                 $valueToSet = $regEntry.OriginalValue
#             }

#             # Write-Host "Setting registry $path\$name to $valueToSet"

#             try {
#                 Set-RegistryValue -Path $path -Name $name -Type $type -Value $valueToSet -ErrorAction Stop

#             } catch {
#                 Write-Warning "Failed to set registry ${path}\${name}: $_"
#             }
#         }
#     }
#     else {
#         Write-Warning "No toggle matched for '$toggle'"
#     }
# }

# function Invoke-ToggleButtons {

#     <#
    
#         .DESCRIPTION
#         Meant to make creating ToggleButtons easier. There is a section below in the gui that will assign this function to every ToggleButton.
#         This way you can dictate what each ToggleButton does from this function. 
    
#         Input will be the name of the ToggleButton that is clicked. 
#     #>
    
#     Param ([string]$ToggleButton) 

#     Switch -Wildcard ($ToggleButton){
#         "wpf_AboutButton" {Invoke-AboutButton}
#     }
# }
function Invoke-Button {

    <#
    
        .DESCRIPTION
        Meant to make creating buttons easier. There is a section below in the gui that will assign this function to every button.
        This way you can dictate what each button does from this function. 
    
        Input will be the name of the button that is clicked. 
    #>
    
    Param ([string]$Button) 

    Switch -Wildcard ($Button){

        "wpf_Tab?BT" {Invoke-Tabs $Button}
        "wpf_CloseButton" {Invoke-CloseButton}
        "wpf_MinButton" {Invoke-MinButton}
        "wpf_MaxButton" {Invoke-MaxButton}
        "wpf_buymeacoffee" {Invoke-BuyMeACoffee}
        "wpf_buymeakofi" {Invoke-BuyMeAKofi}
        "wpf_SelectDebloat" {Invoke-SelectApplication}
        "wpf_SelectDebloatAll" {Invoke-SelectApplicationAll}
        "wpf_UnselectDebloatAll" {Invoke-UnselectApplicationAll}
        "wpf_UninstallDebloat" {Invoke-UninstallDebloat}
        # "wpf_debloatALL" {Invoke-debloatALL}
        # "wpf_debloatGaming" {Invoke-debloatGaming}
        "wpf_optimizationButton" {Invoke-optimizationButton}
        "wpf_recommended" {Invoke-recommended}
        "wpf_gaming" {Invoke-gaming}
        "wpf_normal" {Invoke-normal}
        "wpf_Updatesdefault" {Invoke-UpdatesDefault}
        "wpf_PauseUpdate" {Invoke-PauseUpdate}
        "wpf_FixesUpdate" {Invoke-FixesUpdate}
        "wpf_Updatesdisable" {Invoke-UpdatesDisable}
        "wpf_Updatessecurity" {Invoke-UpdatesSecurity}
        "wpf_PanelControl" {Invoke-Configs -Panel $button}
        "wpf_PanelPnF" {Invoke-Configs -Panel $button}
        "wpf_PanelNetwork" {Invoke-Configs -Panel $button}
        "wpf_PanelPower" {Invoke-Configs -Panel $button}
        "wpf_PanelSound" {Invoke-Configs -Panel $button}
        "wpf_PanelSystem" {Invoke-Configs -Panel $button}
        "wpf_PanelUser" {Invoke-Configs -Panel $button}
        "wpf_PanelServices" {Invoke-Configs -Panel $button}
        "wpf_PanelWindowsFirewall" {Invoke-Configs -Panel $button}
        "wpf_PanelDeviceManager" {Invoke-Configs -Panel $button}
        "wpf_PanelExplorerOption" {Invoke-Configs -Panel $button}
        "wpf_PanelRegedit" {Invoke-Configs -Panel $button}
        "wpf_PanelScheduler" {Invoke-Configs -Panel $button}
        "wpf_PanelResourceMonitor" {Invoke-Configs -Panel $button}
        "wpf_PanelSysConf" {Invoke-Configs -Panel $button}
        "wpf_PanelEvent" {Invoke-Configs -Panel $button}
        "wpf_PanelSysInfo" {Invoke-Configs -Panel $button}
        "wpf_PanelDiskManagement" {Invoke-Configs -Panel $button}
        "wpf_FeatureInstall" {Invoke-FeatureInstall}
        "wpf_PanelAutologin" {Invoke-PanelAutologin}
        "wpf_PanelRegion" {Invoke-Configs -Panel $button}
        "wpf_DblInstall" {Invoke-installButton}
        "wpf_DblGetInstalled" {Invoke-getInstallButton}
        "wpf_DblUninstall" {Invoke-UninstallButton}
        "wpf_DblUpgrade" {Invoke-UpgradeButton}
        "wpf_DblClearPrograms" {Invoke-ClearProgramsButton}
        "wpf_ResetButton" {Invoke-ResetButton}
        "wpf_DblChocoInstall" {Invoke-ChocoInstall}
        "wpf_DblChocoUpgrade" {Invoke-ChocoUpgrade}
        "wpf_DblChocoUninstall" {Invoke-ChocoUninstall}
        "wpf_DblWingetFix" {Invoke-FixesWinget}
        "wpf_DblMsStoreFix" {Invoke-MsStoreFix}
        "wpf_ShortcutApp" {Invoke-ShortcutApp -ShortcutToAdd "Win11Deb"}
        "wpf_FixesNetwork" {Invoke-FixesNetwork}
        "wpf_FixesSound" {Invoke-FixesSound}
        "wpf_RegistryBackup" {Invoke-RegistryBackup}
        "wpf_WingetConfig" {Set-WingetConfig}
        "wpf_FixesADB" {Invoke-FixADB}
        "wpf_ActivateWindows" {Invoke-ActivateWindows}
    }
}

function Invoke-Checkbox {
    <#
    
        .DESCRIPTION
        Meant to make creating checkboxes easier. There is a section below in the gui that will assign this function to every button.
        This way you can dictate what each checkbox does from this function. 
    
        Input will be the name of the checkbox that is clicked. 
    #>

    Param ([string]$checkbox) 

    Switch -Wildcard ($checkbox){
        "wpf_ToggleXboxPreset" {Invoke-ToggleXboxPreseta}
        "wpf_fastPresetButton" {Invoke-ToggleFastPreset}
        "wpf_megaPresetButton" {Invoke-ToggleMegaPreset}
        "wpf_ToggleLitePreset" {Invoke-ToggleLitePreset}
        "wpf_ToggleDevPreset" {Invoke-ToggleDevPreset}
        "wpf_ToggleGamingPreset" {Invoke-ToggleGamingPreset}
    }
}
################################
####  Navigation Controls  #####
################################
function Invoke-Tabs {

    <#
    
        .DESCRIPTION
        Sole purpose of this fuction reduce duplicated code for switching between tabs. 
    
    #>

    Param ($ClickedTab)
    $Tabs = Get-Variable wpf_Tab?BT
    $TabNav = Get-Variable wpf_TabNav
    $x = [int]($ClickedTab -replace "wpf_Tab","" -replace "BT","") - 1

    $TabSearchName = "Tab2"
    $TabSearchItem = $psform.FindName($TabSearchName)

    0..($Tabs.Count -1 ) | ForEach-Object {
        
        if ($x -eq $psitem){
            $TabNav.value.Items[$psitem].IsSelected = $true
        }
        else{
            $TabNav.value.Items[$psitem].IsSelected = $false
        }
    }

    $isVisible = if ($TabSearchItem.isSelected) {"Visible"} else {"Collapsed"}; $wpf_CheckboxFilter.Visibility = $isVisible; $wpf_ResetButton.Visibility = $isVisible
}
Invoke-Tabs "wpf_Tab1BT"

Function Get-Author7 {
    <#
        .SYNOPSIS
        This function will show basic information about author and app
        This is for powershell v7.1+
    #>
    
    #Clear-Host
    $colors = @("`e[38;5;200m", "`e[38;5;51m", "`e[38;5;98m")

    function Get-RandomColor {
        Get-Random -InputObject $colors
    }

    $text = @"
           __      __          _      __   _   _       
           \ \    / /         | |    /_ | | | (_)      
            \ \  / /   _   _  | | __  | | | |  _   ___ 
             \ \/ /   | | | | | |/ /  | | | | | | / __|
              \  /    | |_| | |   <   | | | | | | \__ \
               \/      \__,_| |_|\_\  |_| |_| |_| |___/
        
GitHub:                                 Website:
https://github.com/vukilis              https://vukilis.com

Name:                                   Version:
Windows11 Optimizer&Debloater           3.1    
"@
    $coloredText = $text.ToCharArray() | ForEach-Object {
        $randomColor = Get-RandomColor
        "$randomColor$_`e[0m"
    }
    Write-Output ($coloredText -join "")
    Write-Host "`n"
}

Function Get-Author5 {
    <#
        .SYNOPSIS
        This function will show basic information about author and app
        This is for powershell v5.1
    #>

    Clear-Host
    $colors = @("Red", "Cyan", "Magenta")

    function Get-RandomColor {
        Get-Random -InputObject $colors
    }

    $text = @"
           __      __          _      __   _   _       
           \ \    / /         | |    /_ | | | (_)      
            \ \  / /   _   _  | | __  | | | |  _   ___ 
             \ \/ /   | | | | | |/ /  | | | | | | / __|
              \  /    | |_| | |   <   | | | | | | \__ \
               \/      \__,_| |_|\_\  |_| |_| |_| |___/
        
GitHub:                                 Website:
https://github.com/vukilis              https://vukilis.com

Name:                                   Version:
Windows11 Optimizer&Debloater           3.1    
"@

    $coloredText = $text.ToCharArray() | ForEach-Object {
        $randomColor = Get-RandomColor
        Write-Host $_ -ForegroundColor $randomColor -NoNewline
    }

    Write-Host "`n"
}


function Art {
    <#
        .SYNOPSIS
        This function will show tweak message in console in different colors
    #>

    param (
        [string]$artN,
        [string]$ch = "White"
    )

    $artN | ForEach-Object {
        Write-Host $_ -NoNewline -ForegroundColor $ch
    }

    Write-Host "`n"
}

### Get all variables from form
# Get-Variable wpf_*
# Function to download a file

$downloadUrl = "https://raw.githubusercontent.com/vukilis/Windows11-Optimizer-Debloater/main/logo.png"
$destinationPath = Join-Path $env:TEMP "win11deb_logo.png"

# Check if the file already exists
if (-not (Test-Path $destinationPath)) {
    # File does not exist, download it
    $wc = New-Object System.Net.WebClient
    $wc.DownloadFile($downloadUrl, $destinationPath)
    Write-Host "File downloaded to: $destinationPath"
} else {
    Write-Output "File already exists at: $destinationPath"
}

################################################################################################################
###                                                                                                          ###
###                                         INFO: JSON CONFIGS                                               ###
###                                                                                                          ###
################################################################################################################

$programs = @('{"name":"Docker Desktop","winget":"Docker.DockerDesktop","id":"DblInstallDockerdesktop"}','{"name":"Git","winget":"Git.Git","id":"DblInstallGit"}','{"name":"Git Extensions","winget":"GitExtensionsTeam.GitExtensions","id":"DblInstallGitextensions"}','{"name":"GitHub Desktop","winget":"GitHub.GitHubDesktop","id":"DblInstallGithubdesktop"}','{"name":"Godot Engine","winget":"GodotEngine.GodotEngine","id":"DblInstallGodotEngine"}','{"name":"Go Programming Language","winget":"GoLang.Go","id":"DblInstallGolang"}','{"name":"HeidiSQL","winget":"HeidiSQL.HeidiSQL","id":"DblInstallHeidisql"}','{"name":"MySQL","winget":"Oracle.MySQL","id":"DblInstallMySQL"}','{"name":"Node.js","winget":"OpenJS.NodeJS","id":"DblInstallNodejs"}','{"name":"Node.js LTS","winget":"OpenJS.NodeJS.LTS","id":"DblInstallNodejslts"}','{"name":"Node Version Manager (NVM)","winget":"CoreyButler.NVMforWindows","id":"DblInstallNodemanager"}','{"name":"Java 8","winget":"EclipseAdoptium.Temurin.8.JRE","id":"DblInstallJava8"}','{"name":"Java 11","winget":"EclipseAdoptium.Temurin.11.JRE","id":"DblInstallJava11"}','{"name":"Java 17","winget":"EclipseAdoptium.Temurin.17.JRE","id":"DblInstallJava17"}','{"name":"Java 21","winget":"EclipseAdoptium.Temurin.21.JDK","id":"DblInstallJava21"}','{"name":"Oh My Posh","winget":"JanDeDobbeleer.OhMyPosh","id":"DblInstallOhmyposh"}','{"name":"Python 3","winget":"Python.Python.3.12","id":"DblInstallPython3"}','{"name":"Podman","winget":"RedHat.Podman","id":"DblInstallPodman"}','{"name":"Postman","winget":"Postman.Postman","id":"DblInstallPostman"}','{"name":"Ruby 3.2","winget":"RubyInstallerTeam.Ruby.3.2","id":"DblInstallRuby"}','{"name":"Rust","winget":"Rustlang.Rust.MSVC","id":"DblInstallRust"}','{"name":"SQLite","winget":"DBBrowserForSQLite.DBBrowserForSQLite","id":"DblInstallSQLite"}','{"name":"SQL Server 2022 Developer","winget":"Microsoft.SQLServer.2022.Developer","id":"DblInstallSQLServer2022"}','{"name":"Unity 2022","winget":"Unity.Unity.2022","id":"DblInstallUnity"}','{"name":"Vagrant","winget":"Hashicorp.Vagrant","id":"DblInstallVagrant"}','{"name":"Visual Studio 2022","winget":"Microsoft.VisualStudio.2022.Community","id":"DblInstallVisualstudio2022"}','{"name":"Visual Studio Code","winget":"Microsoft.VisualStudioCode","id":"DblInstallCode"}','{"name":".NET Core 3","winget":"Microsoft.DotNet.DesktopRuntime.3_1","id":"DblInstallDotnet3"}','{"name":".NET 5","winget":"Microsoft.DotNet.DesktopRuntime.5","id":"DblInstallDotnet5"}','{"name":".NET 6","winget":"Microsoft.DotNet.DesktopRuntime.6","id":"DblInstallDotnet6"}','{"name":".NET 7","winget":"Microsoft.DotNet.DesktopRuntime.7","id":"DblInstallDotnet7"}','{"name":".NET 8","winget":"Microsoft.DotNet.DesktopRuntime.8","id":"DblInstallDotnet8"}','{"name":"Autoruns","winget":"Microsoft.Sysinternals.Autoruns","id":"DblInstallAutoruns"}','{"name":"HxD Hex Editor","winget":"MHNexus.HxD","id":"DblInstallHxD"}','{"name":"PowerShell","winget":"Microsoft.PowerShell","id":"DblInstallPowershell"}','{"name":"PowerToys","winget":"Microsoft.PowerToys","id":"DblInstallPowertoys"}','{"name":"Process Explorer","winget":"Microsoft.Sysinternals.ProcessExplorer","id":"DblInstallProcessExplorer"}','{"name":"Visual 2015 Redistributable (64-bit)","winget":"Microsoft.VCRedist.2015+.x64","id":"DblInstallvc2015_64"}','{"name":"Visual 2015 Redistributable (32-bit)","winget":"Microsoft.VCRedist.2015+.x86","id":"DblInstallvc2015_32"}','{"name":"Windows Terminal","winget":"Microsoft.WindowsTerminal","id":"DblInstallTerminal"}','{"name":"Brave","winget":"Brave.Brave","id":"DblInstallBrave"}','{"name":"Google Chrome","winget":"Google.Chrome","id":"DblInstallChrome"}','{"name":"Chromium","winget":"eloston.ungoogled-chromium","id":"DblInstallChromium"}','{"name":"Mozilla Firefox","winget":"Mozilla.Firefox","id":"DblInstallFirefox"}','{"name":"Mullvad","winget":"MullvadVPN.MullvadBrowser","id":"DblInstallMullvad"}','{"name":"Thorium","winget":"Alex313031.Thorium","id":"DblInstallThorium"}','{"name":"Thorium AVX2","winget":"Alex313031.Thorium.AVX2","id":"DblInstallThoriumAVX"}','{"name":"Tor Browser","winget":"TorProject.TorBrowser","id":"DblInstallTor"}','{"name":"Librewolf","winget":"Librewolf.Librewolf","id":"DblInstallLibrewolf"}','{"name":"Floorp","winget":"Ablaze.Floorp","id":"DblInstallFloorp"}','{"name":"Ungoogled","winget":"eloston.ungoogled-chromium","id":"DblInstallUngoogled"}','{"name":"Vivaldi","winget":"VivaldiTechnologies.Vivaldi","id":"DblInstallVivaldi"}','{"name":"Waterfox","winget":"Waterfox.Waterfox","id":"DblInstallWaterfox"}','{"name":"Discord","winget":"Discord.Discord","id":"DblInstallDiscord"}','{"name":"Element (Matrix)","winget":"Element.Element","id":"DblInstallMatrix"}','{"name":"Skype","winget":"Microsoft.Skype","id":"DblInstallSkype"}','{"name":"Slack","winget":"SlackTechnologies.Slack","id":"DblInstallSlack"}','{"name":"Microsoft Teams","winget":"Microsoft.Teams","id":"DblInstallTeams"}','{"name":"Telegram","winget":"Telegram.TelegramDesktop","id":"DblInstallTelegram"}','{"name":"Viber","winget":"Viber.Viber","id":"DblInstallViber"}','{"name":"Zoom","winget":"Zoom.Zoom","id":"DblInstallZoom"}','{"name":"Bluestacks","winget":"BlueStack.BlueStacks","id":"DblInstallBluestacks"}','{"name":"Cemu","winget":"Cemu.Cemu","id":"DblInstallCemu"}','{"name":"EA Desktop App","winget":"ElectronicArts.EADesktop","id":"DblInstallEaapp"}','{"name":"Emulation Station","winget":"Emulationstation.Emulationstation","id":"DblInstallEmulationstation"}','{"name":"Epic Games Store","winget":"EpicGames.EpicGamesLauncher","id":"DblInstallEpicgames"}','{"name":"NVIDIA GeForce NOW","winget":"Nvidia.GeforceNOW","id":"DblInstallGeforcenow"}','{"name":"GOG Galaxy","winget":"GOG.Galaxy","id":"DblInstallGog"}','{"name":"Playnite","winget":"Playnite.Playnite","id":"DblInstallPlaynite"}','{"name":"Prism Launcher","winget":"PrismLauncher.PrismLauncher","id":"DblInstallPrism"}','{"name":"SideQuestVR","winget":"SideQuestVR.SideQuest","id":"DblInstallSideQuest"}','{"name":"Steam","winget":"Valve.Steam","id":"DblInstallSteam"}','{"name":"Sunshine Stream Server","winget":"LizardByte.Sunshine","id":"DblInstallSunshine"}','{"name":"Heroic Games Launcher","winget":"HeroicGamesLauncher.HeroicGamesLauncher","id":"DblInstallHeroic"}','{"name":"itch.io","winget":"ItchIo.Itch","id":"DblInstallItch"}','{"name":"Medal","winget":"MedalB.V.Medal","id":"DblInstallMedal"}','{"name":"Moonlight Stream Client","winget":"MoonlightGameStreamingProject.Moonlight","id":"DblInstallMoonlight"}','{"name":"Legendary Epic (Python)","winget":null,"id":"DblPythonEpicCLI"}','{"name":"Ubisoft Connect","winget":"Ubisoft.Connect","id":"DblInstallUbisoft"}','{"name":"Wargaming Game Center","winget":"Wargaming.GameCenter","id":"DblInstallWargaming"}','{"name":"XEMU","winget":"xemu-project.xemu","id":"DblInstallXemu"}','{"name":"Audacity","winget":"Audacity.Audacity","id":"DblInstallAudacity"}','{"name":"AV1 Video Extension","winget":"9MVZQVXJBQ9V","id":"DblInstallAV1"}','{"name":"Blender","winget":"BlenderFoundation.Blender","id":"DblInstallBlender"}','{"name":"Figma","winget":"Figma.Figma","id":"DblInstallFigma"}','{"name":"FFmpeg","winget":"Gyan.FFmpeg","id":"DblInstallFFmpeg"}','{"name":"Cider","winget":"CiderCollective.Cider","id":"DblInstallCider"}','{"name":"Greenshot","winget":"Greenshot.Greenshot","id":"DblInstallGreenshot"}','{"name":"Handbrake","winget":"HandBrake.HandBrake","id":"DblInstallHandbrake"}','{"name":"ImageGlass","winget":"DuongDieuPhap.ImageGlass","id":"DblInstallImageglass"}','{"name":"Kodi","winget":"XBMCFoundation.Kodi","id":"DblInstallKodi"}','{"name":"K-Lite Codec Pack","winget":"CodecGuide.K-LiteCodecPack.Standard","id":"DblInstallKlite"}','{"name":"MediaInfo","winget":"MediaArea.MediaInfo.GUI","id":"DblInstallMediaInfo"}','{"name":"MKVToolNix","winget":"MoritzBunkus.MKVToolNix","id":"DblInstallMKVToolNix"}','{"name":"Plex Client","winget":"Plex.Plex","id":"DblInstallPlex"}','{"name":"Plex Server","winget":"Plex.PlexMediaServer","id":"DblInstallPlexServer"}','{"name":"OBS Studio","winget":"OBSProject.OBSStudio","id":"DblInstallObs"}','{"name":"Spotify","winget":"9NCBCSZSJRSB","id":"DblInstallSpotify"}','{"name":"ShareX","winget":"ShareX.ShareX","id":"DblInstallSharex"}','{"name":"VLC Media Player","winget":"VideoLAN.VLC","id":"DblInstallVlc"}','{"name":"VP9 Video Extensions","winget":"9N4D0MSMP0PT","id":"DblInstallVP9"}','{"name":"yt-dlp","winget":"yt-dlp.yt-dlp","id":"DblInstallYtdlp"}','{"name":"Anki","winget":"Anki.Anki","id":"DblInstallAnki"}','{"name":"Adobe","winget":"Adobe.Acrobat.Reader.64-bit","id":"DblInstallAdobe"}','{"name":"Joplin","winget":"Joplin.Joplin","id":"DblInstallJoplin"}','{"name":"LibreOffice","winget":"TheDocumentFoundation.LibreOffice","id":"DblInstallLibreoffice"}','{"name":"Neovim","winget":"Neovim.Neovim","id":"DblInstallNeovim"}','{"name":"Neovim Nightly","winget":"Neovim.Neovim.Nightly","id":"DblInstallNeovimNightly"}','{"name":"Notion","winget":"Notion.Notion","id":"DblInstallNotion"}','{"name":"Notepad","winget":"Notepad++.Notepad++","id":"DblInstallNotepadplus"}','{"name":"Notepads","winget":"JackieLiu.NotepadsApp","id":"DblInstallNotepadsApp"}','{"name":"Obsidian","winget":"Obsidian.Obsidian","id":"DblInstallObsidian"}','{"name":"OnlyOffice","winget":"ONLYOFFICE.DesktopEditors","id":"DblInstallOnlyoffice"}','{"name":"Sublime Text 4","winget":"SublimeHQ.SublimeText.3","id":"DblInstallSublime4"}','{"name":"Sumatra","winget":"SumatraPDF.SumatraPDF","id":"DblInstallSumatra"}','{"name":"WPS Office","winget":"Kingsoft.WPSOffice","id":"DblInstallWPS"}','{"name":"WinMerge","winget":"WinMerge.WinMerge","id":"DblInstallWinmerge"}','{"name":"1Password","winget":"AgileBits.1Password","id":"DblInstall1Password"}','{"name":"7-zip","winget":"7zip.7zip","id":"DblInstall7zip"}','{"name":"Android Debug Bridge","winget":"Google.PlatformTools","id":"DblInstallADB"}','{"name":"Alacritty","winget":"Alacritty.Alacritty","id":"DblInstallAlacritty"}','{"name":"Anydo","winget":"Anydo.Anydo","id":"DblInstallAnydo"}','{"name":"AutoHotkey","winget":"autohotkey","id":"DblInstallAutohotkey"}','{"name":"Bitwarden","winget":"Bitwarden.Bitwarden","id":"DblInstallBitwarden"}','{"name":"Chatterino","winget":"ChatterinoTeam.Chatterino","id":"DblInstallChatterino"}','{"name":"ClassicVolumeMixer","winget":"PopeenCom.ClassicVolumeMixer","id":"DblInstallClasicMixer"}','{"name":"CPU-Z","winget":"CPUID.CPU-Z","id":"DblInstallCpuz"}','{"name":"Cryptomator","winget":"Cryptomator.Cryptomator","id":"DblInstallCryptomator"}','{"name":"Display Driver Uninstaller","winget":"Wagnardsoft.DisplayDriverUninstaller","id":"DblInstallDdu"}','{"name":"Draw.io","winget":"JGraph.Draw","id":"DblInstallDrawio"}','{"name":"Everything","winget":"oidtools.Everything","id":"DblInstallEsearch"}','{"name":"Google Drive","winget":"Google.GoogleDrive ","id":"DblInstallGoogleDrive"}','{"name":"GPU-Z","winget":"TechPowerUp.GPU-Z","id":"DblInstallGpuz"}','{"name":"gsudo","winget":"gerardog.gsudo","id":"DblInstallGsudo"}','{"name":"HyperX NGENUITY","winget":"9P1TBXR6QDCX","id":"DblInstallNGENUITY"}','{"name":"HWiNFO","winget":"REALiX.HWiNFO","id":"DblInstallHwinfo"}','{"name":"JDownloader","winget":"AppWork.JDownloader","id":"DblInstallJdownloader"}','{"name":"KDE Connect","winget":"KDE.KDEConnect","id":"DblInstallKDEConnect"}','{"name":"KeePassXC","winget":"KeePassXCTeam.KeePassXC","id":"DblInstallKeepass"}','{"name":"Afterburner","winget":"Guru3D.Afterburner","id":"DblInstallMsiafterburner"}','{"name":"Thunderbird","winget":"Mozilla.Thunderbird","id":"DblInstallThunderbird"}','{"name":"NanaZip","winget":"M2Team.NanaZip","id":"DblInstallNanazip"}','{"name":"NTop","winget":"gsass1.NTop","id":"DblInstallNTop"}','{"name":"NVCleanstall","winget":"TechPowerUp.NVCleanstall","id":"DblInstallNvclean"}','{"name":"VirtualBox","winget":"Oracle.VirtualBox","id":"DblInstallOVirtualBox"}','{"name":"Speedtest by Ookla","winget":"Ookla.Speedtest.Desktop","id":"DblInstallSpeedtest"}','{"name":"OpenRGB","winget":"CalcProgrammer1.OpenRGB","id":"DblInstallOpenrgb"}','{"name":"Parsec","winget":"Parsec.Parsec","id":"DblInstallParsec"}','{"name":"Postbox","winget":"Postbox.Postbox","id":"DblInstallPostbox"}','{"name":"Process Lasso","winget":"BitSum.ProcessLasso","id":"DblInstallProcesslasso"}','{"name":"Proxyman","winget":"ProxymanLLC.Proxyman","id":"DblInstallProxyman"}','{"name":"qBittorrent","winget":"qBittorrent.qBittorrent","id":"DblInstallQbittorrent"}','{"name":"Rclone","winget":"Rclone.Rclone","id":"DblInstallRclone"}','{"name":"Revo","winget":"RevoUninstaller.RevoUninstaller","id":"DblInstallRevo"}','{"name":"Rufus","winget":"Rufus.Rufus","id":"DblInstallRufus"}','{"name":"Ttaskbar","winget":"9PF4KZ2VN4W9","id":"DblInstallTtaskbar"}','{"name":"WingetUI","winget":"SomePythonThings.WingetUIStore","id":"DblInstallWingetUI"}','{"name":"WinRAR","winget":"RARLab.WinRAR","id":"DblInstallWinrar"}')
$appx = @('{"id":"MicrosoftCorporationIIQuickAssist","name":"MicrosoftCorporationII.QuickAssist"}','{"id":"ClipchampClipchamp","name":"Clipchamp.Clipchamp"}','{"id":"MicrosoftOutlookForWindows","name":"Microsoft.OutlookForWindows"}','{"id":"MicrosoftPowerAutomateDesktop","name":"Microsoft.PowerAutomateDesktop"}','{"id":"MicrosoftTodos","name":"Microsoft.Todos"}','{"id":"MicrosoftAppConnector","name":"Microsoft.AppConnector"}','{"id":"MicrosoftBingFinance","name":"Microsoft.BingFinance"}','{"id":"MicrosoftBingNews","name":"Microsoft.BingNews"}','{"id":"MicrosoftBingSports","name":"Microsoft.BingSports"}','{"id":"MicrosoftBingTranslator","name":"Microsoft.BingTranslator"}','{"id":"MicrosoftBingWeather","name":"Microsoft.BingWeather"}','{"id":"MicrosoftBingFoodAndDrink","name":"Microsoft.BingFoodAndDrink"}','{"id":"MicrosoftBingHealthAndFitness","name":"Microsoft.BingHealthAndFitness"}','{"id":"MicrosoftBingTravel","name":"Microsoft.BingTravel"}','{"id":"MicrosoftMinecraftUWP","name":"Microsoft.MinecraftUWP"}','{"id":"MicrosoftGamingServices","name":"Microsoft.GamingServices"}','{"id":"MicrosoftGetHelp","name":"Microsoft.GetHelp"}','{"id":"MicrosoftGetstarted","name":"Microsoft.Getstarted"}','{"id":"MicrosoftMessaging","name":"Microsoft.Messaging"}','{"id":"MicrosoftMicrosoft3DViewer","name":"Microsoft.Microsoft3DViewer"}','{"id":"MicrosoftMicrosoftSolitaireCollection","name":"Microsoft.MicrosoftSolitaireCollection"}','{"id":"MicrosoftNetworkSpeedTest","name":"Microsoft.NetworkSpeedTest"}','{"id":"MicrosoftNews","name":"Microsoft.News"}','{"id":"MicrosoftOfficeLens","name":"Microsoft.Office.Lens"}','{"id":"MicrosoftOfficeSway","name":"Microsoft.Office.Sway"}','{"id":"MicrosoftOfficeOneNote","name":"Microsoft.Office.OneNote"}','{"id":"MicrosoftOneConnect","name":"Microsoft.OneConnect"}','{"id":"MicrosoftPeople","name":"Microsoft.People"}','{"id":"MicrosoftPrint3D","name":"Microsoft.Print3D"}','{"id":"MicrosoftSkypeApp","name":"Microsoft.SkypeApp"}','{"id":"MicrosoftWallet","name":"Microsoft.Wallet"}','{"id":"MicrosoftWhiteboard","name":"Microsoft.Whiteboard"}','{"id":"MicrosoftWindowsAlarms","name":"Microsoft.WindowsAlarms"}','{"id":"microsoftwindowscommunicationsapps","name":"microsoft.windowscommunicationsapps"}','{"id":"MicrosoftWindowsFeedbackHub","name":"Microsoft.WindowsFeedbackHub"}','{"id":"MicrosoftWindowsMaps","name":"Microsoft.WindowsMaps"}','{"id":"MicrosoftWindowsPhone","name":"Microsoft.WindowsPhone"}','{"id":"MicrosoftWindowsSoundRecorder","name":"Microsoft.WindowsSoundRecorder"}','{"id":"MicrosoftXboxApp","name":"Microsoft.XboxApp"}','{"id":"MicrosoftGamingApp","name":"Microsoft.GamingApp"}','{"id":"MicrosoftConnectivityStore","name":"Microsoft.ConnectivityStore"}','{"id":"MicrosoftCommsPhone","name":"Microsoft.CommsPhone"}','{"id":"MicrosoftScreenSketch","name":"Microsoft.ScreenSketch"}','{"id":"MicrosoftXboxTCUI","name":"Microsoft.Xbox.TCUI"}','{"id":"MicrosoftXboxGameOverlay","name":"Microsoft.XboxGameOverlay"}','{"id":"MicrosoftXboxGamingOverlay","name":"Microsoft.XboxGamingOverlay"}','{"id":"MicrosoftXboxGameCallableUI","name":"Microsoft.XboxGameCallableUI"}','{"id":"MicrosoftXboxSpeechToTextOverlay","name":"Microsoft.XboxSpeechToTextOverlay"}','{"id":"MicrosoftXboxIdentityProvider","name":"Microsoft.XboxIdentityProvider"}','{"id":"MicrosoftMixedRealityPortal","name":"Microsoft.MixedReality.Portal"}','{"id":"MicrosoftYourPhone","name":"Microsoft.YourPhone"}','{"id":"MicrosoftZuneMusic","name":"Microsoft.ZuneMusic"}','{"id":"MicrosoftZuneVideo","name":"Microsoft.ZuneVideo"}','{"id":"MicrosoftGetstarted","name":"Microsoft.Getstarted"}','{"id":"MicrosoftFamily","name":"Microsoft.Family"}','{"id":"MicrosoftMicrosoftOfficeHub","name":"Microsoft.MicrosoftOfficeHub"}','{"id":"MicrosoftMicrosoftStickyNotes","name":"Microsoft.MicrosoftStickyNotes"}','{"id":"EclipseManager","name":"*EclipseManager*"}','{"id":"ActiproSoftwareLLC","name":"*ActiproSoftwareLLC*"}','{"id":"AdobePhotoshopExpress","name":"*AdobeSystemsIncorporated.AdobePhotoshopExpress*"}','{"id":"DuolingoLearnLanguagesforFree","name":"*Duolingo-LearnLanguagesforFree*"}','{"id":"PandoraMediaInc","name":"*PandoraMediaInc*"}','{"id":"CandyCrush","name":"*CandyCrush*"}','{"id":"BubbleWitch3Saga","name":"*BubbleWitch3Saga*"}','{"id":"Wunderlist","name":"*Wunderlist*"}','{"id":"Flipboard","name":"*Flipboard*"}','{"id":"Twitter","name":"*Twitter*"}','{"id":"Facebook","name":"*Facebook*"}','{"id":"RoyalRevolt","name":"*Royal Revolt*"}','{"id":"Sway","name":"*Sway*"}','{"id":"SpeedTest","name":"*Speed Test*"}','{"id":"Dolby","name":"*Dolby*"}','{"id":"Viber","name":"*Viber*"}','{"id":"ACGMediaPlayer","name":"*ACGMediaPlayer*"}','{"id":"Netflix","name":"*Netflix*"}','{"id":"OneCalendar","name":"*OneCalendar*"}','{"id":"LinkedInforWindows","name":"*LinkedInforWindows*"}','{"id":"HiddenCityMysteryofShadows","name":"*HiddenCityMysteryofShadows*"}','{"id":"Hulu","name":"*Hulu*"}','{"id":"HiddenCity","name":"*HiddenCity*"}','{"id":"AdobePhotoshopExpress","name":"*AdobePhotoshopExpress*"}','{"id":"HotspotShieldFreeVPN","name":"*HotspotShieldFreeVPN*"}','{"id":"MicrosoftAdvertisingXaml","name":"*Microsoft.Advertising.Xaml*"}','{"id":"WindowsDevHome","name":"*Windows.DevHome*"}')

################################################################################################################
###                                                                                                          ###
###                                        INFO: HELPER FUNCTIONS                                            ###
###                                                                                                          ###
################################################################################################################

function Get-NavigateUri {
    <#
    .SYNOPSIS
        Function that gets url links from xaml
        Get-NavigateUri -hyperlink $GitHubHyperlink 
    #>

    param (
        [System.Windows.Documents.Hyperlink]$hyperlink
    )

    if ($hyperlink -ne $null) {
        return $hyperlink.NavigateUri.AbsoluteUri
    }

    return $null
}
function Invoke-jsonChecker {
    <#

    .SYNOPSIS
        This function checks if json object can be successfully converted into a PowerShell object
        Provides some basic error handling to report whether the conversion was successful or if an error occurred during the process
        Invoke-jsonChecker -name "applications"
    #>

    param(
        $name
    )

    $jsonfile = Get-Content ./config/$name.json | ConvertFrom-Json

    foreach ($jsonString in $jsonfile) {
        try {
            $programObject = $jsonString
            Write-Host "Successfully converted JSON: $jsonString" -ForegroundColor Green
        } catch {
            Write-Host "Failed to convert JSON: $jsonString" -ForegroundColor Red
            Write-Host "Error: $_"
        }
    }
}
function Invoke-MessageBox {
    <#

    .SYNOPSIS
        Handler function for [System.Windows.MessageBox]
        Invoke-MessageBox -msg "install"
    #>

    param (
        [string]$msg
    )

    $MessageboxTitle = switch ($msg) {
        "install"  { "Installs are finished" }
        "uninstall" { "Uninstalls are finished" }
        "upgrade"   { "Upgrading are finished" }
        "tweak"   { "Tweaking are finished" }
        "debloat"   { "Debloating are finished" }
        "debloatError"   { "Please unselect all unchecked APPXs!" }
        "debloatInfo"   { "Please select an APPX!" }
        "updateDefault"   { "Set Updates To Default" }
        "updateSecurity"   { "Set Security Updates" }
        "updateDisabled"   { "Updates Are Disabled" }
        "updateFix"   { "Reset Windows Update" }
        "updatePause"   { "Pause Windows Update" }
        "feature"   { "All features are now installed" }
        "networkReset"   { "Stock settings loaded. Please reboot your computer" }
        "soundReset"   { "Audio Service restarted" }
        "backup"   { "Backup are finished" }
        "shortcut"   { "Shortcut is created" }
        default     {
            Write-Warning "Unknown message type: $msg"
            return
        }
    }

    [System.Windows.MessageBox]::Show("Done", $MessageboxTitle, [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Information)
}
function Invoke-Scripts {
    <#

    .SYNOPSIS
        Invokes the provided scriptblock. Intended for things that can't be handled with the other functions.

    .PARAMETER Name
        The name of the scriptblock being invoked

    .PARAMETER scriptblock
        The scriptblock to be invoked

    .EXAMPLE
        $Scriptblock = [scriptblock]::Create({"Write-output 'Hello World'"})
        Invoke-Scripts -ScriptBlock $scriptblock -Name "Hello World"

    #>
    param (
        $Name,
        [scriptblock]$scriptblock
    )

    try {
        Write-Host "Running Script for $name"
        Invoke-Command $scriptblock -ErrorAction Stop
    } catch [System.Management.Automation.CommandNotFoundException] {
        Write-Warning "The specified command was not found."
        Write-Warning $PSItem.Exception.message
    } catch [System.Management.Automation.RuntimeException] {
        Write-Warning "A runtime exception occurred."
        Write-Warning $PSItem.Exception.message
    } catch [System.Security.SecurityException] {
        Write-Warning "A security exception occurred."
        Write-Warning $PSItem.Exception.message
    } catch [System.UnauthorizedAccessException] {
        Write-Warning "Access denied. You do not have permission to perform this operation."
        Write-Warning $PSItem.Exception.message
    } catch {
        # Generic catch block to handle any other type of exception
        Write-Warning "Unable to run script for $name due to unhandled exception"
        Write-Warning $psitem.Exception.StackTrace
    }

}
Function Open-Link {
    <#
    .SYNOPSIS
        Function that opens a url link
        Open-Link -Uri $navigateUriGit
    #>

    param($Uri)

    try {
        Start-Process $Uri
    }
    catch {
        [System.Windows.MessageBox]::Show("Error opening link: $_", "Error", [Windows.MessageBoxButton]::OK, [Windows.MessageBoxImage]::Error)
    }
}

$wpf_GitHubHyperlink.Add_Click({
    <#
    .SYNOPSIS
        Open GitHub page link
    #>
    $GitHubHyperlink = $psform.FindName("GitHubHyperlink")
    $navigateUriGit = Get-NavigateUri -hyperlink $GitHubHyperlink
    Open-Link -Uri $navigateUriGit
})

$wpf_WebsiteHyperlink.Add_Click({
    <#
    .SYNOPSIS
        Open Website link
    #>
    $WebsiteHyperlink = $psform.FindName("WebsiteHyperlink")
    $navigateUriSite = Get-NavigateUri -hyperlink $WebsiteHyperlink
    Open-Link -Uri $navigateUriSite
})
function AddCustomCheckBox {
    param (
        [string]$Id,
        [string]$Name,
        [System.Windows.Controls.Panel]$panel,
        [string]$Foreground,
        [string]$HorizontalAlignment,
        [System.Windows.Input.Cursor]$Cursor,
        [array]$Margin,
        [int]$FontSize,
        [string]$FontFamily
    )

    $cbox = New-Object Windows.Controls.CheckBox
    $cbox.Name = $Id
    $cbox.Content = $Name
    $cbox.Foreground = $Foreground
    $cbox.HorizontalAlignment = $HorizontalAlignment
    $cbox.Cursor = $Cursor
    $cbox.Margin = New-Object Windows.Thickness $Margin[0], $Margin[1], $Margin[2], $Margin[3]
    $cbox.FontSize = $FontSize
    $cbox.FontFamily = New-Object Windows.Media.FontFamily("$FontFamily")

    $scaleTransform = New-Object Windows.Media.ScaleTransform
    $scaleTransform.ScaleX = 1.5
    $scaleTransform.ScaleY = 1.5
    $cbox.LayoutTransform = $scaleTransform

    $panel.Children.Add($cbox) | Out-Null
}


# $cbox = New-Object Windows.Controls.CheckBox
# $cbox.Name = $app.Id
# $cbox.Content = $app.Name
# $cbox.Foreground = "#a69f6c"
# $cbox.HorizontalAlignment = "Left"
# $cbox.Cursor = "Hand"
# $cbox.Margin = New-Object Windows.Thickness(15, 5, 15, 5)
# $cbox.FontSize = 11
# $cbox.FontFamily = New-Object Windows.Media.FontFamily("Gadugi")
function AddCustomLabel {
    param (
        [string]$content,
        [System.Windows.Controls.Panel]$panel,
        [string]$Foreground,
        [array]$Margin,
        [int]$fontSize,
        [string]$fontWeight,
        [string]$fontFamily
    )

    $label = New-Object Windows.Controls.Label
    $label.Content = $content
    $label.Foreground = $Foreground
    $label.Margin = New-Object Windows.Thickness $Margin[0], $Margin[1], $Margin[2], $Margin[3]
    $label.FontSize = $fontSize
    $label.FontWeight = $fontWeight
    $label.FontFamily = New-Object Windows.Media.FontFamily($fontFamily)
    $panel.Children.Add($label) | Out-Null
}


# $label = New-Object Windows.Controls.Label
# $label.Content = $content
# $label.Foreground = "#a69f6c"
# $label.Margin = New-Object Windows.Thickness(15, 5, 15, 0)
# $label.FontSize = 14
# $label.FontWeight = "Bold"
# $label.FontFamily = New-Object Windows.Media.FontFamily("Gadugi")
# $panel.Children.Add($label) | Out-Null
function Set-RestorePoint {
    <#
    
        .DESCRIPTION
        Purpose of this fuction is to create restore point. 
    
    #>
    
    # Check if the user has administrative privileges
    if (-Not ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
        Write-Host "Please run this script as an administrator."
        return
    }

    # Check if System Restore is enabled for the main drive
    try {
        # Try getting restore points to check if System Restore is enabled
        Enable-ComputerRestore -Drive "$env:SystemDrive"
    } catch {
        Write-Host "An error occurred while enabling System Restore: $_"
    }

    # Check if the SystemRestorePointCreationFrequency value exists
    $exists = Get-ItemProperty -path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SystemRestore" -name "SystemRestorePointCreationFrequency" -ErrorAction SilentlyContinue
    if($null -eq $exists){
        write-host 'Changing system to allow multiple restore points per day'
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SystemRestore" -Name "SystemRestorePointCreationFrequency" -Value "0" -Type DWord -Force -ErrorAction Stop | Out-Null
    }

    # Get all the restore points for the current day
    $existingRestorePoints = Get-ComputerRestorePoint | Where-Object { $_.CreationTime.Date -eq (Get-Date).Date }

    # Check if there is already a restore point created today
    if ($existingRestorePoints.Count -eq 0) {
        $description = "System Restore Point created by Windows11-Optimizer-Debloater"

        Checkpoint-Computer -Description $description -RestorePointType "MODIFY_SETTINGS"
        Write-Host -ForegroundColor Green "System Restore Point Created Successfully"
    }
}
function Start-Sleep($seconds) {
    <#

    .SYNOPSIS
        Animated sleep function
    #>

    $doneDT = (Get-Date).AddSeconds($seconds)
    while($doneDT -gt (Get-Date)) {
        $secondsLeft = $doneDT.Subtract((Get-Date)).TotalSeconds
        $percent = ($seconds - $secondsLeft) / $seconds * 100
        Write-Progress -Activity "Loading" -Status "Loading..." -SecondsRemaining $secondsLeft -PercentComplete $percent
        [System.Threading.Thread]::Sleep(500)
    }
    Write-Progress -Activity "Loading" -Status "Loading..." -SecondsRemaining 0 -Completed
}

################################################################################################################
###                                                                                                          ###
###                                         INFO: INFO FUNCTIONS                                             ###
###                                                                                                          ###
################################################################################################################

# HARDWARE INFO

$ComputerInfo = Get-ComputerInfo

$pcName = $ComputerInfo.CsDNSHostName
$wpf_pcName.Content="Welcome $pcName"

$cpuInfo = $ComputerInfo.CsProcessors
$wpf_cpuInfo.Content=$cpuInfo.Name

Get-CimInstance -ClassName win32_VideoController | ForEach-Object {[void]$wpf_gpuInfo.Items.Add($_.VideoProcessor)}

$ramInfo = get-wmiobject -class Win32_ComputerSystem
$ramInfoGB = [math]::Ceiling($ramInfo.TotalPhysicalMemory / 1024 / 1024 / 1024)
$ramSpeed = Get-WmiObject Win32_PhysicalMemory | Select-Object *
$IsVirtual = $ramInfo.Model.Contains("Virtual")
if ($IsVirtual -like 'False'){
    Write-Output "This Machine is Physical Platform"
    $wpf_ramInfo.Content=[string]$ramInfoGB+"GB"+" "+ $ramSpeed.ConfiguredClockSpeed[0]+"MT/s"
} else{
    Write-Output "This Machine is Virtual Platform"
    $wpf_ramInfo.Content=[string]$ramInfoGB+"GB"
}

$mbInfo = Get-CimInstance -ClassName win32_baseboard | Select-Object *
$wpf_mbInfo.Content=$mbInfo.Product

# OS INFO
$osInfo = $ComputerInfo.OSName
$wpf_osInfo.Content=$osInfo + " " + $ComputerInfo.OsArchitecture

$version = (Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion").DisplayVersion
$verInfo = "Version " + $version + " " + "($($ComputerInfo.OsVersion))"
$wpf_verInfo.Content=$verInfo

$installTimeInfo = $ComputerInfo.OsInstallDate
$wpf_installTimeInfo.Content=$installTimeInfo.ToString('dd-MMM-yyyy HH:mm')

$licenceInfo=Get-CimInstance SoftwareLicensingProduct -Filter "partialproductkey is not null" | Where-Object name -like windows*
$licenceCheckInfo=$licenceInfo.LicenseStatus
if ($licenceCheckInfo -eq 1) {
    $licenceCheckInfo = "Active"
}else {
    $licenceCheckInfo = "Not Active"
}
$wpf_licenceInfo.Content=$licenceCheckInfo

#DISK INFO
Get-Disk | ForEach-Object {[void]$wpf_diskNameInfo.Items.Add($_.FriendlyName)}
function Get-DiskInfo {
    $diskSelected=$wpf_diskNameInfo.SelectedItem
    $details=Get-Disk -FriendlyName "$diskSelected" | Select-Object *
    $wpf_diskStatus.Content=$details.HealthStatus
    $wpf_diskStyle.Content=$details.PartitionStyle
}

$volumes = Get-Volume
foreach ($volume in $volumes) { if ($volume.DriveLetter -notlike "") {[void]$wpf_diskName.Items.Add($volume.DriveLetter)} }
function Get-DiskSize {
    $diskSelected = $wpf_diskName.SelectedItem
    foreach ($volume in $volumes) {
        if ($volume.DriveLetter -eq $diskSelected) {
            $maxSizeGB = $volume.Size / 1GB
            $freeSizeGB = $volume.SizeRemaining / 1GB
            $maxSizeFormatted = if ($maxSizeGB -ge 1000) {
                "{0}TB" -f [math]::Round($maxSizeGB / 1024)
            } else {
                "{0}GB" -f [math]::Round($maxSizeGB)
            }
            $freeSizeFormatted = if ($freeSizeGB -ge 1000) {
                "{0:N1}TB" -f ($freeSizeGB / 1024)
            } else {
                "{0:N1}GB" -f ($freeSizeGB)
            }
            $wpf_diskMaxSize.Content = $maxSizeFormatted
            $wpf_diskFreeSize.Content = $freeSizeFormatted
        }
    }
}

################################################################################################################
###                                                                                                          ###
###                                        INFO: INSTALL FUNCTIONS                                           ###
###                                                                                                          ###
################################################################################################################

function Invoke-APPX {
    #$jsonfile = Get-Content ./config/applications.json | ConvertFrom-Json
    $result = @()

    foreach ($program in $programs) {
        $program = $program | ConvertFrom-Json
        $id = $program.id
        $name = $program.name
        $winget = $program.winget
        $idPython = $id -like "DblPython*"
        $pipPackage = $program.pip
        $idChoco = $id -like "DblChoco*"
        $choco = $program.choco

        $checkBox = $psform.FindName("$id")
        $isChecked = $checkBox.IsChecked

        $result += [PSCustomObject]@{
            Id = $id
            Name = $name
            Winget = $winget
            IdPython = $idPython
            PipPackage = $pipPackage
            IdChoco = $idChoco
            Choco = $choco
            IsChecked = $isChecked
        }
    }

    return $result
}
function Invoke-Filter {
    <#

    .SYNOPSIS
        Search filter for apps 
    #>
    
    $matchingProgram = Invoke-APPX
    foreach ($program in $matchingProgram) {
        $id = $program.Id
        $filter = $wpf_CheckboxFilter.Text
        $checkBoxes = $psform.FindName("$id")

        Foreach ($CheckBox in $CheckBoxes) {
            if ($CheckBox.Content.ToLower().Contains($filter)) {
                $CheckBox.Visibility = "Visible"
                #Write-Host "Match found: $name"
            }
            elseif($CheckBox.Content.Contains($filter)){
                $CheckBox.Visibility = "Visible"
            }
            elseif($CheckBox.Content.ToUpper().Contains($filter)){
                $CheckBox.Visibility = "Visible"
            }
            else {
                $CheckBox.Visibility = "Collapsed"
            }
        }
    }
}

$wpf_CheckboxFilter.Add_TextChanged({
    Invoke-Filter
})
function Invoke-ManageInstall {
    <#

    .SYNOPSIS
        Handler function for installing, uninstalling and upgrading apps
        Invoke-ManageInstall -PackageManger "winget" -manage "Installing" -program $name -PackageName $winget
    #>

    param(
            $program,
            $PackageManger,
            $PackageName,
            $manage 
        )

    if($manage -eq "Installing" -and $PackageManger -eq "pip"){
        if (Get-Command python -ErrorAction Ignore) {
            Write-Host "Installing $name package" -ForegroundColor Green
            python -m pip install --no-input --quiet --upgrade pip
            pip install $PackageName --no-input --quiet 
        } else {
            Write-Host "Python is not installed." -ForegroundColor Red
        }
    }elseif($manage -eq "Installing" -and $PackageManger -eq "winget"){
        Write-Host "Installing $name package" -ForegroundColor Green
        Start-Process -FilePath winget -ArgumentList "install --id $PackageName -e --accept-source-agreements --accept-package-agreements --disable-interactivity --silent" -NoNewWindow -Wait
    }elseif($manage -eq "Installing" -and $PackageManger -eq "choco"){
        if ((Get-Command -Name choco -ErrorAction Ignore) -and (Get-Item "$env:ChocolateyInstall\choco.exe" -ErrorAction Ignore).VersionInfo.ProductVersion) {
            Write-Host "Installing $name package" -ForegroundColor Green
            Start-Process -FilePath choco -ArgumentList "install $PackageName -y" -NoNewWindow -Wait
        }else{
            Write-Host "Seems Chocolatey is not installed" -ForegroundColor Red
        }
    }

    if($manage -eq "Uninstalling" -and $PackageManger -eq "pip"){
        if (Get-Command python -ErrorAction Ignore) {
            Write-Host "Uninstalling $name package" -ForegroundColor Red
            pip uninstall $PackageName --yes --quiet --no-input
        } else {
            Write-Host "Python is not installed." -ForegroundColor Red
        }
    }elseif($manage -eq "Uninstalling" -and $PackageManger -eq "winget"){
        Write-Host "Uninstalling $name package" -ForegroundColor Red
        Start-Process -FilePath winget -ArgumentList "uninstall --id $PackageName -e --purge --force --disable-interactivity --silent" -NoNewWindow -Wait
    }elseif($manage -eq "Uninstalling" -and $PackageManger -eq "choco"){
        if ((Get-Command -Name choco -ErrorAction Ignore) -and (Get-Item "$env:ChocolateyInstall\choco.exe" -ErrorAction Ignore).VersionInfo.ProductVersion) {
            Write-Host "Uninstalling $name package" -ForegroundColor Red
            Start-Process -FilePath choco -ArgumentList "uninstall $PackageName -y" -NoNewWindow -Wait
        }else{
            Write-Host "Seems Chocolatey is not installed" -ForegroundColor Red
        }
    }

    if($manage -eq "Upgrading" -and $PackageManger -eq "pip"){
        if (Get-Command python -ErrorAction Ignore) {
            Write-Host "Upgrading $name package" -ForegroundColor Blue
            pip install --upgrade $PackageName --no-input --quiet --no-cache
        } else {
            Write-Host "Python is not installed." -ForegroundColor Red
        }
    }elseif($manage -eq "Upgrading" -and $PackageManger -eq "winget"){
        Write-Host "Upgrading $name package" -ForegroundColor Blue
        Start-Process -FilePath winget -ArgumentList "upgrade --id $PackageName -e --accept-source-agreements --accept-package-agreements --disable-interactivity --silent --force" -NoNewWindow -Wait
    }elseif($manage -eq "Upgrading" -and $PackageManger -eq "choco"){
        if ((Get-Command -Name choco -ErrorAction Ignore) -and (Get-Item "$env:ChocolateyInstall\choco.exe" -ErrorAction Ignore).VersionInfo.ProductVersion) {
            Write-Host "Upgrading $name package" -ForegroundColor Blue
            Start-Process -FilePath choco -ArgumentList "upgrade $PackageName -y" -NoNewWindow -Wait
        }else{
            Write-Host "Seems Chocolatey is not installed" -ForegroundColor Red
        }
    }
}
function Invoke-ChocoInstall {
    <#

    .SYNOPSIS
        Installing chocolatey
    #>

    #Check if chocolatey is installed and get its version
    if ((Get-Command -Name choco -ErrorAction Ignore) -and ($chocoVersion = (Get-Item "$env:ChocolateyInstall\choco.exe" -ErrorAction Ignore).VersionInfo.ProductVersion)) {
        Write-Host "Chocolatey Version $chocoVersion is already installed" -ForegroundColor Green
    }else {
        Write-Host "Seems Chocolatey is not installed, installing now" -ForegroundColor Magenta
        Set-ExecutionPolicy Bypass -Scope Process -Force; Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
        powershell choco feature enable -n allowGlobalConfirmation
    }
    Invoke-MessageBox -msg "install"
}
function Invoke-ChocoUninstall {

    <#

    .SYNOPSIS
        Unistalling chocolatey
    #>

    if ((Get-Command -Name choco -ErrorAction Ignore) -and (Get-Item "$env:ChocolateyInstall\choco.exe" -ErrorAction Ignore).VersionInfo.ProductVersion) {
        Write-Host "Uninstalling chocolatey package" -ForegroundColor Red
        $chocoPath = $env:ChocolateyInstall
        # Remove the folder
        Remove-Item -Path $chocoPath -Recurse -Force
        # Specify the name of the environment variable you want to remove
        $chocoEnv = "ChocolateyInstall"
        $chocoUpdateEnv = "ChocolateyLastPathUpdate"
        # Remove the environment variable
        [Environment]::SetEnvironmentVariable($chocoEnv, $null, [System.EnvironmentVariableTarget]::Machine)
        [Environment]::SetEnvironmentVariable($chocoUpdateEnv, $null, [System.EnvironmentVariableTarget]::User)
        Invoke-MessageBox -msg "uninstall"
    }else{
        Write-Host "Seems Chocolatey is not installed" -ForegroundColor Red
    }
}
function Invoke-ChocoUpgrade {
    <#

    .SYNOPSIS
        Upgrading chocolatey
    #>

    if ((Get-Command -Name choco -ErrorAction Ignore) -and (Get-Item "$env:ChocolateyInstall\choco.exe" -ErrorAction Ignore).VersionInfo.ProductVersion) {
        Write-Host "Upgrading chocolatey package" -ForegroundColor Blue
        Start-Process -FilePath choco -ArgumentList "upgrade chocolatey -y" -NoNewWindow -Wait
        Invoke-MessageBox -msg "upgrade"
    }else{
        Write-Host "Seems Chocolatey is not installed" -ForegroundColor Red
    }
}
function Invoke-ClearProgramsButton {
    <#

    .SYNOPSIS
        Clear selected apps   
    #>
    
    $presets = @($wpf_ToggleLitePreset, $wpf_ToggleDevPreset, $wpf_ToggleGamingPreset)
    $styles = @("ToggleSwitchStyleGreen", "ToggleSwitchStylePurple", "ToggleSwitchStyleBlue")

    for ($i = 0; $i -lt $presets.Count; $i++) {
        $presets[$i].IsEnabled = $true
        $presets[$i].IsChecked = $false
        $presets[$i].Style = $presets[$i].TryFindResource($styles[$i])
    }

    $matchingProgram = Invoke-APPX | Where-Object { $_.IsChecked}

    foreach ($program in $matchingProgram) {
        $checkBox = $psform.FindName($program.Id).IsChecked = $false
    }
    Write-Host "Selection cleared" -ForegroundColor Green
}
function Invoke-FixesWinget {

    <#

    .SYNOPSIS
        This would install the latest version of winget and install it with its dependency's
    #>

    Write-Host "Installing winget" -ForegroundColor Green
    $winget = "https://github.com/microsoft/winget-cli/releases/latest/download/Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.msixbundle"
    Start-Process -FilePath powershell -ArgumentList "-NoProfile -ExecutionPolicy Bypass -Command Add-AppxPackage -Path '$winget'" -NoNewWindow -Wait

    Invoke-MessageBox -msg "install"
}
function Invoke-getInstallButton {
    <#

    .SYNOPSIS
        This function select all installed apps
        Read installed winget, choco and pip packages  
    #>

    Write-Host "Selecting Installed applications" -ForegroundColor Green
    # Export winget package information to a JSON file
    $wingetExportPath = Join-Path $env:TEMP "wingetPackage.json"
    winget export -o $wingetExportPath
    #Start-Sleep (2)
    # Read and parse the JSON file
    $jsonObject = Get-Content -Raw -Path $wingetExportPath | ConvertFrom-Json

    # Export Choco packages to a text file
    $chocoExportPath = Join-Path $env:TEMP "chocoPackage.json"
    choco export -o $chocoExportPath
    #Start-Sleep (2)
    $chocoObject = Get-Content -Path $chocoExportPath
    $xml = [xml]$chocoObject

    # Export Python packages to a text file
    pip freeze | Out-File -FilePath "$env:TEMP\pipPackage.txt"
    $PIPpackage = "$env:TEMP\PIPpackage.txt" 

    # Process winget packages
    foreach ($package in $jsonObject.Sources.Packages) {
        $matchingProgram = Invoke-APPX | Where-Object { $_.Winget -eq $package.PackageIdentifier }

        if ($matchingProgram -ne $null) {
            $checkBox = $psform.FindName($matchingProgram.Id)
            $checkBox.IsChecked = $true
        }
    }

    # Process Python packages
    foreach ($line in Get-Content -Path $PIPpackage) {
        $index = $line.IndexOf('=')
        $result = $line.Substring(0, $index).Trim()
        $matchingProgram = Invoke-APPX | Where-Object { $_.PipPackage -eq $result }
        if ($matchingProgram -ne $null) {
            $checkBox = $psform.FindName($matchingProgram.Id)
            $checkBox.IsChecked = $true
        }
    }

    # Process Choco packages
    foreach ($package in $xml.packages.package) {
        $matchingProgram = Invoke-APPX | Where-Object { $_.Choco -eq $package.id }
        if ($matchingProgram -ne $null) {
            $checkBox = $psform.FindName($matchingProgram.Id)
            $checkBox.IsChecked = $true
        }
    }
    
}
function Invoke-installButton {
    <#

    .SYNOPSIS
        This function install all selected apps
        Support winget, choco and pip packages  
    #>

    $matchingProgram = Invoke-APPX
    foreach ($program in $matchingProgram) {
        $checkBox = $psform.FindName($program.Id)
        $isChecked = $checkBox.IsChecked

        if ($isChecked -eq $true -and $program.IdPython) {
            Invoke-ManageInstall -PackageManger "pip" -manage "Installing" -program $program.Name -PackageName $program.PipPackage
        }elseif ($isChecked -eq $true -and $program.IdChoco){
            Invoke-ManageInstall -PackageManger "choco" -manage "Installing" -program $program.Name -PackageName $program.Choco
        }elseif ($isChecked -eq $true){
            Invoke-ManageInstall -PackageManger "winget" -manage "Installing" -program $program.Name -PackageName $program.Winget
        }else {
            continue
        }
    }
    
    Invoke-MessageBox -msg "install"
}
function Invoke-MsStoreFix {
    <#

    .SYNOPSIS
        Fixes Microsoft Store by re-register
    #>
    
    $store = Get-AppxPackage | Select-Object Name, PackageFullName | Where-Object Name -like *windowsstore*
    if ($store){
        Write-Host "Reinstaling windows store" -ForegroundColor Green
        Get-AppxPackage *windowsstore* | Remove-AppxPackage
        Start-Sleep 1
        Get-AppxPackage -allusers Microsoft.WindowsStore | Foreach {Add-AppxPackage -DisableDevelopmentMode -Register "$($_.InstallLocation)\AppXManifest.xml"}
    } else{
        Write-Host "Seems Windows Store is not installed, installing now" -ForegroundColor Magenta
        Get-AppxPackage -allusers Microsoft.WindowsStore | Foreach {Add-AppxPackage -DisableDevelopmentMode -Register "$($_.InstallLocation)\AppXManifest.xml"}
    }
    Invoke-MessageBox -msg "install"
}
function Invoke-ResetButton {
    <#

    .SYNOPSIS
        Button to reset search filter
    #>

    $wpf_CheckboxFilter.Text = "Search"

    $matchingProgram = Invoke-APPX
    foreach ($program in $matchingProgram) {
        $id = $program.Id
        $checkBoxes = $psform.FindName("$id")

        Foreach ($CheckBox in $CheckBoxes) {
            $CheckBox.Visibility = "Visible"
            $CheckBox.isChecked = $false    
        }
    }
}
function Invoke-ToggleDevPreset {
    <#

    .SYNOPSIS
        Developer preset to help when installing apps   
    #>

    $IsChecked = $wpf_ToggleDevPreset.IsChecked
    $wpf_ToggleLitePreset.IsEnabled = !$IsChecked; $wpf_ToggleLitePreset.Style = $wpf_ToggleLitePreset.TryFindResource(('ToggleSwitchStyle' + ('Green', 'Disabled')[$IsChecked]))
    $wpf_ToggleGamingPreset.IsEnabled = !$IsChecked; $wpf_ToggleGamingPreset.Style = $wpf_ToggleGamingPreset.TryFindResource(('ToggleSwitchStyle' + ('Blue', 'Disabled')[$IsChecked]))

    $matchingProgram = Invoke-APPX
    foreach ($program in $matchingProgram) {
        $checkBox = $psform.FindName($program.Id)
        $isChecked = $checkBox.IsChecked

        if ($checkBox.IsChecked -eq $false -and @(
            "Githubdesktop", "Nodemanager", "Java8", "Ohmyposh",
            "Python3", "Postman", "Ruby", "Visualstudio2022", "Code",
            "Dotnet3", "Dotnet5", "Dotnet6", "Dotnet7",
            "Powershell", "vc2015_64", "vc2015_32", "Terminal",
            "Thorium", "Discord", "Slack", "Teams", "Zoom",
            "Steam", "Greenshot", "Imageglass", "Klite", "Spotify", "Vlc",
            "Notepadplus", "7zip", "Cpuz", "ClasicMixer", "Drawio", "Hwinfo",
            "Jdownloader", "Msiafterburner", "OVirtualBox", "Qbittorrent",
            "Ttaskbar", "Winrar", "Sumatra"
        ) -contains $checkBox.Name.Replace("DblInstall", "")){ $checkBox.IsChecked = $true }else{ $checkBox.IsChecked = $false }

    }
    if ($wpf_ToggleDevPreset.IsChecked){ Write-Host "Enabling Dev Preset" -ForegroundColor Green} else { Write-Host "Disabling Dev Preset" -ForegroundColor Red  }
}
function Invoke-ToggleGamingPreset {
    <#

    .SYNOPSIS
        Gaming preset to help when installing apps   
    #>

    $IsChecked = $wpf_ToggleGamingPreset.IsChecked
    $wpf_ToggleLitePreset.IsEnabled = !$IsChecked; $wpf_ToggleLitePreset.Style = $wpf_ToggleLitePreset.TryFindResource(('ToggleSwitchStyle' + ('Green', 'Disabled')[$IsChecked]))
    $wpf_ToggleDevPreset.IsEnabled = !$IsChecked; $wpf_ToggleDevPreset.Style = $wpf_ToggleDevPreset.TryFindResource(('ToggleSwitchStyle' + ('Purple', 'Disabled')[$IsChecked]))

    $matchingProgram = Invoke-APPX
    foreach ($program in $matchingProgram) {
        $checkBox = $psform.FindName($program.Id)
        $isChecked = $checkBox.IsChecked

        if ($checkBox.IsChecked -eq $false -and @(
            "Git", "Dotnet3", "Dotnet5", "Dotnet6",
            "Dotnet7", "vc2015_64", "vc2015_32", "Thorium",
            "Discord", "Eaapp", "Epicgames", "Steam",
            "Ubisoft", "Greenshot", "Imageglass", "Obs", "Spotify",
            "Vlc", "Notepadplus", "Sumatra", "7zip", "Cpuz",
            "ClasicMixer", "Hwinfo", "Msiafterburner", "Qbittorrent"
        ) -contains $checkBox.Name.Replace("DblInstall", "")){ $checkBox.IsChecked = $true }else{ $checkBox.IsChecked = $false }

    }
    if ($wpf_ToggleGamingPreset.IsChecked){ Write-Host "Enabling Gaming Preset" -ForegroundColor Green} else { Write-Host "Disabling Gaming Preset" -ForegroundColor Red  }
}
function Invoke-ToggleLitePreset {
    <#

    .SYNOPSIS
        Minimal preset to help when installing apps   
    #>

    $IsChecked = $wpf_ToggleLitePreset.IsChecked
    $wpf_ToggleDevPreset.IsEnabled = !$IsChecked; $wpf_ToggleDevPreset.Style = $wpf_ToggleDevPreset.TryFindResource(('ToggleSwitchStyle' + ('Purple', 'Disabled')[$IsChecked]))
    $wpf_ToggleGamingPreset.IsEnabled = !$IsChecked; $wpf_ToggleGamingPreset.Style = $wpf_ToggleGamingPreset.TryFindResource(('ToggleSwitchStyle' + ('Blue', 'Disabled')[$IsChecked]))

    $matchingProgram = Invoke-APPX
    foreach ($program in $matchingProgram) {
        $checkBox = $psform.FindName($program.Id)
        $isChecked = $checkBox.IsChecked

        if ($checkBox.IsChecked -eq $false -and @(
            "Git", "Java8", "Ohmyposh", "Code", "Powershell", 
            "vc2015_64", "vc2015_32", "Terminal", "Thorium", 
            "Discord", "Steam", "Greenshot", "Imageglass", "Klite", 
            "Spotify", "Vlc", "Notepadplus", "Sumatra", "7zip", "Cpuz", 
            "ClasicMixer", "Hwinfo", "Jdownloader", "Msiafterburner", 
            "Qbittorrent", "Ttaskbar"
        ) -contains $checkBox.Name.Replace("DblInstall", "")){ $checkBox.IsChecked = $true }else{ $checkBox.IsChecked = $false }
    }

    if ($wpf_ToggleLitePreset.IsChecked){ Write-Host "Enabling Lite Preset" -ForegroundColor Green} else { Write-Host "Disabling Lite Preset" -ForegroundColor Red  }
}
function Invoke-UninstallButton {
    <#

    .SYNOPSIS
        This function uninstall all selected apps
    #>

    $matchingProgram = Invoke-APPX
    foreach ($program in $matchingProgram) {
        $checkBox = $psform.FindName($program.Id)
        $isChecked = $checkBox.IsChecked

        if ($isChecked -eq $true -and $program.IdPython) {
            Invoke-ManageInstall -PackageManger "pip" -manage "Uninstalling" -program $program.Name -PackageName $program.PipPackage
        }elseif ($isChecked -eq $true -and $program.IdChoco){
            Invoke-ManageInstall -PackageManger "choco" -manage "Uninstalling" -program $program.Name -PackageName $program.Choco
        }elseif ($isChecked -eq $true){
            Invoke-ManageInstall -PackageManger "winget" -manage "Uninstalling" -program $program.Name -PackageName $program.Winget
        }else {
            continue
        }
    }
    
    Invoke-MessageBox -msg "uninstall"
}
function Invoke-UpgradeButton {
    <#

    .SYNOPSIS
        This function upgrade all selected apps
    #>

    $matchingProgram = Invoke-APPX
    foreach ($program in $matchingProgram) {
        $checkBox = $psform.FindName($program.Id)
        $isChecked = $checkBox.IsChecked

        if ($isChecked -eq $true -and $program.IdPython) {
            Invoke-ManageInstall -PackageManger "pip" -manage "Upgrading" -program $name -PackageName $program.PipPackage
        }elseif ($isChecked -eq $true -and $program.IdChoco){
            Invoke-ManageInstall -PackageManger "choco" -manage "Upgrading" -program $name -PackageName $program.Choco
        }elseif ($isChecked -eq $true){
            Invoke-ManageInstall -PackageManger "winget" -manage "Upgrading" -program $name -PackageName $program.Winget
        }else {
            continue
        }
    }
    
    Invoke-MessageBox -msg "upgrade"
}

################################################################################################################
###                                                                                                          ###
###                                        INFO: DEBLOAT FUNCTIONS                                           ###
###                                                                                                          ###
################################################################################################################

function Invoke-MsAppxDebloat {
    #$jsonfile = Get-Content ./config/msAppxDebloat.json | ConvertFrom-Json
    param(
        $state
    )
    $result = @()
    foreach ($app in $appx) {
        $app = $app | ConvertFrom-Json
        $id = $app.id
        $name = $app.name
        $GetDebloatCheckBox = $app.IsChecked
        $isChecked = $GetDebloatCheckBox

        $result += [PSCustomObject]@{
            Id = $id
            Name = $name
            IsChecked = $isChecked
        }
    }

    return $result
}
function Remove-WinDebloatAPPX {
    <#
        .DESCRIPTION
        This handler function will remove any of the provided APPX names
        .EXAMPLE
        Remove-WinDebloatAPPX -Name "Microsoft.Microsoft3DViewer"
    #>
    param (
        $Name
    )

    Try{
        Write-Host "Removing $Name"
        Start-Process powershell.exe -ArgumentList "-NoProfile -ExecutionPolicy Bypass -Command Get-AppxPackage | Where-Object {`$_.Name -like '*$Name*'} | Remove-AppxPackage -ErrorAction SilentlyContinue" -NoNewWindow
        Start-Process powershell.exe -ArgumentList "-NoProfile -ExecutionPolicy Bypass -Command Get-AppxProvisionedPackage -Online | Where-Object {`$_.DisplayName -like '*$Name*'} | Remove-AppxProvisionedPackage -Online -ErrorAction SilentlyContinue" -NoNewWindow -Wait
    }
    Catch [System.Exception] {
        if($psitem.Exception.Message -like "*The requested operation requires elevation*"){
            Write-Warning "Unable to uninstall $name due to a Security Exception"
        }
        Else{
            Write-Warning "Unable to uninstall $name due to unhandled exception"
            Write-Warning $psitem.Exception.StackTrace 
        }
    }
    Catch{
        Write-Warning "Unable to uninstall $name due to unhandled exception"
        Write-Warning $psitem.Exception.StackTrace 
    }
}
$DblGetPanel = $psform.FindName("GetDebloat")
$wpf_DblSelected.Content = "Selected: 0 of $($appx.Count)"

# Iterate through each AppxPackage and create a TextBlock for each
$matchingMsAppx = Invoke-MsAppxDebloat
foreach ($app in $matchingMsAppx) {
    #Write-Host "ID: $($app.id), Name: $($app.name)"
    AddCustomCheckBox -Id "$($app.Id)" -Name "$($app.Name)" -panel $DblGetPanel -Foreground "#a69f6c" -HorizontalAlignment "Left" -Cursor "Hand" -Margin @(15, 10, 15, 5) -FontSize 11 -FontFamily "Gadugi"
}
function Invoke-SelectApplication {
    <#

    .SYNOPSIS
        This function select MS APPX you choose.
    #>

    $DblSelectPanel = $psform.FindName("SetDebloat")
    $DblSelectPanel.Children.Clear()
    $checkedCheckboxes = $DblGetPanel.Children
    $checkedCount = 0
    foreach ($app in $checkedCheckboxes) {
        $isChecked = $app.IsChecked
        if ($isChecked -eq $true) {
            AddCustomLabel -content $app.Content -panel $DblSelectPanel -Foreground "#a69f6c" -Margin @(15, 5, 15, 4) -FontSize 14 -FontWeight "Bold" -FontFamily "Gadugi"
            $checkedCount++
        }
    }
    $wpf_DblSelected.Content = "Selected: $checkedCount of $($matchingMsAppx.Count)"
}
function Invoke-SelectApplicationAll {
    <#

    .SYNOPSIS
        This function select all MS APPX.
    #>

    $DblSelectPanel = $psform.FindName("SetDebloat")
    $DblSelectPanel.Children.Clear()
    $checkedCheckboxes = $DblGetPanel.Children
    $checkedCount = 0
    foreach ($app in $checkedCheckboxes) {
        $isChecked = $app.IsChecked = $true
        if ($isChecked -eq $true) {
            AddCustomLabel -content $app.Content -panel $DblSelectPanel -Foreground "#a69f6c" -Margin @(15, 5, 15, 4) -FontSize 14 -FontWeight "Bold" -FontFamily "Gadugi"
            $checkedCount++
        }
    }
    $wpf_DblSelected.Content = "Selected: $checkedCount of $($matchingMsAppx.Count)"
}
function Invoke-ToggleXboxPreseta {
    <#

    .SYNOPSIS
        XBOX preset to help when debloating.
    .DESCRIPTION
        This will remove ALL Microsoft store apps other than the essentials to make winget and xbox work. 
        Games installed by MS Store ARE NOT INCLUDED!
    #>

    $DblSelectPanel = $psform.FindName("SetDebloat")
    $DblSelectPanel.Children.Clear()
    $checkedCheckboxes = $DblGetPanel.Children
    $state = $wpf_ToggleXboxPreset.IsChecked
    
    $xboxApps = @(
        "Microsoft.BingWeather", "Microsoft.GamingServices", "Microsoft.XboxApp", "Microsoft.Xbox.TCUI",
        "Microsoft.XboxGameOverlay", "Microsoft.XboxGamingOverlay", "Microsoft.XboxGameCallableUI", "Microsoft.XboxSpeechToTextOverlay",
        "Microsoft.XboxIdentityProvider", "Microsoft.ZuneMusic", "Microsoft.ZuneVideo", "Microsoft.MixedReality.Portal"
    )

    $checkedCount = 0
    foreach ($app in $checkedCheckboxes) {
        if ($app -is [Windows.Controls.CheckBox]){
            $isChecked = $app.IsChecked = $false

            if ($isChecked -eq $false -and $state -and $xboxApps -notcontains $app.Content) {
                AddCustomLabel -content $app.Content -panel $DblSelectPanel -Foreground "#a69f6c" -Margin @(15, 5, 15, 4) -FontSize 14 -FontWeight "Bold" -FontFamily "Gadugi"
                $app.IsChecked = $true
                $checkedCount++
            } else {
                $app.IsChecked = $false
            }
        }
    }
    $wpf_DblSelected.Content = "Selected: $checkedCount of $($matchingMsAppx.Count)"
}
function Invoke-UninstallDebloat {
    <#

    .SYNOPSIS
        This function uninstall all selected MS APPX.
    #>

    $DblSelectPanel = $psform.FindName("SetDebloat")
    $DblGetPanel = $psform.FindName("GetDebloat")

    $SelectPanelCount = $DblSelectPanel.Children.Count -gt 0
    $GetPanelCount = $DblGetPanel.Children.Count -gt 0

    # Check if the DoubleSelectPanel exists and has children
    $matched = $false
    if (($DblSelectPanel -and $SelectPanelCount) -and ($DblGetPanel -and $GetPanelCount)) {
        foreach ($childSelect in $DblSelectPanel.Children) {
            if ($childSelect -is [Windows.Controls.Label]) {
                $nameFromSelect = $childSelect.Content

                foreach ($childGet in $DblGetPanel.Children) {
                    if ($childGet -is [Windows.Controls.CheckBox]) {
                        $nameFromGet = $childGet.Content
                        $isChecked = $childGet.IsChecked

                        if ($nameFromSelect -eq $nameFromGet -and $isChecked) {
                            #Write-Host "Found label select: $nameFromSelect, State: $isChecked)"
                            Remove-WinDebloatAPPX -Name $nameFromSelect
                            $matched = $true
                            break
                        }
                    }
                }
            }
        }

        if (-not $matched) {
            Write-Host "Application is unchecked and is not unselect from the list. Please unselect all unchecked APPXs!" -ForegroundColor Red
            Invoke-MessageBox -msg "debloatError"
        }else {
            Invoke-UninstallTeams
            Invoke-MessageBox -msg "debloat"
        }

    } else {
        Write-Host "Please select an APPX!" -ForegroundColor Magenta
        Invoke-MessageBox -msg "debloatInfo"
    }
}
function Invoke-UninstallTeams {
    <#

    .SYNOPSIS
        Remove teams
    #>
    $TeamsPath = [System.IO.Path]::Combine($env:LOCALAPPDATA, 'Microsoft', 'Teams')
    $TeamsUpdateExePath = [System.IO.Path]::Combine($TeamsPath, 'Update.exe')

    Write-Host \"Stopping Teams process...\"
    Stop-Process -Name \"*teams*\" -Force -ErrorAction SilentlyContinue

    Write-Host \"Uninstalling Teams from AppData\\Microsoft\\Teams\"
    if ([System.IO.File]::Exists($TeamsUpdateExePath)) {
        # Uninstall app
        $proc = Start-Process $TeamsUpdateExePath \"-uninstall -s\" -PassThru
        $proc.WaitForExit()
    }

    Write-Host \"Removing Teams AppxPackage...\"
    Get-AppxPackage \"*Teams*\" | Remove-AppxPackage -ErrorAction SilentlyContinue
    Get-AppxPackage \"*Teams*\" -AllUsers | Remove-AppxPackage -AllUsers -ErrorAction SilentlyContinue

    Write-Host \"Deleting Teams directory\"
    if ([System.IO.Directory]::Exists($TeamsPath)) {
        Remove-Item $TeamsPath -Force -Recurse -ErrorAction SilentlyContinue
    }

    Write-Host \"Deleting Teams uninstall registry key\"
    # Uninstall from Uninstall registry key UninstallString
    $us = (Get-ChildItem -Path HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall, HKLM:\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall | Get-ItemProperty | Where-Object { $_.DisplayName -like '*Teams*'}).UninstallString
    if ($us.Length -gt 0) {
        $us = ($us.Replace('/I', '/uninstall ') + ' /quiet').Replace('  ', ' ')
        $FilePath = ($us.Substring(0, $us.IndexOf('.exe') + 4).Trim())
        $ProcessArgs = ($us.Substring($us.IndexOf('.exe') + 5).Trim().replace('  ', ' '))
        $proc = Start-Process -FilePath $FilePath -Args $ProcessArgs -PassThru
        $proc.WaitForExit()
    }
}
function Invoke-UnselectApplicationAll {
    <#

    .SYNOPSIS
        This function Unelect all MS APPX
    #>

    $DblSelectPanel = $psform.FindName("SetDebloat")
    $DblSelectPanel.Children.Clear()
    $checkedCheckboxes = $DblGetPanel.Children
    $wpf_ToggleXboxPreset.IsChecked = $false
    foreach ($app in $checkedCheckboxes) {
        $app.IsChecked = $false
    }
    $wpf_DblSelected.Content = "Selected: 0 of $($matchingMsAppx.Count)"
}

################################################################################################################
###                                                                                                          ###
###                                      INFO: OPTIMIZATION FUNCTIONS                                        ###
###                                                                                                          ###
################################################################################################################

# Load JSON from file
$jsonPath = ".\config\tweaks.json"
$sync = @{
    configs = @{
        tweaks = (Get-Content -Path $jsonPath -Raw | ConvertFrom-Json)
    }
}

function Get-ToggleStatus {
    Param([string]$ToggleSwitch)

    $ToggleSwitchReg = $sync.configs.tweaks.$ToggleSwitch.registry

    try {
        if (($ToggleSwitchReg.path -imatch "hku") -and !(Get-PSDrive -Name HKU -ErrorAction SilentlyContinue)) {
            $null = (New-PSDrive -PSProvider Registry -Name HKU -Root HKEY_USERS)
        }
    } catch {
        Write-Error "An error occurred regarding the HKU Drive: $_"
        return $false
    }

    if ($ToggleSwitchReg) {
        $count = 0

        foreach ($regentry in $ToggleSwitchReg) {
            try {
                if (!(Test-Path $regentry.Path)) {
                    New-Item -Path $regentry.Path -Force | Out-Null
                }

                $regstate = (Get-ItemProperty -Path $regentry.Path -ErrorAction Stop).$($regentry.Name)

                if ($regstate -eq $regentry.Value) {
                    $count += 1
                }
                elseif (-not $regstate) {
                    switch ($regentry.DefaultState) {
                        "true"  { $count += 1 }
                        "false" { }
                        default { }
                    }
                }
            } catch {
                Write-Error "An unexpected error occurred: $_"
            }
        }

        return ($count -eq $ToggleSwitchReg.Count)
    } else {
        return $false
    }
}

# Get all WPF ToggleButtons
$toggleButtons = Get-Variable | Where-Object {
    $_.Name -like "wpf_*" -and
    $_.Value -ne $null -and
    $_.Value.GetType().Name -eq "ToggleButton"
} | ForEach-Object { $_.Value }

# Set each ToggleButton's state at startup
foreach ($btn in $toggleButtons) {
    $toggleName = $btn.Name -replace '^wpf_', ''
    $isChecked = Get-ToggleStatus -ToggleSwitch $toggleName
    $btn.IsChecked = $isChecked
}
function Get-WindowsTheme {
    $themeRegistryPath = 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize'

    $appsTheme = Get-ItemProperty -Path $themeRegistryPath -Name 'AppsUseLightTheme'
    $systemTheme = Get-ItemProperty -Path $themeRegistryPath -Name 'SystemUsesLightTheme'

    if ($appsTheme.AppsUseLightTheme -eq 1) {
        return $false
    } else {
        return $true
    }
}
$wpf_ToggleDarkMode.IsChecked = Get-WindowsTheme
function Set-RegistryValue {
    <#

    .SYNOPSIS
        Modifies the registry based on the given inputs

    .PARAMETER Name
        The name of the key to modify

    .PARAMETER Path
        The path to the key

    .PARAMETER Type
        The type of value to set the key to

    .PARAMETER Value
        The value to set the key to

    .EXAMPLE
        Set-RegistryValue -Name "PublishUserActivities" -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\System" -Type "DWord" -Value "0"

    #>
    param (
        $Name,
        $Path,
        $Type,
        $Value
    )

    try {
        if(!(Test-Path 'HKU:\')) {New-PSDrive -PSProvider Registry -Name HKU -Root HKEY_USERS}

        If (!(Test-Path $Path)) {
            Write-Host "$Path was not found, Creating..."
            New-Item -Path $Path -Force -ErrorAction Stop | Out-Null
        }

        if ($Value -ne "<RemoveEntry>") {
            Write-Host "Set $Path\$Name to $Value"
            Set-ItemProperty -Path $Path -Name $Name -Type $Type -Value $Value -Force -ErrorAction Stop | Out-Null
        }
        else{
            Write-Host "Remove $Path\$Name"
            Remove-ItemProperty -Path $Path -Name $Name -Force -ErrorAction Stop | Out-Null
        }
    } catch [System.Security.SecurityException] {
        Write-Warning "Unable to set $Path\$Name to $Value due to a Security Exception"
    } catch [System.Management.Automation.ItemNotFoundException] {
        Write-Warning $psitem.Exception.ErrorRecord
    } catch [System.UnauthorizedAccessException] {
        Write-Warning $psitem.Exception.Message
    } catch {
        Write-Warning "Unable to set $Name due to unhandled exception"
        Write-Warning $psitem.Exception.StackTrace
    }
}
function Set-ScheduledTask {
    <#

    .SYNOPSIS
        Disables the provided Scheduled Task

    .PARAMETER Name
        The path to the Scheduled Task

    .PARAMETER State
        The State to set the Task to

    .EXAMPLE
        Set-ScheduledTask -Name "Microsoft\Windows\Application Experience\Microsoft Compatibility Appraiser" -State "Disabled"

    #>
    param (
        $Name,
        $State
    )

    try {
        if($State -eq "Disabled") {
            Write-Host "Disabling Scheduled Task $Name"
            Disable-ScheduledTask -TaskName $Name -ErrorAction Stop
        }
    } catch [System.Exception] {
        if($psitem.Exception.Message -like "*The system cannot find the file specified*") {
            Write-Warning "Scheduled Task $name was not Found"
        } else {
            Write-Warning "Unable to set $Name due to unhandled exception"
            Write-Warning $psitem.Exception.Message
        }
    } catch {
        Write-Warning "Unable to run script for $name due to unhandled exception"
        Write-Warning $psitem.Exception.StackTrace
    }
}
function Invoke-OptimizationButton {
    <#
    .SYNOPSIS
        Applies all selected CheckBox tweaks dynamically and resets their state.
    #>

    # Loop through all tweaks
    foreach ($toggleName in $tweaks.PSObject.Properties.Name) {
        $tweak = $tweaks.$toggleName

        $apply = $false

        switch ($tweak.Type) {
            "ScheduledTask" {
                $apply = $true
            }
            "CheckBox" {
                $controlVar = Get-Variable -Name "wpf_$toggleName" -ErrorAction SilentlyContinue
                if ($controlVar) {
                    $apply = [bool]$controlVar.Value.IsChecked
                } elseif ($tweak.DefaultState) {
                    $apply = [bool]$tweak.DefaultState
                }
            }
            "InvokeScript" {
                $apply = $true
            }
        }

        # Apply registry changes if available and checkbox/toggle is checked
        if ($apply) {
            if ($tweak.ScheduledTask) {
                Write-Host "ScheduledTask:" $tweak.message -ForegroundColor Green
                foreach ($task in $tweak.ScheduledTask) {
                    try {
                        Set-ScheduledTask -Name $task.Name -State $task.State
                    } catch {
                        Write-Warning "Failed to set scheduled task '$($task.Name)' to $($task.State): $_"
                    }
                }
            }

            if ($tweak.Registry) {
                Write-Host "Registry:" $tweak.message -ForegroundColor Green
                foreach ($regEntry in $tweak.Registry) {
                    try { 
                        Set-RegistryValue -Path $regEntry.Path -Name $regEntry.Name -Type $regEntry.Type -Value $regEntry.Value }
                    catch { 
                        Write-Warning "Failed to apply registry tweak: $_" }
                }
            }
            if ($tweak.InvokeScript) {
                Write-Host "InvokeScript:" $tweak.message -ForegroundColor Green
                foreach ($script in $tweak.InvokeScript) {
                    Invoke-Expression $script
                }
            }
        }

    }

    Invoke-MessageBox -msg "tweak"
}


# function Invoke-optimizationButton{
#     <#

#     .SYNOPSIS
#         This function run selected tweaks
#         Unselect tweaks after tweaking
#     #>

#     # Invoke restore point
#     If ( $wpf_DblSystemRestore.IsChecked -eq $true ) {
#         Write-Host "Making Restore Point..." -ForegroundColor Green
#         Set-RestorePoint
#     }
#     # Essential Tweaks
#     If ( $wpf_DblTelemetry.IsChecked -eq $true ) {
#         Write-Host "Disabling Telemetry..." -ForegroundColor Green
#         Set-ScheduledTask -Name "Microsoft\Windows\Application Experience\Microsoft Compatibility Appraiser" -State "Disabled"
#         Set-ScheduledTask -Name "Microsoft\Windows\Application Experience\ProgramDataUpdater" -State "Disabled"
#         Set-ScheduledTask -Name "Microsoft\Windows\Autochk\Proxy" -State "Disabled"
#         Set-ScheduledTask -Name "Microsoft\Windows\Customer Experience Improvement Program\Consolidator" -State "Disabled"
#         Set-ScheduledTask -Name "Microsoft\Windows\Customer Experience Improvement Program\UsbCeip" -State "Disabled"
#         Set-ScheduledTask -Name "Microsoft\Windows\DiskDiagnostic\Microsoft-Windows-DiskDiagnosticDataCollector" -State "Disabled"
#         Set-ScheduledTask -Name "Microsoft\Windows\Feedback\Siuf\DmClient" -State "Disabled"
#         Set-ScheduledTask -Name "Microsoft\Windows\Feedback\Siuf\DmClientOnScenarioDownload" -State "Disabled"
#         Set-ScheduledTask -Name "Microsoft\Windows\Windows Error Reporting\QueueReporting" -State "Disabled"
#         Set-ScheduledTask -Name "Microsoft\Windows\Application Experience\MareBackup" -State "Disabled"
#         Set-ScheduledTask -Name "Microsoft\Windows\Application Experience\StartupAppTask" -State "Disabled"
#         Set-ScheduledTask -Name "Microsoft\Windows\Application Experience\PcaPatchDbTask" -State "Disabled"
#         Set-ScheduledTask -Name "Microsoft\Windows\Maps\MapsUpdateTask" -State "Disabled"
        
#         Set-RegistryValue -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\DataCollection" -Name "AllowTelemetry" -Type "DWord" -Value 0
#         Set-RegistryValue -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\DataCollection" -Name "AllowTelemetry" -Type "DWord" -Value 0
#         Set-RegistryValue -Path "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" -Name "OemPreInstalledAppsEnabled" -Type "DWord" -Value 0
#         Set-RegistryValue -Path "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" -Name "ContentDeliveryAllowed" -Type "DWord" -Value 0
#         Set-RegistryValue -Path "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" -Name "PreInstalledAppsEnabled" -Type "DWord" -Value 0
#         Set-RegistryValue -Path "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" -Name "PreInstalledAppsEverEnabled" -Type "DWord" -Value 0
#         Set-RegistryValue -Path "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" -Name "SilentInstalledAppsEnabled" -Type "DWord" -Value 0
#         Set-RegistryValue -Path "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" -Name "SubscribedContent-338387Enabled" -Type "DWord" -Value 0
#         Set-RegistryValue -Path "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" -Name "SubscribedContent-338388Enabled" -Type "DWord" -Value 0
#         Set-RegistryValue -Path "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" -Name "SubscribedContent-338389Enabled" -Type "DWord" -Value 0
#         Set-RegistryValue -Path "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" -Name "SubscribedContent-353698Enabled" -Type "DWord" -Value 0
#         Set-RegistryValue -Path "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" -Name "SystemPaneSuggestionsEnabled" -Type "DWord" -Value 0
#         Set-RegistryValue -Path "HKCU:\SOFTWARE\Microsoft\Siuf\Rules" -Name "NumberOfSIUFInPeriod" -Type "DWord" -Value 0
#         Set-RegistryValue -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\DataCollection" -Name "DoNotShowFeedbackNotifications" -Type "DWord" -Value 1
#         Set-RegistryValue -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\DataCollection" -Name "DisableTailoredExperiencesWithDiagnosticData" -Type "DWord" -Value 1
#         Set-RegistryValue -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\AdvertisingInfo" -Name "DisabledByGroupPolicy" -Type "DWord" -Value 1
#         Set-RegistryValue -Path "HKLM:\SOFTWARE\Microsoft\Windows\Windows Error Reporting" -Name "Disabled" -Type "DWord" -Value 1
#         Set-RegistryValue -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\DeliveryOptimization\Config" -Name "DODownloadMode" -Type "DWord" -Value 1
#         Set-RegistryValue -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Remote Assistance" -Name "fAllowToGetHelp" -Type "DWord" -Value 0
#         Set-RegistryValue -Path "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\OperationStatusManager" -Name "EnthusiastMode" -Type "DWord" -Value 1
#         Set-RegistryValue -Path "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" -Name "PeopleBand" -Type "DWord" -Value 0
#         Set-RegistryValue -Path "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" -Name "LongPathsEnabled" -Type "DWord" -Value 1
#         Set-RegistryValue -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\DriverSearching" -Name "SearchOrderConfig" -Type "DWord" -Value 1
#         Set-RegistryValue -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile" -Name "SystemResponsiveness" -Type "DWord" -Value 0
#         Set-RegistryValue -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile" -Name "NetworkThrottlingIndex" -Type "DWord" -Value 4294967295
#         Set-RegistryValue -Path "HKCU:\Control Panel\Desktop" -Name "MenuShowDelay" -Type "DWord" -Value 1
#         Set-RegistryValue -Path "HKCU:\Control Panel\Desktop" -Name "AutoEndTasks" -Type "DWord" -Value 1
#         Set-RegistryValue -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management" -Name "ClearPageFileAtShutdown" -Type "DWord" -Value 0
#         Set-RegistryValue -Path "HKLM:\SYSTEM\ControlSet001\Services\Ndu" -Name "Start" -Type "DWord" -Value 2
#         Set-RegistryValue -Path "HKCU:\Control Panel\Mouse" -Name "MouseHoverTime" -Type "DWord" -Value 400
#         Set-RegistryValue -Path "HKLM:\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters" -Name "IRPStackSize" -Type "DWord" -Value 30
#         Set-RegistryValue -Path "HKCU:\SOFTWARE\Policies\Microsoft\Windows\Windows Feeds" -Name "EnableFeeds" -Type "DWord" -Value 0
#         Set-RegistryValue -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Feeds" -Name "ShellFeedsTaskbarViewMode" -Type "DWord" -Value 2
#         Set-RegistryValue -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" -Name "HideSCAMeetNow" -Type "DWord" -Value 1
#         Set-RegistryValue -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\UserProfileEngagement" -Name "ScoobeSystemSettingEnabled" -Type "DWord" -Value 0
        
#         $InvokeScript = [ScriptBlock]::Create(@'
# bcdedit /set {current} bootmenupolicy Legacy | Out-Null

# If ((Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion" -Name CurrentBuild).CurrentBuild -lt 22557) {
#     $taskmgr = Start-Process -WindowStyle Hidden -FilePath taskmgr.exe -PassThru
#     Do {
#         Start-Sleep -Milliseconds 100
#         $preferences = Get-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\TaskManager" -Name "Preferences" -ErrorAction SilentlyContinue
#     } Until ($preferences)
#     Stop-Process $taskmgr
#     $preferences.Preferences[28] = 0
#     Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\TaskManager" -Name "Preferences" -Type Binary -Value $preferences.Preferences
# }

# Remove-Item -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\{0DB7E03F-FC29-4DC6-9020-FF41B59E513A}" -Recurse -ErrorAction SilentlyContinue

# If (Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Edge") {
#     Remove-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Edge" -Recurse -ErrorAction SilentlyContinue
# }

# $ram = (Get-CimInstance -ClassName Win32_PhysicalMemory | Measure-Object -Property Capacity -Sum).Sum / 1kb
# Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control" -Name "SvcHostSplitThresholdInKB" -Type DWord -Value $ram -Force

# $autoLoggerDir = "$env:PROGRAMDATA\Microsoft\Diagnosis\ETLLogs\AutoLogger"
# If (Test-Path "$autoLoggerDir\AutoLogger-Diagtrack-Listener.etl") {
#     Remove-Item "$autoLoggerDir\AutoLogger-Diagtrack-Listener.etl"
# }
# icacls $autoLoggerDir "/deny" "SYSTEM:(OI)(CI)F" | Out-Null

# Set-MpPreference -SubmitSamplesConsent 2 -ErrorAction SilentlyContinue | Out-Null
# '@)

#         Invoke-Scripts -ScriptBlock $InvokeScript -Name "InvokeScript"


#         $wpf_DblTelemetry.IsChecked = $false
#     }
#     If ( $wpf_DblWifi.IsChecked -eq $true ) {
#         Write-Host "Disabling Wi-Fi Sense..." -ForegroundColor Green
#         Set-RegistryValue -Path "HKLM:\Software\Microsoft\PolicyManager\default\WiFi\AllowWiFiHotSpotReporting" -Name "Value" -Type "DWord" -Value 0
#         Set-RegistryValue -Path "HKLM:\Software\Microsoft\PolicyManager\default\WiFi\AllowAutoConnectToWiFiSenseHotspots" -Name "Value" -Type "DWord" -Value 0
#         $wpf_DblWifi.IsChecked = $false
#     }
#     If ( $wpf_DblAH.IsChecked -eq $true ) {
#             Write-Host "Disabling Activity History..." -ForegroundColor Green
#             Set-RegistryValue -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\System" -Name "EnableActivityFeed" -Type "DWord" -Value 0
#             Set-RegistryValue -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\System" -Name "PublishUserActivities" -Type "DWord" -Value 0
#             Set-RegistryValue -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\System" -Name "UploadUserActivities" -Type "DWord" -Value 0
#             $wpf_DblAH.IsChecked = $false
#     }
#     If ( $wpf_DblDeleteTempFiles.IsChecked -eq $true ) {
#         Write-Host "Delete Temp Files" -ForegroundColor Green
#         Get-ChildItem -Path "C:\Windows\Temp" *.* -Recurse | Remove-Item -Force -Recurse -ErrorAction SilentlyContinue
#         Get-ChildItem -Path $env:TEMP *.* -Recurse | Remove-Item -Force -Recurse -ErrorAction SilentlyContinue
#         $wpf_DblDeleteTempFiles.IsChecked = $false
#         Write-Host "======================================="
#         Write-Host "--- Cleaned following folders:"
#         Write-Host "--- C:\Windows\Temp"
#         Write-Host "--- "$env:TEMP
#         Write-Host "======================================="
#     }
#     If ( $wpf_DblRecycleBin.IsChecked -eq $true ) {
#         Write-Host "Empting Recycle Bin..." -ForegroundColor Green
#         Clear-RecycleBin -Force
#         $wpf_DblRecycleBin.IsChecked = $false
#     }
#     If ( $wpf_DblDiskCleanup.IsChecked -eq $true ) {
#         Write-Host "Running Disk Cleanup on Drive C:..." -ForegroundColor Green
#         cmd /c cleanmgr.exe /d C: /VERYLOWDISK
#         $wpf_DblDiskCleanup.IsChecked = $false
#     }
#     If ( $wpf_DblLocTrack.IsChecked -eq $true ) {
#         Write-Host "Disabling Location Tracking..." -ForegroundColor Green
#         Set-RegistryValue -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\CapabilityAccessManager\ConsentStore\location" -Name "Value" -Type "String" -Value "Deny"
#         Set-RegistryValue -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Sensor\Overrides\{BFA794E4-F964-4FDB-90F6-51056BFE4B44}" -Name "SensorPermissionState" -Type "DWord" -Value 0
#         Set-RegistryValue -Path "HKLM:\SYSTEM\CurrentControlSet\Services\lfsvc\Service\Configuration" -Name "Status" -Type "DWord" -Value 0
#         Set-RegistryValue -Path "HKLM:\SYSTEM\Maps" -Name "AutoUpdateEnabled" -Type "DWord" -Value 0

#         $wpf_DblLocTrack.IsChecked = $false
#     }
#     If ( $wpf_DblStorage.IsChecked -eq $true ) {
#         Write-Host "Disabling Storage Sense..." -ForegroundColor Green
#         Set-ItemProperty -Path "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\StorageSense\Parameters\StoragePolicy" -Name "01" -Value 0 -Type Dword -Force
#         $wpf_DblStorage.IsChecked = $false
#     }
#     If ( $wpf_DblHiber.IsChecked -eq $true  ) {
#         Write-Host "Disabling Hibernation..." -ForegroundColor Green
#         Set-RegistryValue -Path "HKLM:\System\CurrentControlSet\Control\Session Manager\Power" -Name "HibernateEnabled" -Type "Dword" -Value 0
#         Set-RegistryValue -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FlyoutMenuSettings" -Name "ShowHibernateOption" -Type "Dword" -Value 0
        
#         $InvokeScript = [ScriptBlock]::Create(@'
#         powercfg.exe /hibernate off
# '@)
#         Invoke-Scripts -ScriptBlock $InvokeScript -Name "InvokeScript"
#         $wpf_DblHiber.IsChecked = $false
#     }
#     If ( $wpf_DblDVR.IsChecked -eq $true ) {
#         Write-Host "Disabling GameDVR..." -ForegroundColor Green
#         Set-RegistryValue -Path "HKCU:\System\GameConfigStore" -Name "GameDVR_DXGIHonorFSEWindowsCompatible" -Type "DWord" -Value 1
#         Set-RegistryValue -Path "HKCU:\System\GameConfigStore" -Name "GameDVR_HonorUserFSEBehaviorMode" -Type "DWord" -Value 1
#         Set-RegistryValue -Path "HKCU:\System\GameConfigStore" -Name "GameDVR_EFSEFeatureFlags" -Type "DWord" -Value 0
#         Set-RegistryValue -Path "HKCU:\System\GameConfigStore" -Name "GameDVR_Enabled" -Type "DWord" -Value 0
#         Set-RegistryValue -Path "HKCU:\System\GameConfigStore" -Name "GameDVR_FSEBehavior" -Type "DWord" -Value 2
#         Set-RegistryValue -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\GameDVR" -Name "AllowGameDVR" -Type "DWord" -Value 0
#         $wpf_DblDVR.IsChecked = $false
#     }
#     If ( $wpf_DblCoreIsolation.IsChecked -eq $true ) {
#         Write-Host "Disabling Core Isolation..." -ForegroundColor Green
#         Set-RegistryValue -Path "HKLM:\SYSTEM\CurrentControlSet\Control\DeviceGuard\Scenarios\HypervisorEnforcedCodeIntegrity" -Name "Enabled" -Type "DWord" -Value 0
#         $wpf_DblCoreIsolation.IsChecked = $false
#     }
#     If ( $wpf_DblDisableTeredo.IsChecked -eq $true ) {
#         Write-Host "Disabling Teredo..." -ForegroundColor Green
#         Set-RegistryValue -Path "HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip6\Parameters" -Name "DisabledComponents" -Type "DWord" -Value 1
#         $wpf_DblDisableTeredo.IsChecked = $false
#     }
#     If ( $wpf_DblAutoAdjustVolume.IsChecked -eq $true ) {
#         Write-Host "Disabling Auto Adjust Volume..." -ForegroundColor Green
#         # dword:00000000: Mute all other sounds
#         # dword:00000001: Reduce all other by 80%
#         # dword:00000002: Reduce all other by 50%
#         # dword:00000003: Do nothing
#         Set-RegistryValue -Path "HKCU:\Software\Microsoft\Multimedia\Audio" -Name "UserDuckingPreference" -Type "DWord" -Value 3
#         $wpf_DblAutoAdjustVolume.IsChecked = $false
#     }
#     If ( $wpf_DblSearchIndexer.IsChecked -eq $true ) {
#         Write-Host "Disabling search indexer..." -ForegroundColor Green
#         Get-Service -Name "wsearch" -ErrorAction SilentlyContinue | Stop-Service -ErrorAction SilentlyContinue
#         Get-Service -Name "wsearch" -ErrorAction SilentlyContinue | Set-Service -StartupType Disabled -ErrorAction SilentlyContinue
#         $wpf_DblSearchIndexer.IsChecked = $false
#     }
#     If ( $wpf_DblPS7Telemetry.IsChecked -eq $true ) {
#         Write-Host "Disabling Powershell 7 Telemetry..." -ForegroundColor Green
#         "[Environment]::SetEnvironmentVariable('POWERSHELL_TELEMETRY_OPTOUT', '1', 'Machine')"
#         $wpf_DblPS7Telemetry.IsChecked = $false
#     }
#     If ( $wpf_DblConsumerFeatures.IsChecked -eq $true ) {
#         Write-Host "Disabling ConsumerFeatures..." -ForegroundColor Green 
#         Set-RegistryValue -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\CloudContent" -Name "DisableWindowsConsumerFeatures" -Type "DWord" -Value 1
#         $wpf_DblConsumerFeatures.IsChecked = $false
#     }

#     # Additional Tweaks
#     If ( $wpf_DblPower.IsChecked -eq $true ) {
#         Write-Host "Disabling Power Throttling..." -ForegroundColor Green        
#         Set-RegistryValue -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Power\PowerThrottling" -Name "PowerThrottlingOff" -Type "DWord" -Value 1
#         Set-RegistryValue -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Power" -Name "HiberbootEnabled" -Type "DWord" -Value 0
#         $wpf_DblPower.IsChecked = $false 
#     }
#     If ( $wpf_DblDisplay.IsChecked -eq $true ) {
#         # https://www.tenforums.com/tutorials/6377-change-visual-effects-settings-windows-10-a.html
#         # https://superuser.com/questions/1244934/reg-file-to-modify-windows-10-visual-effects
#         Write-Host "Adjusted visual effects for performance" -ForegroundColor Green        
#         Set-RegistryValue -Path "HKCU:\Control Panel\Desktop" -Name "DragFullWindows" -Type "String" -Value 1
#         Set-RegistryValue -Path "HKCU:\Control Panel\Desktop" -Name "MenuShowDelay" -Type "String" -Value 0
#         Set-RegistryValue -Path "HKCU:\Control Panel\Desktop\WindowMetrics" -Name "MinAnimate" -Type "String" -Value 0
#         Set-RegistryValue -Path "HKCU:\Control Panel\Keyboard" -Name "KeyboardDelay" -Type "DWord" -Value 1
#         Set-RegistryValue -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" -Name "ListviewAlphaSelect" -Type "DWord" -Value 1
#         Set-RegistryValue -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" -Name "ListviewShadow" -Type "DWord" -Value 0
#         Set-RegistryValue -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" -Name "TaskbarAnimations" -Type "DWord" -Value 0
#         Set-RegistryValue -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" -Name "IconsOnly" -Type "DWord" -Value 0
#         Set-RegistryValue -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects" -Name "VisualFXSetting" -Type "DWord" -Value 3
#         Set-RegistryValue -Path "HKCU:\Software\Microsoft\Windows\DWM" -Name "EnableAeroPeek" -Type "DWord" -Value 1

#         $InvokeScript = [ScriptBlock]::Create(@'
#         Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name "UserPreferencesMask" -Type Binary -Value ([byte[]](144, 18, 3, 128, 18, 0, 0, 0))
# '@)
#         Invoke-Scripts -ScriptBlock $InvokeScript -Name "InvokeScript"
#         $wpf_DblDisplay.IsChecked = $false
#     }
#     If ( $wpf_DblUTC.IsChecked -eq $true ) {
#         Write-Host "Setting BIOS time to UTC..." -ForegroundColor Green
#         Set-RegistryValue -Path "HKLM:\SYSTEM\CurrentControlSet\Control\TimeZoneInformation" -Name "RealTimeIsUniversal" -Type "DWord" -Value 1
#         $wpf_DblUTC.IsChecked = $false
#     }
#     If ( $wpf_DblDisableUAC.IsChecked -eq $true) {
#         Write-Host "Disabling UAC..." -ForegroundColor Green
#         Set-RegistryValue -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "ConsentPromptBehaviorAdmin" -Type "DWord" -Value 0 # Default is 5
#         # This will set the GPO Entry in Security so that Admin users elevate without any prompt while normal users still elevate and u can even leave it ennabled.
#         $wpf_DblDisableUAC.IsChecked = $false
#     }
#     If ( $wpf_DblDisableNotifications.IsChecked -eq $true ) {
#         Write-Host "Disabling Notification Tray/Calendar..." -ForegroundColor Green
#         Set-RegistryValue -Path "HKCU:\Software\Policies\Microsoft\Windows\Explorer" -Name "DisableNotificationCenter" -Type "DWord" -Value 1
#         Set-RegistryValue -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\PushNotifications" -Name "ToastEnabled" -Type "DWord" -Value 0
#         $wpf_DblDisableNotifications.IsChecked = $false
#     }
#     If ( $wpf_DblRemoveCortana.IsChecked -eq $true ) {
#         Write-Host "Removing Cortana..."
#         Get-AppxPackage -allusers Microsoft.549981C3F5F10 | Remove-AppxPackage
#         $wpf_DblRemoveCortana.IsChecked = $false
#     }
#     If ( $wpf_DblRemoveWidgets.IsChecked -eq $true ) {
#         Write-Host "Removing Widgets..."
#         Get-AppxPackage -allusers MicrosoftWindows.Client.WebExperience | Remove-AppxPackage
#         $wpf_DblRemoveWidgets.IsChecked = $false
#     }
#     If ( $wpf_DblClassicAltTab.IsChecked -eq $true ) {
#         Write-Host "Setting Classic Alt+Tab..." -ForegroundColor Green
#         Set-RegistryValue -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" -Name "MultiTaskingAltTabFilter" -Type "DWord" -Value 3       
#         $wpf_DblClassicAltTab.IsChecked = $false
#     }
#     If ( $wpf_DblRightClickMenu.IsChecked -eq $true ) {
#         Write-Host "Setting Classic Right-Click Menu..." -ForegroundColor Green
#         Write-Host Restarting explorer.exe ... -ForegroundColor Blue
#         taskkill.exe /F /IM "explorer.exe"
#         New-Item -Path "HKCU:\Software\Classes\CLSID\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}" -Name "InprocServer32" -force -value ""       
#         Start-Process "explorer.exe"
#         $wpf_DblRightClickMenu.IsChecked = $false
#     }
#     If ( $wpf_DblGameMode.IsChecked -eq $true ) {
#         Write-Host "Enabling Game Mode..." -ForegroundColor Green
#         Set-RegistryValue -Path "HKCU:\Software\Microsoft\GameBar" -Name "AllowAutoGameMode" -Type "DWord" -Value 3       
#         $wpf_DblGameMode.IsChecked -eq $false
#     }
#     If ( $wpf_DblGameBar.IsChecked -eq $true ) {
#         Write-Host "Disabling Game Bar..." -ForegroundColor Green
#         Set-RegistryValue -Path "HKCU:\Software\Microsoft\GameBar" -Name "UseNexusForGameBarEnabled" -Type "DWord" -Value 0      
#         $wpf_DblGameBar.IsChecked = $false
#     }
#     If ( $wpf_DblWindowsSound.IsChecked -eq $true ) {
#         Write-Host "Disabling Windows Sound..." -ForegroundColor Green
#         Set-RegistryValue -Path "HKCU:\AppEvents\Schemes" -Name "(Default)" -Type "String" -Value ".None"
#         $wpf_DblWindowsSound.IsChecked = $false
#     }
#     If ( $wpf_DblPersonalize.IsChecked -eq $true ) {
#         Write-Host "Adjusting Personalization Settings..." -ForegroundColor Green       
#         #hide search icon, show transparency effect, colors, lock screen, power
#         Set-RegistryValue -Path "HKCU:\Software\Policies\Microsoft\Windows\Explorer" -Name "HideTaskViewButton" -Type "DWord" -Value 1
#         Set-RegistryValue -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Explorer" -Name "HideTaskViewButton" -Type "DWord" -Value 1
        
#         Set-RegistryValue -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize" -Name "EnableTransparency" -Type "DWord" -Value 1
        
#         Set-RegistryValue -Path "HKCU:\Control Panel\Desktop" -Name "AutoColorization" -Type "DWord" -Value 0
#         Set-RegistryValue -Path "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Accent" -Name "AccentColorMenu" -Type "DWord" -Value 0xffd47800

#         $InvokeScript = [ScriptBlock]::Create(@'
#         Set-RegistryValue -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Accent" -Name "AccentPalette" -Type Binary -Value ([byte[]](0x99,0xEB,0xFF,0x00,0x41,0xF8,0x00,0x00,0x78,0xD4,0x00,0x00,0x67,0xC0,0x00,0x00,0x3E,0x92,0x00,0x00,0x1A,0x68,0x00,0xF7,0x63,0x0C,0x00))
# '@)
#         Invoke-Scripts -ScriptBlock $InvokeScript -Name "InvokeScript"

#         Set-RegistryValue -Path "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Accent" -Name "StartColorMenu" -Type "DWord" -Value 0xffc06700
        
#         Set-RegistryValue -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize" -Name "ColorPrevalence" -Type "DWord" -Value 0
#         Set-RegistryValue -Path "HKCU:\Software\Microsoft\Windows\DWM" -Name "ColorPrevalence" -Type "DWord" -Value 0

#         Set-RegistryValue -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Personalization" -Name "NoLockScreen" -Type "DWord" -Value 1
#         Set-RegistryValue -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Personalization" -Name "NoLockScreenSlideshow" -Type "DWord" -Value 1
#         Set-RegistryValue -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" -Name "FeatureManagementEnabled" -Type "DWord" -Value 0
#         Set-RegistryValue -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" -Name "OemPreInstalledAppsEnabled" -Type "DWord" -Value 0
#         Set-RegistryValue -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" -Name "PreInstalledAppsEnabled" -Type "DWord" -Value 0
#         Set-RegistryValue -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" -Name "RotatingLockScreenEnabled" -Type "DWord" -Value 0
#         Set-RegistryValue -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" -Name "RotatingLockScreenOverlayEnabled" -Type "DWord" -Value 0
#         Set-RegistryValue -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" -Name "SoftLandingEnabled" -Type "DWord" -Value 0
#         Set-RegistryValue -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" -Name "SystemPaneSuggestionsEnabled" -Type "DWord" -Value 0
#         Set-RegistryValue -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" -Name "SubscribedContentEnabled" -Type "DWord" -Value 0
#         Set-RegistryValue -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" -Name "ContentDeliveryAllowed" -Type "DWord" -Value 1
#         Set-RegistryValue -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" -Name "SilentInstalledAppsEnabled" -Type "DWord" -Value 0
#         Set-RegistryValue -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" -Name "PreInstalledAppsEverEnabled" -Type "DWord" -Value 0
#         Set-RegistryValue -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" -Name "RemediationRequired" -Type "DWord" -Value 0
#         Set-RegistryValue -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" -Name "SubscribedContent-338387Enabled" -Type "DWord" -Value 0
#         Set-RegistryValue -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" -Name "SubscribedContent-338388Enabled" -Type "DWord" -Value 0
#         Set-RegistryValue -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" -Name "SubscribedContent-338389Enabled" -Type "DWord" -Value 0
#         Set-RegistryValue -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" -Name "SubscribedContent-310093Enabled" -Type "DWord" -Value 0
#         Set-RegistryValue -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" -Name "SubscribedContent-338393Enabled" -Type "DWord" -Value 0
#         Set-RegistryValue -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" -Name "SubscribedContent-314563Enabled" -Type "DWord" -Value 0
#         Set-RegistryValue -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" -Name "SubscribedContent-353698Enabled" -Type "DWord" -Value 0
#         Set-RegistryValue -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" -Name "SubscribedContent-353694Enabled" -Type "DWord" -Value 0
#         Set-RegistryValue -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\System" -Name "DisableLogonBackgroundImage" -Type "DWord" -Value 0

        
#         powercfg -x -disk-timeout-ac 0
#         powercfg -x -disk-timeout-dc 0
#         powercfg -x -monitor-timeout-ac 20
#         powercfg -x -monitor-timeout-dc 20


#         $wpf_DblPersonalize.IsChecked = $false
#     }
#     If ( $wpf_DblRemoveEdge.IsChecked -eq $true ) {
#         # Standalone script by AveYo Source: https://raw.githubusercontent.com/AveYo/fox/main/Edge_Removal.bat

#         curl.exe "https://raw.githubusercontent.com/vukilis/Windows11-Optimizer-Debloater/main/edgeremoval.bat" -o $ENV:temp\\edgeremoval.bat
#         Start-Process $ENV:temp\\edgeremoval.bat

#         $wpf_DblRemoveEdge.IsChecked= $false
#     }
#     If ( $wpf_DblOneDrive.IsChecked -eq $true ) {
#         $InvokeScript = [ScriptBlock]::Create(@'
        
#         $OneDrivePath = $($env:OneDrive)
#         Write-Host "Removing OneDrive" -ForegroundColor Green
#         $regPath = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Uninstall\OneDriveSetup.exe"
#         if (Test-Path $regPath) {
#             $OneDriveUninstallString = Get-ItemPropertyValue "$regPath" -Name "UninstallString"
#             $OneDriveExe, $OneDriveArgs = $OneDriveUninstallString.Split(" ")
#             Start-Process -FilePath $OneDriveExe -ArgumentList "$OneDriveArgs /silent" -NoNewWindow -Wait
#         } else {
#             Write-Host "Onedrive dosn't seem to be installed anymore" -ForegroundColor Red
#             return
#         }
#         # Check if OneDrive got Uninstalled
#         if (-not (Test-Path $regPath)) {
#         Write-Host "Copy downloaded Files from the OneDrive Folder to Root UserProfile"
#         Start-Process -FilePath powershell -ArgumentList "robocopy '$($OneDrivePath)' '$($env:USERPROFILE.TrimEnd())\' /mov /e /xj" -NoNewWindow -Wait

#         Write-Host "Removing OneDrive leftovers"
#         Remove-Item -Recurse -Force -ErrorAction SilentlyContinue "$env:localappdata\Microsoft\OneDrive"
#         Remove-Item -Recurse -Force -ErrorAction SilentlyContinue "$env:localappdata\OneDrive"
#         Remove-Item -Recurse -Force -ErrorAction SilentlyContinue "$env:programdata\Microsoft OneDrive"
#         Remove-Item -Recurse -Force -ErrorAction SilentlyContinue "$env:systemdrive\OneDriveTemp"
#         reg delete "HKEY_CURRENT_USER\Software\Microsoft\OneDrive" -f
#         # check if directory is empty before removing:
#         If ((Get-ChildItem "$OneDrivePath" -Recurse | Measure-Object).Count -eq 0) {
#             Remove-Item -Recurse -Force -ErrorAction SilentlyContinue "$OneDrivePath"
#         }

#         Write-Host "Remove Onedrive from explorer sidebar"
#         Set-ItemProperty -Path "Registry::HKEY_CLASSES_ROOT\CLSID\{018D5C66-4533-4307-9B53-224DE2ED1FE6}" -Name "System.IsPinnedToNameSpaceTree" -Value 0
#         Set-ItemProperty -Path "Registry::HKEY_CLASSES_ROOT\Wow6432Node\CLSID\{018D5C66-4533-4307-9B53-224DE2ED1FE6}" -Name "System.IsPinnedToNameSpaceTree" -Value 0

#         Write-Host "Removing run hook for new users"
#         reg load "hku\Default" "C:\Users\Default\NTUSER.DAT"
#         reg delete "HKEY_USERS\Default\SOFTWARE\Microsoft\Windows\CurrentVersion\Run" /v "OneDriveSetup" /f
#         reg unload "hku\Default"

#         Write-Host "Removing startmenu entry"
#         Remove-Item -Force -ErrorAction SilentlyContinue "$env:userprofile\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\OneDrive.lnk"

#         Write-Host "Removing scheduled task"
#         Get-ScheduledTask -TaskPath '\' -TaskName 'OneDrive*' -ea SilentlyContinue | Unregister-ScheduledTask -Confirm:$false

#         # Add Shell folders restoring default locations
#         Write-Host "Shell Fixing"
#         Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders" -Name "AppData" -Value "$env:userprofile\AppData\Roaming" -Type ExpandString
#         Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders" -Name "Cache" -Value "$env:userprofile\AppData\Local\Microsoft\Windows\INetCache" -Type ExpandString
#         Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders" -Name "Cookies" -Value "$env:userprofile\AppData\Local\Microsoft\Windows\INetCookies" -Type ExpandString
#         Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders" -Name "Favorites" -Value "$env:userprofile\Favorites" -Type ExpandString
#         Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders" -Name "History" -Value "$env:userprofile\AppData\Local\Microsoft\Windows\History" -Type ExpandString
#         Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders" -Name "Local AppData" -Value "$env:userprofile\AppData\Local" -Type ExpandString
#         Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders" -Name "My Music" -Value "$env:userprofile\Music" -Type ExpandString
#         Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders" -Name "My Video" -Value "$env:userprofile\Videos" -Type ExpandString
#         Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders" -Name "NetHood" -Value "$env:userprofile\AppData\Roaming\Microsoft\Windows\Network Shortcuts" -Type ExpandString
#         Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders" -Name "PrintHood" -Value "$env:userprofile\AppData\Roaming\Microsoft\Windows\Printer Shortcuts" -Type ExpandString
#         Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders" -Name "Programs" -Value "$env:userprofile\AppData\Roaming\Microsoft\Windows\Start Menu\Programs" -Type ExpandString
#         Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders" -Name "Recent" -Value "$env:userprofile\AppData\Roaming\Microsoft\Windows\Recent" -Type ExpandString
#         Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders" -Name "SendTo" -Value "$env:userprofile\AppData\Roaming\Microsoft\Windows\SendTo" -Type ExpandString
#         Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders" -Name "Start Menu" -Value "$env:userprofile\AppData\Roaming\Microsoft\Windows\Start Menu" -Type ExpandString
#         Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders" -Name "Startup" -Value "$env:userprofile\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup" -Type ExpandString
#         Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders" -Name "Templates" -Value "$env:userprofile\AppData\Roaming\Microsoft\Windows\Templates" -Type ExpandString
#         Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders" -Name "{374DE290-123F-4565-9164-39C4925E467B}" -Value "$env:userprofile\Downloads" -Type ExpandString
#         Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders" -Name "Desktop" -Value "$env:userprofile\Desktop" -Type ExpandString
#         Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders" -Name "My Pictures" -Value "$env:userprofile\Pictures" -Type ExpandString
#         Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders" -Name "Personal" -Value "$env:userprofile\Documents" -Type ExpandString
#         Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders" -Name "{F42EE2D3-909F-4907-8871-4C22FC0BF756}" -Value "$env:userprofile\Documents" -Type ExpandString
#         Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders" -Name "{0DDD015D-B06C-45D5-8C4C-F59713854639}" -Value "$env:userprofile\Pictures" -Type ExpandString
#         Write-Host "Restarting explorer"
#         taskkill.exe /F /IM "explorer.exe"
#         Start-Process "explorer.exe"

#         Write-Host "Waiting for explorer to complete loading"
#         Write-Host "Please Note - The OneDrive folder at $OneDrivePath may still have items in it. You must manually delete it, but all the files should already be copied to the base user folder."
#         Write-Host "If there are Files missing afterwards, please Login to Onedrive.com and Download them manually" -ForegroundColor Yellow
#         Start-Sleep 5
#         } else {
#             Write-Host "Something went Wrong during the Unistallation of OneDrive" -ForegroundColor Red
#         }
# '@)
#         Invoke-Scripts -ScriptBlock $InvokeScript -Name "InvokeScript"

#         $wpf_DblOneDrive.IsChecked = $false
#     }
#     if ( $wpf_DblModernCursorDark.IsChecked -eq $true ) {
#         Write-Host "Downloading cursor..." -ForegroundColor Green
#         $downloadUrl = "https://github.com/vukilis/Windows11-Optimizer-Debloater/raw/dev/cursor.zip" #github link
#         $outputPath = "$env:TEMP\win11app"

#         # Check if the file already exists
#         if (-not (Test-Path -Path "$outputPath\cursor.zip")) {
#             # File does not exist, download it
#             New-Item -ItemType Directory -Force -Path $outputPath
#             Invoke-WebRequest -Uri $downloadUrl -OutFile "$outputPath\cursor.zip"
#             Write-Host "File downloaded to: $outputPath" -ForegroundColor Green
#         } else {
#             Write-Host "File already exists at: $outputPath" -ForegroundColor Magenta
#         }

#         # Unzip the downloaded file
#         Write-Host "Unziping content..." -ForegroundColor Green
#         Expand-Archive -Path "$outputPath\cursor.zip" -DestinationPath $outputPath -Force

#         Write-Host "Installing cursor..." -ForegroundColor Green   
#         # Step 2: Run install.inf
#         $infPath = Join-Path $outputPath "dark\Install.inf"
#         # Check if the install.inf file exists
#         if (Test-Path $infPath) {
#             # Run the installation file
#             Start-Process "C:\Windows\System32\rundll32.exe" -ArgumentList "advpack.dll,LaunchINFSection $infPath,DefaultInstall"
#         } else {
#             Write-Host "Install.inf not found in the specified location."
#         }

#         # Set the cursor scheme values
#         Write-Host "Seting cursor..." -ForegroundColor Green
#         $cursorScheme = @"
# C:\Windows\Cursors\Windows_11_dark_v2\pointer.cur,C:\Windows\Cursors\Windows_11_dark_v2\help.cur,C:\Windows\Cursors\Windows_11_dark_v2\working.ani,C:\Windows\Cursors\Windows_11_dark_v2\busy.ani,C:\Windows\Cursors\Windows_11_dark_v2\precision.cur,C:\Windows\Cursors\Windows_11_dark_v2\beam.cur,C:\Windows\Cursors\Windows_11_dark_v2\handwriting.cur,C:\Windows\Cursors\Windows_11_dark_v2\unavailable.cur,C:\Windows\Cursors\Windows_11_dark_v2\vert.cur,C:\Windows\Cursors\Windows_11_dark_v2\horz.cur,C:\Windows\Cursors\Windows_11_dark_v2\dgn1.cur,C:\Windows\Cursors\Windows_11_dark_v2\dgn2.cur,C:\Windows\Cursors\Windows_11_dark_v2\move.cur,C:\Windows\Cursors\Windows_11_dark_v2\alternate.cur,C:\Windows\Cursors\Windows_11_dark_v2\link.cur,C:\Windows\Cursors\Windows_11_dark_v2\person.cur,C:\Windows\Cursors\Windows_11_dark_v2\pin.cur
# "@

#         # Define the Registry path for the cursor scheme
#         $registryPath = "HKCU:\Control Panel\Cursors"

#         # Set the new cursor scheme for each individual cursor type
#         $cursorTypes = @("AppStarting", "Arrow", "Crosshair", "Hand", "Help", "IBeam", "No", "NWPen", "SizeAll", "SizeNESW", "SizeNS", "SizeNWSE", "SizeWE", "UpArrow", "Wait")
        
#         Write-Host "Updating cursor..." -ForegroundColor Green
#         foreach ($cursorType in $cursorTypes) {
#             Set-ItemProperty -Path $registryPath -Name $cursorType -Value $cursorScheme
#         }

#         Start-Sleep 1

#         Add-Type @"
#     using System;
#     using System.Runtime.InteropServices;

#     public class SystemParamInfo
#     {
#         [DllImport("user32.dll", CharSet = CharSet.Unicode)]
#         public static extern int SystemParametersInfo(int uAction, int uParam, string lpvParam, int fuWinIni);
#     }
# "@

#         [SystemParamInfo]::SystemParametersInfo(0x0057, 0, $null, 0)

    
#         $wpf_DblModernCursorDark.IsChecked = $false
#     }
#     if ( $wpf_DblModernCursorLight.IsChecked -eq $true ) {
#         Write-Host "Downloading cursor..." -ForegroundColor Green
#         $downloadUrl = "https://github.com/vukilis/Windows11-Optimizer-Debloater/raw/dev/cursor.zip" #github link
#         $outputPath = "$env:TEMP\win11app"

#         # Check if the file already exists
#         if (-not (Test-Path -Path "$outputPath\cursor.zip")) {
#             # File does not exist, download it
#             New-Item -ItemType Directory -Force -Path $outputPath
#             Invoke-WebRequest -Uri $downloadUrl -OutFile "$outputPath\cursor.zip"
#             Write-Host "File downloaded to: $outputPath" -ForegroundColor Green
#         } else {
#             Write-Host "File already exists at: $outputPath" -ForegroundColor Magenta
#         }

#         # Unzip the downloaded file
#         Write-Host "Unziping content..." -ForegroundColor Green
#         Expand-Archive -Path "$outputPath\cursor.zip" -DestinationPath $outputPath -Force

#         Write-Host "Installing cursor..." -ForegroundColor Green   
#         # Step 2: Run install.inf
#         $infPath = Join-Path $outputPath "light\Install.inf"
#         # Check if the install.inf file exists
#         if (Test-Path $infPath) {
#             # Run the installation file
#             Start-Process "C:\Windows\System32\rundll32.exe" -ArgumentList "advpack.dll,LaunchINFSection $infPath,DefaultInstall"
#         } else {
#             Write-Host "Install.inf not found in the specified location."
#         }

#         # Set the cursor scheme values
#         Write-Host "Seting cursor..." -ForegroundColor Green
#         $cursorScheme = @"
# C:\Windows\Cursors\Windows_11_light_v2\pointer.cur,C:\Windows\Cursors\Windows_11_light_v2\help.cur,C:\Windows\Cursors\Windows_11_light_v2\working.ani,C:\Windows\Cursors\Windows_11_light_v2\busy.ani,C:\Windows\Cursors\Windows_11_light_v2\precision.cur,C:\Windows\Cursors\Windows_11_light_v2\beam.cur,C:\Windows\Cursors\Windows_11_light_v2\handwriting.cur,C:\Windows\Cursors\Windows_11_light_v2\unavailable.cur,C:\Windows\Cursors\Windows_11_light_v2\vert.cur,C:\Windows\Cursors\Windows_11_light_v2\horz.cur,C:\Windows\Cursors\Windows_11_light_v2\dgn1.cur,C:\Windows\Cursors\Windows_11_light_v2\dgn2.cur,C:\Windows\Cursors\Windows_11_light_v2\move.cur,C:\Windows\Cursors\Windows_11_light_v2\alternate.cur,C:\Windows\Cursors\Windows_11_light_v2\link.cur,C:\Windows\Cursors\Windows_11_light_v2\person.cur,C:\Windows\Cursors\Windows_11_light_v2\pin.cur
# "@

#         # Define the Registry path for the cursor scheme
#         $registryPath = "HKCU:\Control Panel\Cursors"

#         # Set the new cursor scheme for each individual cursor type
#         $cursorTypes = @("AppStarting", "Arrow", "Crosshair", "Hand", "Help", "IBeam", "No", "NWPen", "SizeAll", "SizeNESW", "SizeNS", "SizeNWSE", "SizeWE", "UpArrow", "Wait")
        
#         Write-Host "Updating cursor..." -ForegroundColor Green
#         foreach ($cursorType in $cursorTypes) {
#             Set-ItemProperty -Path $registryPath -Name $cursorType -Value $cursorScheme
#         }

#         Start-Sleep 1

#         Add-Type @"
#     using System;
#     using System.Runtime.InteropServices;

#     public class SystemParamInfo
#     {
#         [DllImport("user32.dll", CharSet = CharSet.Unicode)]
#         public static extern int SystemParametersInfo(int uAction, int uParam, string lpvParam, int fuWinIni);
#     }
# "@

#         [SystemParamInfo]::SystemParametersInfo(0x0057, 0, $null, 0)

    
#         $wpf_DblModernCursorLight.IsChecked = $false
#     }
#     Invoke-MessageBox -msg "tweak"
#     # Invoke restart computer
#     If ( $wpf_DblRestartPC.IsChecked -eq $true ) {
#         Restart-Computer
#     }
# }
function Invoke-ToggleFastPreset {
    <#

    .SYNOPSIS
        Fast preset to help when tweaking  
    #>

    $IsChecked = $wpf_fastPresetButton.IsChecked

    $wpf_megaPresetButton.IsEnabled = !$IsChecked; $wpf_megaPresetButton.Style = $wpf_megaPresetButton.TryFindResource(('ToggleSwitchStyle' + ('Purple', 'Disabled')[$IsChecked]))

    $tabItemName = "Tab4"
    $tabItem = $psform.FindName($tabItemName)

    if ($tabItem -eq $null) {
        Write-Host "TabItem not found"
        return
    }

    $checkBoxNames = "Telemetry", "Wifi", "AH", "DeleteTempFiles", "RecycleBin", "LocTrack", "Storage", "Hiber", "DVR", 
                    "DisableTeredo", "AutoAdjustVolume", "Power", "Display", "DisableUAC", "ClassicAltTab", 
                    "RightClickMenu", "Personalize", "ModernCursorLight"
    $checkBoxes = $checkBoxNames | ForEach-Object { $tabItem.FindName("Dbl$_") }

    foreach ($checkBox in $checkBoxes) {
        $checkBox.IsChecked = $IsChecked
    }

    if ($IsChecked) { Write-Host "Enabling Fast Preset" -ForegroundColor Green } else { Write-Host "Disabling Fast Preset" -ForegroundColor Red }
}
function Invoke-ToggleMegaPreset {
    <#

    .SYNOPSIS
        Mega preset to help when tweaking  
    #>

    $IsChecked = $wpf_megaPresetButton.IsChecked

    $wpf_fastPresetButton.IsEnabled = !$IsChecked; $wpf_fastPresetButton.Style = $wpf_fastPresetButton.TryFindResource(('ToggleSwitchStyle' + ('Green', 'Disabled')[$IsChecked]))

    $tabItemName = "Tab4"
    $tabItem = $psform.FindName($tabItemName)

    if ($tabItem -eq $null) {
        Write-Host "TabItem not found"
        return
    }

    $checkBoxNames = "Telemetry", "Wifi", "AH", "DeleteTempFiles", "RecycleBin", "DiskCleanup", "LocTrack", "Storage", "Hiber", "DVR", 
                    "CoreIsolation", "DisableTeredo", "AutoAdjustVolume", "Power", "Display", "RemoveCortana", "RemoveWidgets", "DisableNotifications", 
                    "RightClickMenu", "DisableUAC", "ClassicAltTab", "WindowsSound", "Personalize", "ModernCursorLight"
    $checkBoxes = $checkBoxNames | ForEach-Object { $tabItem.FindName("Dbl$_") }

    foreach ($checkBox in $checkBoxes) {
        $checkBox.IsChecked = $IsChecked
    }

    if ($IsChecked) { Write-Host "Enabling Mega Preset" -ForegroundColor Green } else { Write-Host "Disabling Mega Preset" -ForegroundColor Red }
}

################################################################################################################
###                                                                                                          ###
###                                          INFO: SERVICE FUNCTIONS                                         ###
###                                                                                                          ###
################################################################################################################

Get-Service -ErrorAction SilentlyContinue | ForEach-Object {[void]$wpf_ddlServices.Items.Add($_.Name)}
function Get-Services {
    <#

    .SYNOPSIS
        Function to get all services and their information 
    #>

    $ServiceName = $wpf_ddlServices.SelectedItem
    # Use Get-WmiObject to retrieve service information
    $serviceInfo = Get-WmiObject -Class Win32_Service -Filter "Name = '$ServiceName'"
    # Use Get-Service to retrieve service information
    $serviceDetails = Get-Service -Name $ServiceName -ErrorAction SilentlyContinue | Select-Object *
    # Use Display service information from Get-Service if available, otherwise fallback to WMI
    $wpf_lblName.Content = if ($serviceDetails.DisplayName) { $serviceDetails.DisplayName } else { $serviceInfo.Name }
    $wpf_lblStatus.Content = if ($serviceDetails.Status) { $serviceDetails.Status } else { $serviceInfo.State }
    $wpf_lblStartupType.Content = if ($serviceDetails.StartupType) { $serviceDetails.StartupType } else { $serviceInfo.StartMode }
    $wpf_lblServicesDesc.Text = if ($serviceDetails.Description) { $serviceDetails.Description } else { $serviceInfo.Description }


    ### status color
    $wpf_lblStatus.Foreground = switch ($wpf_lblStatus.Content) {
        'Stopped' {'red'} 
        'Paused' {'yellow'} 
        default {'green'}
    }
    ### type color
    $wpf_lblStartupType.Foreground = switch ($wpf_lblStartupType.Content) {
        'Manual' {'yellow'} 
        'Automatic' {'blue'} 
        default {'red'}
    }
}
function Invoke-gaming{
    <#

    .SYNOPSIS
        Set all services to gaming mode 
    #>

    # Set-Presets "gaming"
    $services_m = @(
        "BcastDVRUserService_48486de"                  # GameDVR and Broadcast is used for Game Recordings and Live Broadcasts
        "Browser"                                      # Let users browse and locate shared resources in neighboring computers
        "BthAvctpSvc"                                  # AVCTP service (needed for Bluetooth Audio Devices or Wireless Headphones)
        "CaptureService_48486de"                       # Optional screen capture functionality for applications that call the Windows.Graphics.Capture API.
        "cbdhsvc_48486de"                              # Clipboard Service
        "edgeupdate"                                   # Edge Update Service
        "edgeupdatem"                                  # Another Update Service
        "FontCache"                                    # Windows font cache
        "gupdate"                                      # Google Update
        "gupdatem"                                     # Another Google Update Service
        "lmhosts"                                      # TCP/IP NetBIOS Helper
        "MicrosoftEdgeElevationService"                # Another Edge Update Service
        "MSDTC"                                        # Distributed Transaction Coordinator
        "NahimicService"                               # Nahimic Service
        "PerfHost"                                     # Remote users and 64-bit processes to query performance.
        "QWAVE"                                        # Quality Windows Audio Video Experience (audio and video might sound worse)
        "RtkBtManServ"                                 # Realtek Bluetooth Device Manager Service
        "SharedAccess"                                 # Internet Connection Sharing (ICS)
        "ssh-agent"                                    # OpenSSH Authentication Agent
        "TrkWks"                                       # Distributed Link Tracking Client
        "WMPNetworkSvc"                                # Windows Media Player Network Sharing Service
        "WPDBusEnum"                                   # Portable Device Enumerator Service
        "WpnService"                                   # WpnService (Push Notifications may not work)
        "WSearch"                                      # Windows Search
        "XblAuthManager"                               # Xbox Live Auth Manager (Disabling Breaks Xbox Live Games)
        "XblGameSave"                                  # Xbox Live Game Save Service (Disabling Breaks Xbox Live Games)
        "XboxNetApiSvc"                                # Xbox Live Networking Service (Disabling Breaks Xbox Live Games)
        "XboxGipSvc"                                   # Xbox Accessory Management Service
        "HPAppHelperCap"
        "HPDiagsCap"
        "HPNetworkCap"
        "HPSysInfoCap"
        "HpTouchpointAnalyticsService"
        "HvHost"
        "vmicguestinterface"
        "vmicheartbeat"
        "vmickvpexchange"
        "vmicrdv"
        "vmicshutdown"
        "vmictimesync"
        "vmicvmsession"
    )

    foreach ($service in $services_m) {
        # -ErrorAction SilentlyContinue is so it doesn't write an error to stdout if a service doesn't exist
        Write-Host "Setting $service StartupType to Manual" -ForegroundColor Yellow
        Get-Service -Name $service -ErrorAction SilentlyContinue | Set-Service -StartupType Manual -ErrorAction SilentlyContinue
    }

    $services_d = @(
        "ALG"                                          # Application Layer Gateway Service(Provides support for 3rd party protocol plug-ins for Internet Connection Sharing)
        "AJRouter"                                     # Needed for AllJoyn Router Service
        "tzautoupdate"                                 # DialogBlockingService
        "CertPropSvc"                                  # Certificate Propagation
        "DusmSvc"                                      # Data Usage
        "DialogBlockingService"                        # DialogBlockingService
        "DiagTrack"                                    # Diagnostics Tracking Service
        "diagnosticshub.standardcollector.service"     # Microsoft (R) Diagnostics Hub Standard Collector Service
        "dmwappushservice"                             # WAP Push Message Routing Service
        "DPS"                                          # Diagnostic Policy Service (Detects and Troubleshoots Potential Problems)
        "Fax"                                          # Fax Service
        "fhsvc"                                        # Fax History
        "AppVClient"                                   # Microsoft App-V Client
        "MapsBroker"                                   # Downloaded Maps Manager
        "MsKeyboardFilter"                             # Microsoft Keyboard Filter
        "uhssvc"                                       # Microsoft Update Health
        "NcbService"                                   # Network Connection Broker (allow Windows Store Apps to receive notifications from the internet)
        "NetTcpPortSharing"                            # Net.Tcp Port Sharing Service
        "PcaSvc"                                       # Program Compatibility Assistant Service
        "PhoneSvc"                                     # Phone Service(Manages the telephony state on the device)
        "PrintNotify"                                  # Windows printer notifications and extentions
        "RemoteRegistry"                               # Remote Registry
        "RemoteAccess"                                 # Routing and Remote Access
        "RetailDemo"                                   # Demo Mode for Store Display
        "shpamsvc"                                     # Shared PC Account Manager
        "ScDeviceEnum"                                 # Smart Card Device Enumeration
        "SCPolicySvc"                                  # Smart Card Removal Policy
        "SEMgrSvc"                                     # Payments and NFC/SE Manager (Manages payments and Near Field Communication (NFC) based secure elements)
        "seclogon"                                     # Secondary Logon (Disables other credentials only password will work)
        "stisvc"                                       # Windows Image Acquisition (WIA)
        "Spooler"                                      # Print Spooler
        "SCardSvr"                                     # Windows Smart Card Service
        "SysMain"                                      # Analyses System Usage and Improves Performance
        "UevAgentService"                              # User Experience Virtualization Service
        "lfsvc"                                        # Geolocation Service
        "icssvc"                                       # Windows Mobile Hotspot Service 
        "iphlpsvc"                                     # IP Helper
        "WpcMonSvc"                                    # Parental Controls
        "WerSvc"                                       # Windows error reporting
        "WbioSrvc"                                     # Windows Biometric Service
        "wisvc"                                        # Windows Insider program(Windows Insider will not work if Disabled)
    )

    foreach ($service in $services_d) {
        # -ErrorAction SilentlyContinue is so it doesn't write an error to stdout if a service doesn't exist
        Write-Host "Setting $service StartupType to Disabled" -ForegroundColor Red
        Get-Service -Name $service -ErrorAction SilentlyContinue | Set-Service -StartupType Disabled -ErrorAction SilentlyContinue
    }
    Art -artN "
=======================================
----- Services set to Gaming Mode -----
=======================================
" -ch Cyan
    Invoke-MessageBox "tweak"
}
function Invoke-normal{
    <#

    .SYNOPSIS
        Set all services to default 
    #>

    #Set-Presets "normal"
    cmd /c services.msc
    Invoke-MessageBox "tweak"
}
function Invoke-recommended{
    <#

    .SYNOPSIS
        Set all services to manual startup 
    #>

    # Set-Presets "recommended"
    $services = @(
        "ALG"                                          # Application Layer Gateway Service(Provides support for 3rd party protocol plug-ins for Internet Connection Sharing)
        "AJRouter"                                     # Needed for AllJoyn Router Service
        "BcastDVRUserService_48486de"                  # GameDVR and Broadcast is used for Game Recordings and Live Broadcasts
        "Browser"                                      # Let users browse and locate shared resources in neighboring computers
        "BthAvctpSvc"                                  # AVCTP service (needed for Bluetooth Audio Devices or Wireless Headphones)
        "CaptureService_48486de"                       # Optional screen capture functionality for applications that call the Windows.Graphics.Capture API.
        "cbdhsvc_48486de"                              # Clipboard Service
        "diagnosticshub.standardcollector.service"     # Microsoft (R) Diagnostics Hub Standard Collector Service
        "DiagTrack"                                    # Diagnostics Tracking Service
        "dmwappushservice"                             # WAP Push Message Routing Service
        "DPS"                                          # Diagnostic Policy Service (Detects and Troubleshoots Potential Problems)
        "edgeupdate"                                   # Edge Update Service
        "edgeupdatem"                                  # Another Update Service
        "Fax"                                          # Fax Service
        "fhsvc"                                        # Fax History
        "FontCache"                                    # Windows font cache
        "gupdate"                                      # Google Update
        "gupdatem"                                     # Another Google Update Service
        "lfsvc"                                        # Geolocation Service
        "lmhosts"                                      # TCP/IP NetBIOS Helper
        "MapsBroker"                                   # Downloaded Maps Manager
        "MicrosoftEdgeElevationService"                # Another Edge Update Service
        "MSDTC"                                        # Distributed Transaction Coordinator
        "NahimicService"                               # Nahimic Service
        "NetTcpPortSharing"                            # Net.Tcp Port Sharing Service
        "PcaSvc"                                       # Program Compatibility Assistant Service
        "PerfHost"                                     # Remote users and 64-bit processes to query performance.
        "PhoneSvc"                                     # Phone Service(Manages the telephony state on the device)
        "PrintNotify"                                  # Windows printer notifications and extentions
        "QWAVE"                                        # Quality Windows Audio Video Experience (audio and video might sound worse)
        "RemoteAccess"                                 # Routing and Remote Access
        "RemoteRegistry"                               # Remote Registry
        "RetailDemo"                                   # Demo Mode for Store Display
        "RtkBtManServ"                                 # Realtek Bluetooth Device Manager Service
        "SCardSvr"                                     # Windows Smart Card Service
        "seclogon"                                     # Secondary Logon (Disables other credentials only password will work)
        "SEMgrSvc"                                     # Payments and NFC/SE Manager (Manages payments and Near Field Communication (NFC) based secure elements)
        "SharedAccess"                                 # Internet Connection Sharing (ICS)
        "ssh-agent"                                    # OpenSSH Authentication Agent
        "stisvc"                                       # Windows Image Acquisition (WIA)
        "SysMain"                                      # Analyses System Usage and Improves Performance
        "TrkWks"                                       # Distributed Link Tracking Client
        "WerSvc"                                       # Windows error reporting
        "wisvc"                                        # Windows Insider program(Windows Insider will not work if Disabled)
        "WMPNetworkSvc"                                # Windows Media Player Network Sharing Service
        "WpcMonSvc"                                    # Parental Controls
        "WPDBusEnum"                                   # Portable Device Enumerator Service
        "WpnService"                                   # WpnService (Push Notifications may not work)
        "WSearch"                                      # Windows Search
        "XblAuthManager"                               # Xbox Live Auth Manager (Disabling Breaks Xbox Live Games)
        "XblGameSave"                                  # Xbox Live Game Save Service (Disabling Breaks Xbox Live Games)
        "XboxNetApiSvc"                                # Xbox Live Networking Service (Disabling Breaks Xbox Live Games)
        "XboxGipSvc"                                   # Xbox Accessory Management Service
        "HPAppHelperCap"
        "HPDiagsCap"
        "HPNetworkCap"
        "HPSysInfoCap"
        "HpTouchpointAnalyticsService"
        "HvHost"
        "vmicguestinterface"
        "vmicheartbeat"
        "vmickvpexchange"
        "vmicrdv"
        "vmicshutdown"
        "vmictimesync"
        "vmicvmsession"
    )
    
    foreach ($service in $services) {
        # -ErrorAction SilentlyContinue is so it doesn't write an error to stdout if a service doesn't exist
        Write-Host "Setting $service StartupType to Manual" -ForegroundColor Yellow
        Get-Service -Name $service -ErrorAction SilentlyContinue | Set-Service -StartupType Manual -ErrorAction SilentlyContinue
    }
    Art -artN "
======================================
-- Services set to Recommended Mode --
======================================
" -ch Cyan
    Invoke-MessageBox "tweak"
}

################################################################################################################
###                                                                                                          ###
###                                          INFO: UPDATES FUNCTIONS                                         ###
###                                                                                                          ###
################################################################################################################

function Invoke-FixesUpdate{
    <#

    .SYNOPSIS
        Reset Windows Update Script - reregister dlls, services, and remove registry entires.
    #>

    Write-Host "1. Stopping Windows Update Services..."
    Stop-Service -Name BITS
    Stop-Service -Name wuauserv
    Stop-Service -Name appidsvc
    Stop-Service -Name cryptsvc
    Write-Host "2. Remove QMGR Data file..."
        Remove-Item "$env:allusersprofile\Application Data\Microsoft\Network\Downloader\qmgr*.dat" -ErrorAction SilentlyContinue

    Write-Host "3. Renaming the Software Distribution and CatRoot Folder..."
        Rename-Item $env:systemroot\SoftwareDistribution SoftwareDistribution.bak -ErrorAction SilentlyContinue
        Rename-Item $env:systemroot\System32\Catroot2 catroot2.bak -ErrorAction SilentlyContinue

    Write-Host "4. Removing old Windows Update log..."
        Remove-Item $env:systemroot\WindowsUpdate.log -ErrorAction SilentlyContinue

    Write-Host "5. Resetting the Windows Update Services to default settings..."
        Start-Process -NoNewWindow -FilePath "sc.exe" -ArgumentList "sdset", "bits", "D:(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)(A;;CCLCSWLOCRRC;;;AU)(A;;CCLCSWRPWPDTLOCRRC;;;PU)"
        Start-Process -NoNewWindow -FilePath "sc.exe" -ArgumentList "sdset", "wuauserv", "D:(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)(A;;CCLCSWLOCRRC;;;AU)(A;;CCLCSWRPWPDTLOCRRC;;;PU)"
        Set-Location $env:systemroot\system32

    Write-Host "6. Registering some DLLs..."
    $DLLs = @(
        "atl.dll", "urlmon.dll", "mshtml.dll", "shdocvw.dll", "browseui.dll",
        "jscript.dll", "vbscript.dll", "scrrun.dll", "msxml.dll", "msxml3.dll",
        "msxml6.dll", "actxprxy.dll", "softpub.dll", "wintrust.dll", "dssenh.dll",
        "rsaenh.dll", "gpkcsp.dll", "sccbase.dll", "slbcsp.dll", "cryptdlg.dll",
        "oleaut32.dll", "ole32.dll", "shell32.dll", "initpki.dll", "wuapi.dll",
        "wuaueng.dll", "wuaueng1.dll", "wucltui.dll", "wups.dll", "wups2.dll",
        "wuweb.dll", "qmgr.dll", "qmgrprxy.dll", "wucltux.dll", "muweb.dll", "wuwebv.dll"
    )
    foreach ($dll in $DLLs) {
        Start-Process -NoNewWindow -FilePath "regsvr32.exe" -ArgumentList "/s", $dll
    }

    Write-Host "7) Removing WSUS client settings..."
    if (Test-Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate") {
        Start-Process -NoNewWindow -FilePath "REG" -ArgumentList "DELETE", "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate", "/v", "AccountDomainSid", "/f"
        Start-Process -NoNewWindow -FilePath "REG" -ArgumentList "DELETE", "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate", "/v", "PingID", "/f"
        Start-Process -NoNewWindow -FilePath "REG" -ArgumentList "DELETE", "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate", "/v", "SusClientId", "/f"
    }

    Write-Host "8) Resetting the WinSock..."
        Start-Process -NoNewWindow -FilePath "netsh" -ArgumentList "winsock", "reset"
        Start-Process -NoNewWindow -FilePath "netsh" -ArgumentList "winhttp", "reset", "proxy"
        Start-Process -NoNewWindow -FilePath "netsh" -ArgumentList "int", "ip", "reset"

    Write-Host "9) Delete all BITS jobs..."
        Get-BitsTransfer | Remove-BitsTransfer

    Write-Host "10) Attempting to install the Windows Update Agent..."
    If ([System.Environment]::Is64BitOperatingSystem) {
        Start-Process -NoNewWindow -FilePath "wusa" -ArgumentList "Windows8-RT-KB2937636-x64", "/quiet"
    }
    else {
        Start-Process -NoNewWindow -FilePath "wusa" -ArgumentList "Windows8-RT-KB2937636-x86", "/quiet"
    }

    Write-Host "11) Starting Windows Update Services..."
        Start-Service -Name BITS
        Start-Service -Name wuauserv
        Start-Service -Name appidsvc
        Start-Service -Name cryptsvc

    Write-Host "12) Forcing discovery..."
    Start-Process -NoNewWindow -FilePath "wuauclt" -ArgumentList "/resetauthorization", "/detectnow"


    Write-Host "Process complete. Please reboot your computer."

    Art -artN "
    ===============================================
-- Reset All Windows Update Settings to Stock --
===============================================
" -ch DarkGreen
    Invoke-MessageBox -msg "updateFix"
}
function Invoke-PauseUpdate {
    <#

    .SYNOPSIS
        Pause Windows Update up to 35 days or 5 weeks.
    #>

    Write-Host "Pausing Windows Update for 5 weeks..." -ForegroundColor Green

    $pause = (Get-Date).AddDays(35)
    $pause = $pause.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
    #Write-Host $pause
    $pause_start = (Get-Date)
    $pause_start = $pause_start.ToUniversalTime().ToString( "yyyy-MM-ddTHH:mm:ssZ" )
    set-itemproperty -path 'hklm:\software\microsoft\windowsupdate\ux\settings' -name 'pauseupdatesexpirytime' -value $pause                                                                                        
    set-itemproperty -path 'hklm:\software\microsoft\windowsupdate\ux\settings' -name 'pausefeatureupdatesstarttime' -value $pause_start
    set-itemproperty -path 'hklm:\software\microsoft\windowsupdate\ux\settings' -name 'pausefeatureupdatesendtime' -value $pause
    set-itemproperty -path 'hklm:\software\microsoft\windowsupdate\ux\settings' -name 'pausequalityupdatesstarttime' -value $pause_start
    set-itemproperty -path 'hklm:\software\microsoft\windowsupdate\ux\settings' -name 'pausequalityupdatesendtime' -value $pause
    set-itemproperty -path 'hklm:\software\microsoft\windowsupdate\ux\settings' -name 'pauseupdatesstarttime' -value $pause_start
    new-item -path 'hklm:\software\policies\microsoft\windows\windowsupdate\au' -force
    new-itemproperty -path  'hklm:\software\policies\microsoft\windows\windowsupdate\au' -name 'noautoupdate' -propertytype dword -value 1  
    
    $pauseDateOnly = (Get-Date).AddDays(35)
    $pauseDateOnly = $pauseDateOnly.ToUniversalTime().ToString("yyyy-MM-dd")

    Art -artN "
======================================
-- Updates paused until $pauseDateOnly --
======================================
" -ch DarkGreen
    Invoke-MessageBox -msg "updatePause" 
}
function Invoke-UpdatesDefault{
    <#

    .SYNOPSIS
        Resets Windows Update settings to default
    #>

    If (!(Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU")) {
        New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" -Force | Out-Null
    }
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" -Name "NoAutoUpdate" -Type DWord -Value 0
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" -Name "AUOptions" -Type DWord -Value 3
    If (!(Test-Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\DeliveryOptimization\Config")) {
        New-Item -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\DeliveryOptimization\Config" -Force | Out-Null
    }
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\DeliveryOptimization\Config" -Name "DODownloadMode" -Type DWord -Value 1
    
    $services = @(
        "BITS"
        "wuauserv"
    )

    foreach ($service in $services) {
        # -ErrorAction SilentlyContinue is so it doesn't write an error to stdout if a service doesn't exist

        Write-Host "Setting $service StartupType to Automatic"
        Get-Service -Name $service -ErrorAction SilentlyContinue | Set-Service -StartupType Automatic
    }
    Write-Host "Enabling driver offering through Windows Update..."
    Remove-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Device Metadata" -Name "PreventDeviceMetadataFromNetwork" -ErrorAction SilentlyContinue
    Remove-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\DriverSearching" -Name "DontPromptForWindowsUpdate" -ErrorAction SilentlyContinue
    Remove-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\DriverSearching" -Name "DontSearchWindowsUpdate" -ErrorAction SilentlyContinue
    Remove-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\DriverSearching" -Name "DriverUpdateWizardWuSearchEnabled" -ErrorAction SilentlyContinue
    Remove-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" -Name "ExcludeWUDriversInQualityUpdate" -ErrorAction SilentlyContinue
    Write-Host "Enabling Windows Update automatic restart..."
    Remove-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" -Name "NoAutoRebootWithLoggedOnUsers" -ErrorAction SilentlyContinue
    Remove-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" -Name "AUPowerManagement" -ErrorAction SilentlyContinue
    Write-Host "Enabled driver offering through Windows Update"
    Remove-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\WindowsUpdate\UX\Settings" -Name "BranchReadinessLevel" -ErrorAction SilentlyContinue
    Remove-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\WindowsUpdate\UX\Settings" -Name "DeferFeatureUpdatesPeriodInDays" -ErrorAction SilentlyContinue
    Remove-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\WindowsUpdate\UX\Settings" -Name "DeferQualityUpdatesPeriodInDays " -ErrorAction SilentlyContinue
    Art -artN "
==================================
----- Updates Set to Default -----
==================================
" -ch Cyan
    Invoke-MessageBox -msg "updateDefault"
}
function Invoke-UpdatesDisable{
    <#

    .SYNOPSIS
        Disable Windows Update
    
    .NOTES
        Disabling Windows Update is not recommended.
    #>

    If (!(Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU")) {
        New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" -Force | Out-Null
    }
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" -Name "NoAutoUpdate" -Type DWord -Value 1
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" -Name "AUOptions" -Type DWord -Value 1
    If (!(Test-Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\DeliveryOptimization\Config")) {
        New-Item -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\DeliveryOptimization\Config" -Force | Out-Null
    }
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\DeliveryOptimization\Config" -Name "DODownloadMode" -Type DWord -Value 0

    $services = @(
        "BITS"
        "wuauserv"
    )

    foreach ($service in $services) {
        # -ErrorAction SilentlyContinue is so it doesn't write an error to stdout if a service doesn't exist

        Write-Host "Setting $service StartupType to Disabled"
        Get-Service -Name $service -ErrorAction SilentlyContinue | Set-Service -StartupType Disabled
    }
    Art -artN "
==================================
------ Updates ARE DISABLED ------
==================================
" -ch DarkRed
    Invoke-MessageBox -msg "updateDisabled"
}
function Invoke-UpdatesSecurity{
    <#

    .SYNOPSIS
        Set Windows Update to security
    
    .DESCRIPTION
        1. Disables driver offering through Windows Update
        2. Disables Windows Update automatic restart
        3. Sets Windows Update to Semi-Annual Channel (Targeted)
        4. Defers feature updates for 365 days
        5. Defers quality updates for 4 days
        
    #>

    Write-Host "Disabling driver offering through Windows Update..."
    If (!(Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Device Metadata")) {
        New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Device Metadata" -Force | Out-Null
    }
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Device Metadata" -Name "PreventDeviceMetadataFromNetwork" -Type DWord -Value 1
    If (!(Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\DriverSearching")) {
        New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\DriverSearching" -Force | Out-Null
    }
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\DriverSearching" -Name "DontPromptForWindowsUpdate" -Type DWord -Value 1
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\DriverSearching" -Name "DontSearchWindowsUpdate" -Type DWord -Value 1
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\DriverSearching" -Name "DriverUpdateWizardWuSearchEnabled" -Type DWord -Value 0
    If (!(Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate")) {
        New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" | Out-Null
    }
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" -Name "ExcludeWUDriversInQualityUpdate" -Type DWord -Value 1
    Write-Host "Disabling Windows Update automatic restart..."
    If (!(Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU")) {
        New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" -Force | Out-Null
    }
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" -Name "NoAutoRebootWithLoggedOnUsers" -Type DWord -Value 1
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" -Name "AUPowerManagement" -Type DWord -Value 0
    Write-Host "Disabled driver offering through Windows Update"
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\WindowsUpdate\UX\Settings" -Name "BranchReadinessLevel" -Type DWord -Value 20
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\WindowsUpdate\UX\Settings" -Name "DeferFeatureUpdatesPeriodInDays" -Type DWord -Value 365
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\WindowsUpdate\UX\Settings" -Name "DeferQualityUpdatesPeriodInDays " -Type DWord -Value 4

    Art -artN "
==================================
--- Updates Set to Recommended ---
==================================
" -ch Cyan
    Invoke-MessageBox -msg "updateSecurity"
}

################################################################################################################
###                                                                                                          ###
###                                           INFO: CONFIG FUNCTIONS                                         ###
###                                                                                                          ###
################################################################################################################

function Invoke-FixADB {
    <#

    .SYNOPSIS
        This script will find install location of ADB and set environment. 
    #>

    #[Environment]::SetEnvironmentVariable('PATH', ([Environment]::GetEnvironmentVariable('PATH', [System.EnvironmentVariableTarget]::User) + ';C:\Users\winget\Packages\Google.PlatformTools_Microsoft.Winget.Source_8wekyb3d8bbwe\platform-tools'), [System.EnvironmentVariableTarget]::User)

    $filePath = "$env:LOCALAPPDATA\Packages\Microsoft.DesktopAppInstaller_8wekyb3d8bbwe\LocalState\settings.json"
    $jsonContent = Get-Content -Path $filePath | Out-String
    $jsonObject = ConvertFrom-Json $jsonContent
    if ($jsonObject.installBehavior.PSObject.Properties.Name -contains 'portablePackageUserRoot') {
        $portablePackageUserRoot = $jsonObject.installBehavior.portablePackageUserRoot -replace '/', '\'
        #Write-Output "portablePackageUserRoot: $portablePackageUserRoot"
        $targetPath = "$portablePackageUserRoot\Google.PlatformTools_Microsoft.Winget.Source_8wekyb3d8bbwe\platform-tools"
    } else {
        $targetPath = "%LOCALAPPDATA%\Microsoft\WinGet\Packages\Google.PlatformTools_Microsoft.Winget.Source_8wekyb3d8bbwe\platform-tools"
        #Write-Output "portablePackageUserRoot property does not exist in the JSON file."
    }

    $userPath = [Environment]::GetEnvironmentVariable('PATH', [System.EnvironmentVariableTarget]::User)

    # Check if the path is already in the user's PATH
    if ($userPath -notlike "*$targetPath*") {
        # Append the path to the end if it doesn't exist
        [Environment]::SetEnvironmentVariable('PATH', "$userPath;$targetPath", [System.EnvironmentVariableTarget]::User)
        #Write-Host "Path added to the user's PATH variable." -ForegroundColor Green
        Art -artN "
=============================================
-- Path added to the user's PATH variable. --
=============================================
" -ch DarkGreen
    } else {
        #Write-Host "Path is already present in the user's PATH variable." -ForegroundColor Magenta
        Art -artN "
==========================================================
-- Path is already present in the user's PATH variable. --
==========================================================
" -ch Magenta
    }
    
    Invoke-MessageBox -msg "tweak"
    
}
function Set-WingetConfig {
    <#

    .SYNOPSIS
        This function will setup winget configuration. 
    #>

    $jsonContent = @'
{
    "$schema": "https://aka.ms/winget-settings.schema.json",
    "visual": {
        "progressBar": "rainbow"
    },
    "installBehavior": {
        "preferences": {
            "locale": [ "en-US" ]
        },
        "portablePackageUserRoot": "C:/Users/winget/Packages",
        "portablePackageMachineRoot": "C:/Program Files/winget/Packages"
    },
    "telemetry": {
        "disable": true
    },
    "logging": {
        "level": "error"
    }
}
'@

    $filePath = "$env:LOCALAPPDATA\Packages\Microsoft.DesktopAppInstaller_8wekyb3d8bbwe\LocalState\settings.json"
    $jsonContent | Set-Content -Path $filePath
    Art -artN "
====================================
-- WinGet settings are configured --
====================================
" -ch DarkGreen
    Invoke-MessageBox -msg "tweak"
}
function Invoke-ActivateWindows {
    <#
        .DESCRIPTION
        Run Microsoft Activation Scripts (MAS) script 
    #>
    Start-Process powershell -ArgumentList "-NoProfile -ExecutionPolicy Bypass -Command irm https://massgrave.dev/get | iex" -Verb RunAs
}

function Invoke-Configs {
    <#
    .DESCRIPTION
    Simple Switch for lagacy windows
#>
param($Panel)

switch ($Panel){
    "wpf_PanelControl"              {cmd /c control}
    "wpf_PanelPnF"                  {cmd /c appwiz.cpl}
    "wpf_PanelNetwork"              {cmd /c ncpa.cpl}
    "wpf_PanelPower"                {cmd /c powercfg.cpl}
    "wpf_PanelSound"                {cmd /c mmsys.cpl}
    "wpf_PanelSystem"               {cmd /c sysdm.cpl}
    "wpf_PanelUser"                 {cmd /c "control userpasswords2"}
    "wpf_PanelServices"             {cmd /c services.msc}
    "wpf_PanelWindowsFirewall"      {cmd /c firewall.cpl}
    "wpf_PanelDeviceManager"        {cmd /c devmgmt.msc}
    "wpf_PanelExplorerOption"       {cmd /c control folders}
    "wpf_PanelRegedit"              {cmd /c regedit}
    "wpf_PanelScheduler"            {cmd /c taskschd.msc}
    "wpf_PanelResourceMonitor"      {cmd /c resmon}
    "wpf_PanelSysConf"              {cmd /c msconfig}
    "wpf_PanelEvent"                {cmd /c taskschd.msc}
    "wpf_PanelSysInfo"              {cmd /c msinfo32}
    "wpf_PanelDiskManagement"       {cmd /c diskmgmt.msc}
    "wpf_PanelRegion"               {cmd /c intl.cpl}
}
}
function Invoke-FeatureInstall {
    <#
    .DESCRIPTION
    GUI Function to install Windows Features
    #>
    If ( $wpf_FeaturesDotnet.IsChecked -eq $true ) {
        Enable-WindowsOptionalFeature -Online -FeatureName "NetFx4-AdvSrvs" -All -NoRestart
        Enable-WindowsOptionalFeature -Online -FeatureName "NetFx3" -All -NoRestart
    }
    If ( $wpf_FeaturesHyperv.IsChecked -eq $true ) {
        Enable-WindowsOptionalFeature -Online -FeatureName "HypervisorPlatform" -All -NoRestart
        Enable-WindowsOptionalFeature -Online -FeatureName "Microsoft-Hyper-V-All" -All -NoRestart
        Enable-WindowsOptionalFeature -Online -FeatureName "Microsoft-Hyper-V" -All -NoRestart
        Enable-WindowsOptionalFeature -Online -FeatureName "Microsoft-Hyper-V-Tools-All" -All -NoRestart
        Enable-WindowsOptionalFeature -Online -FeatureName "Microsoft-Hyper-V-Management-PowerShell" -All -NoRestart
        Enable-WindowsOptionalFeature -Online -FeatureName "Microsoft-Hyper-V-Hypervisor" -All -NoRestart
        Enable-WindowsOptionalFeature -Online -FeatureName "Microsoft-Hyper-V-Services" -All -NoRestart
        Enable-WindowsOptionalFeature -Online -FeatureName "Microsoft-Hyper-V-Management-Clients" -All -NoRestart
        cmd /c bcdedit /set hypervisorschedulertype classic
        Write-Host "HyperV is now installed and configured. Please Reboot before using."
    }
    If ( $wpf_FeaturesLegacymedia.IsChecked -eq $true ) {
        Enable-WindowsOptionalFeature -Online -FeatureName "WindowsMediaPlayer" -All -NoRestart
        Enable-WindowsOptionalFeature -Online -FeatureName "MediaPlayback" -All -NoRestart
        Enable-WindowsOptionalFeature -Online -FeatureName "DirectPlay" -All -NoRestart
        Enable-WindowsOptionalFeature -Online -FeatureName "LegacyComponents" -All -NoRestart
    }
    If ( $wpf_FeatureWsl.IsChecked -eq $true ) {
        Enable-WindowsOptionalFeature -Online -FeatureName "VirtualMachinePlatform" -All -NoRestart
        Enable-WindowsOptionalFeature -Online -FeatureName "Microsoft-Windows-Subsystem-Linux" -All -NoRestart
        Write-Host "WSL is now installed and configured. Please Reboot before using."
    }
    If ( $wpf_FeatureNfs.IsChecked -eq $true ) {
        Enable-WindowsOptionalFeature -Online -FeatureName "ServicesForNFS-ClientOnly" -All -NoRestart
        Enable-WindowsOptionalFeature -Online -FeatureName "ClientForNFS-Infrastructure" -All -NoRestart
        Enable-WindowsOptionalFeature -Online -FeatureName "NFS-Administration" -All -NoRestart
        nfsadmin client stop
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\ClientForNFS\CurrentVersion\Default" -Name "AnonymousUID" -Type DWord -Value 0
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\ClientForNFS\CurrentVersion\Default" -Name "AnonymousGID" -Type DWord -Value 0
        nfsadmin client start
        nfsadmin client localhost config fileaccess=755 SecFlavors=+sys -krb5 -krb5i
        Write-Host "NFS is now setup for user based NFS mounts"
    }

    Write-Host "================================="
    Write-Host "---  Features are Installed   ---"
    Write-Host "================================="

    Invoke-MessageBox -msg "feature"
}
function Invoke-FixesNetwork {
    <#

    .SYNOPSIS
        Resets various network configurations
    #>

    Write-Host "Resetting Network with netsh" -ForegroundColor Green

    # Reset WinSock catalog to a clean state
    Start-Process -NoNewWindow -FilePath "netsh" -ArgumentList "winsock", "reset"
    # Resets WinHTTP proxy setting to DIRECT
    Start-Process -NoNewWindow -FilePath "netsh" -ArgumentList "winhttp", "reset", "proxy"
    # Removes all user configured IP settings
    Start-Process -NoNewWindow -FilePath "netsh" -ArgumentList "int", "ip", "reset"

    Write-Host "Process complete. Please reboot your computer." -ForegroundColor Green

    Art -artN "
===============================================
-- Network Configuration has been Reset --
===============================================
" -ch DarkGreen
    Invoke-MessageBox -msg "networkReset"
}
function Invoke-FixesSound {
    <#

    .SYNOPSIS
        Reset sound service. 
    #>

    Restart-Service -Name "Audiosrv" -Force -Confirm:$false
    Write-Host "Windows Audio Service restarted successfully."
    Art -artN "
==================================================
-- Windows Audio Service restarted successfully --
==================================================
" -ch DarkGreen
    Invoke-MessageBox -msg "soundReset"
}
function Invoke-PanelAutologin {
    <#
        .DESCRIPTION
        PlaceHolder
    #>
    curl.exe -ss "https://live.sysinternals.com/Autologon.exe" -o $env:temp\autologin.exe # Official Microsoft recommendation https://learn.microsoft.com/en-us/sysinternals/downloads/autologon
    cmd /c $env:temp\autologin.exe
}
function Invoke-RegistryBackup {
    <#

    .SYNOPSIS
        Creating a backup registry. 
    #>

    Art -artN "
============================================================
== Backup might take some time - approximation 30 seconds ==
============================================================
" -ch DarkGreen

    Add-Type -AssemblyName System.Windows.Forms
    $FileBrowser = New-Object System.Windows.Forms.SaveFileDialog
    $FileBrowser.Title = "Save Registry Backup"
    $FileBrowser.Filter = "Registry files (*.reg)|*.reg"
    $FileBrowser.DefaultExt = "reg"
    $FileBrowser.AddExtension = $true
    $FileBrowser.InitialDirectory = [Environment]::GetFolderPath("Desktop")

    $DialogResult = $FileBrowser.ShowDialog()

    if ($DialogResult -eq [System.Windows.Forms.DialogResult]::OK) {
        $FilePath = $FileBrowser.FileName
        $TempFilePath = [System.IO.Path]::GetTempFileName()
        $RegistryRoots = @("HKEY_CURRENT_USER", "HKEY_LOCAL_MACHINE", "HKEY_CURRENT_CONFIG")

        foreach ($Root in $RegistryRoots) {
            reg export $Root $TempFilePath /y
            Get-Content -Path $TempFilePath | Out-File -Append -FilePath $FilePath
        }
        Remove-Item -Path $TempFilePath

        Art -artN "
==========================================
== Backup registry created successfully ==
== Location: $FilePath ==
==========================================
" -ch DarkGreen

    Invoke-MessageBox -msg "backup"
    } else {
        Art -artN "
======================================
== Operation cancelled by the user. ==
======================================
" -ch DarkRed
    }
}

function Invoke-ShortcutApp {
    <#

    .SYNOPSIS
        Creates a shortcut and prompts for a save location

    .PARAMETER ShortcutToAdd
        The name of the shortcut to add

    #>
    param($ShortcutToAdd)

        $iconPath = $null
        Switch ($ShortcutToAdd) {
        "Win11Deb" {
            $SourceExe = "$env:SystemRoot\System32\WindowsPowerShell\v1.0\powershell.exe"
            $IRM = 'irm https://dub.sh/win11deb | iex'
            $Powershell = '-NoProfile -ExecutionPolicy Bypass'
            $ArgumentsToSourceExe = "$powershell $IRM"
            $DestinationName = "Win11Deb.lnk"
            
            $downloadUrl = "https://raw.githubusercontent.com/vukilis/Windows11-Optimizer-Debloater/dev/icon.ico"
            $destinationPath = "$env:SystempRoot\win11deb.ico"

            # Check if the file already exists
            if (-not (Test-Path -Path "$env:SystempRoot\win11deb.ico")) {
                # File does not exist, download it
                Invoke-WebRequest -Uri $downloadUrl -OutFile $destinationPath
                Write-Host "File downloaded to: $destinationPath" -ForegroundColor Green
            } else {
                Write-Host "File already exists at: $destinationPath" -ForegroundColor Magenta
            }     
            $iconPath = "$env:SystempRoot\win11deb.ico"
        }
    }

    $FileBrowser = New-Object System.Windows.Forms.SaveFileDialog
    $FileBrowser.InitialDirectory = [Environment]::GetFolderPath('Desktop')
    $FileBrowser.Filter = "Shortcut Files (*.lnk)|*.lnk"
    $FileBrowser.FileName = $DestinationName
    $DialogResult = $FileBrowser.ShowDialog()

    if ($DialogResult -eq [System.Windows.Forms.DialogResult]::OK) {
        $WshShell = New-Object -comObject WScript.Shell
        $Shortcut = $WshShell.CreateShortcut($FileBrowser.FileName)
        $Shortcut.TargetPath = $SourceExe
        $Shortcut.Arguments = $ArgumentsToSourceExe
        if ($null -ne $iconPath) {
            $shortcut.IconLocation = $iconPath
        }
        $Shortcut.Save()

        $bytes = [System.IO.File]::ReadAllBytes($($FileBrowser.FileName))
        $bytes[0x15] = $bytes[0x15] -bor 0x20 #set byte 21 (0x15) bit 6 (0x20) ON
        [System.IO.File]::WriteAllBytes("$($FileBrowser.FileName)", $bytes)

        Art -artN "
Shortcut for $ShortcutToAdd has been saved to $($FileBrowser.FileName)
" -ch DarkGreen

    Invoke-MessageBox -msg "shortcut"
    }else {
        Art -artN "
======================================
== Operation cancelled by the user. ==
======================================
" -ch DarkRed
    }
}

################################################################################################################
###                                                                                                          ###
###                                       INFO: SETUP BACKGROUND CONFIG                                      ###
###                                                                                                          ###
################################################################################################################

$psVersion = $PSVersionTable.PSVersion
if ($psVersion.Major -eq 7 -and $psVersion.Minor -ge 1) {
    Write-Host "You are running PowerShell version 7.1 or higher." -ForegroundColor Green
    Get-Author7
} elseif ($psVersion.Major -eq 5 -and $psVersion.Minor -eq 1) {
    Write-Host "You are running PowerShell version 5.1." -ForegroundColor Blue
    Get-Author5
} else {
    Write-Host "You are running a different version of PowerShell. Versions from 1.0 to 5.0 not supported!" -ForegroundColor Red
}

if (-not ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
    Write-Host "################################################################################################" -ForegroundColor Red
    Write-Host "Not running as administrator. Please run the script as an administrator!" -ForegroundColor Red
    Write-Host "If you continue to use as non-admin user, it will result to script creates unexpected behaviour!" -ForegroundColor Red
    Write-Host "################################################################################################" -ForegroundColor Red

    $wpf_ElevatorStatus.Visibility = "Visible"
    $wpf_ElevatorStatus.Background = "red"
    $wpf_ElevatorMode.Content = "Not running as administrator. Please run the script as an administrator!!!"
} 

$wpf_diskNameInfo.Add_SelectionChanged({Get-DiskInfo})
$wpf_diskName.Add_SelectionChanged({Get-DiskSize})
$wpf_ddlServices.Add_SelectionChanged({Get-Services})

# Check if the window is already opened or not
if ($psform.IsVisible -eq $false -or $psform.IsLoaded -eq $false) {
    $psform.ShowDialog() | Out-Null
} else {
    Write-Host "The window is already open and cannot be shown again."
}

Stop-Transcript
